// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newProductComment(db *gorm.DB, opts ...gen.DOOption) productComment {
	_productComment := productComment{}

	_productComment.productCommentDo.UseDB(db, opts...)
	_productComment.productCommentDo.UseModel(&model.ProductComment{})

	tableName := _productComment.productCommentDo.TableName()
	_productComment.ALL = field.NewAsterisk(tableName)
	_productComment.ID = field.NewInt64(tableName, "id")
	_productComment.MemberID = field.NewInt64(tableName, "member_id")
	_productComment.MemberName = field.NewString(tableName, "member_name")
	_productComment.GoodsID = field.NewInt64(tableName, "goods_id")
	_productComment.Content = field.NewString(tableName, "content")
	_productComment.LikeNum = field.NewInt(tableName, "like_num")
	_productComment.CreatedAt = field.NewInt64(tableName, "created_at")
	_productComment.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_productComment.fillFieldMap()

	return _productComment
}

// productComment 产品评论表
type productComment struct {
	productCommentDo

	ALL        field.Asterisk
	ID         field.Int64
	MemberID   field.Int64  // 用户ID
	MemberName field.String // 用户名称
	GoodsID    field.Int64  // 商品ID
	Content    field.String // 评论内容
	LikeNum    field.Int    // 评论点赞数
	CreatedAt  field.Int64
	UpdatedAt  field.Int64

	fieldMap map[string]field.Expr
}

func (p productComment) Table(newTableName string) *productComment {
	p.productCommentDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p productComment) As(alias string) *productComment {
	p.productCommentDo.DO = *(p.productCommentDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *productComment) updateTableName(table string) *productComment {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.MemberID = field.NewInt64(table, "member_id")
	p.MemberName = field.NewString(table, "member_name")
	p.GoodsID = field.NewInt64(table, "goods_id")
	p.Content = field.NewString(table, "content")
	p.LikeNum = field.NewInt(table, "like_num")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *productComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *productComment) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["member_id"] = p.MemberID
	p.fieldMap["member_name"] = p.MemberName
	p.fieldMap["goods_id"] = p.GoodsID
	p.fieldMap["content"] = p.Content
	p.fieldMap["like_num"] = p.LikeNum
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p productComment) clone(db *gorm.DB) productComment {
	p.productCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p productComment) replaceDB(db *gorm.DB) productComment {
	p.productCommentDo.ReplaceDB(db)
	return p
}

type productCommentDo struct{ gen.DO }

type IProductCommentDo interface {
	gen.SubQuery
	Debug() IProductCommentDo
	WithContext(ctx context.Context) IProductCommentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProductCommentDo
	WriteDB() IProductCommentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProductCommentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProductCommentDo
	Not(conds ...gen.Condition) IProductCommentDo
	Or(conds ...gen.Condition) IProductCommentDo
	Select(conds ...field.Expr) IProductCommentDo
	Where(conds ...gen.Condition) IProductCommentDo
	Order(conds ...field.Expr) IProductCommentDo
	Distinct(cols ...field.Expr) IProductCommentDo
	Omit(cols ...field.Expr) IProductCommentDo
	Join(table schema.Tabler, on ...field.Expr) IProductCommentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProductCommentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProductCommentDo
	Group(cols ...field.Expr) IProductCommentDo
	Having(conds ...gen.Condition) IProductCommentDo
	Limit(limit int) IProductCommentDo
	Offset(offset int) IProductCommentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProductCommentDo
	Unscoped() IProductCommentDo
	Create(values ...*model.ProductComment) error
	CreateInBatches(values []*model.ProductComment, batchSize int) error
	Save(values ...*model.ProductComment) error
	First() (*model.ProductComment, error)
	Take() (*model.ProductComment, error)
	Last() (*model.ProductComment, error)
	Find() ([]*model.ProductComment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductComment, err error)
	FindInBatches(result *[]*model.ProductComment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProductComment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProductCommentDo
	Assign(attrs ...field.AssignExpr) IProductCommentDo
	Joins(fields ...field.RelationField) IProductCommentDo
	Preload(fields ...field.RelationField) IProductCommentDo
	FirstOrInit() (*model.ProductComment, error)
	FirstOrCreate() (*model.ProductComment, error)
	FindByPage(offset int, limit int) (result []*model.ProductComment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProductCommentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p productCommentDo) Debug() IProductCommentDo {
	return p.withDO(p.DO.Debug())
}

func (p productCommentDo) WithContext(ctx context.Context) IProductCommentDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productCommentDo) ReadDB() IProductCommentDo {
	return p.Clauses(dbresolver.Read)
}

func (p productCommentDo) WriteDB() IProductCommentDo {
	return p.Clauses(dbresolver.Write)
}

func (p productCommentDo) Session(config *gorm.Session) IProductCommentDo {
	return p.withDO(p.DO.Session(config))
}

func (p productCommentDo) Clauses(conds ...clause.Expression) IProductCommentDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productCommentDo) Returning(value interface{}, columns ...string) IProductCommentDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productCommentDo) Not(conds ...gen.Condition) IProductCommentDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productCommentDo) Or(conds ...gen.Condition) IProductCommentDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productCommentDo) Select(conds ...field.Expr) IProductCommentDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productCommentDo) Where(conds ...gen.Condition) IProductCommentDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productCommentDo) Order(conds ...field.Expr) IProductCommentDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productCommentDo) Distinct(cols ...field.Expr) IProductCommentDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productCommentDo) Omit(cols ...field.Expr) IProductCommentDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productCommentDo) Join(table schema.Tabler, on ...field.Expr) IProductCommentDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProductCommentDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) IProductCommentDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productCommentDo) Group(cols ...field.Expr) IProductCommentDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productCommentDo) Having(conds ...gen.Condition) IProductCommentDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productCommentDo) Limit(limit int) IProductCommentDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productCommentDo) Offset(offset int) IProductCommentDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProductCommentDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productCommentDo) Unscoped() IProductCommentDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productCommentDo) Create(values ...*model.ProductComment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productCommentDo) CreateInBatches(values []*model.ProductComment, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productCommentDo) Save(values ...*model.ProductComment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productCommentDo) First() (*model.ProductComment, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductComment), nil
	}
}

func (p productCommentDo) Take() (*model.ProductComment, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductComment), nil
	}
}

func (p productCommentDo) Last() (*model.ProductComment, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductComment), nil
	}
}

func (p productCommentDo) Find() ([]*model.ProductComment, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProductComment), err
}

func (p productCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductComment, err error) {
	buf := make([]*model.ProductComment, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productCommentDo) FindInBatches(result *[]*model.ProductComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productCommentDo) Attrs(attrs ...field.AssignExpr) IProductCommentDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productCommentDo) Assign(attrs ...field.AssignExpr) IProductCommentDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productCommentDo) Joins(fields ...field.RelationField) IProductCommentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productCommentDo) Preload(fields ...field.RelationField) IProductCommentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productCommentDo) FirstOrInit() (*model.ProductComment, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductComment), nil
	}
}

func (p productCommentDo) FirstOrCreate() (*model.ProductComment, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductComment), nil
	}
}

func (p productCommentDo) FindByPage(offset int, limit int) (result []*model.ProductComment, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productCommentDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productCommentDo) Delete(models ...*model.ProductComment) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productCommentDo) withDO(do gen.Dao) *productCommentDo {
	p.DO = *do.(*gen.DO)
	return p
}
