// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newPostComment(db *gorm.DB, opts ...gen.DOOption) postComment {
	_postComment := postComment{}

	_postComment.postCommentDo.UseDB(db, opts...)
	_postComment.postCommentDo.UseModel(&model.PostComment{})

	tableName := _postComment.postCommentDo.TableName()
	_postComment.ALL = field.NewAsterisk(tableName)
	_postComment.ID = field.NewInt64(tableName, "id")
	_postComment.MemberID = field.NewInt64(tableName, "member_id")
	_postComment.MemberName = field.NewString(tableName, "member_name")
	_postComment.PostID = field.NewInt64(tableName, "post_id")
	_postComment.Content = field.NewString(tableName, "content")
	_postComment.LikeNum = field.NewInt(tableName, "like_num")
	_postComment.CreatedAt = field.NewInt64(tableName, "created_at")
	_postComment.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_postComment.fillFieldMap()

	return _postComment
}

// postComment 帖子评论表
type postComment struct {
	postCommentDo

	ALL        field.Asterisk
	ID         field.Int64
	MemberID   field.Int64  // 用户ID
	MemberName field.String // 用户名称
	PostID     field.Int64  // 帖子ID
	Content    field.String // 评论内容
	LikeNum    field.Int    // 评论点赞数
	CreatedAt  field.Int64
	UpdatedAt  field.Int64

	fieldMap map[string]field.Expr
}

func (p postComment) Table(newTableName string) *postComment {
	p.postCommentDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p postComment) As(alias string) *postComment {
	p.postCommentDo.DO = *(p.postCommentDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *postComment) updateTableName(table string) *postComment {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.MemberID = field.NewInt64(table, "member_id")
	p.MemberName = field.NewString(table, "member_name")
	p.PostID = field.NewInt64(table, "post_id")
	p.Content = field.NewString(table, "content")
	p.LikeNum = field.NewInt(table, "like_num")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *postComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *postComment) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["member_id"] = p.MemberID
	p.fieldMap["member_name"] = p.MemberName
	p.fieldMap["post_id"] = p.PostID
	p.fieldMap["content"] = p.Content
	p.fieldMap["like_num"] = p.LikeNum
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p postComment) clone(db *gorm.DB) postComment {
	p.postCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p postComment) replaceDB(db *gorm.DB) postComment {
	p.postCommentDo.ReplaceDB(db)
	return p
}

type postCommentDo struct{ gen.DO }

type IPostCommentDo interface {
	gen.SubQuery
	Debug() IPostCommentDo
	WithContext(ctx context.Context) IPostCommentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPostCommentDo
	WriteDB() IPostCommentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPostCommentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPostCommentDo
	Not(conds ...gen.Condition) IPostCommentDo
	Or(conds ...gen.Condition) IPostCommentDo
	Select(conds ...field.Expr) IPostCommentDo
	Where(conds ...gen.Condition) IPostCommentDo
	Order(conds ...field.Expr) IPostCommentDo
	Distinct(cols ...field.Expr) IPostCommentDo
	Omit(cols ...field.Expr) IPostCommentDo
	Join(table schema.Tabler, on ...field.Expr) IPostCommentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPostCommentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPostCommentDo
	Group(cols ...field.Expr) IPostCommentDo
	Having(conds ...gen.Condition) IPostCommentDo
	Limit(limit int) IPostCommentDo
	Offset(offset int) IPostCommentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPostCommentDo
	Unscoped() IPostCommentDo
	Create(values ...*model.PostComment) error
	CreateInBatches(values []*model.PostComment, batchSize int) error
	Save(values ...*model.PostComment) error
	First() (*model.PostComment, error)
	Take() (*model.PostComment, error)
	Last() (*model.PostComment, error)
	Find() ([]*model.PostComment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PostComment, err error)
	FindInBatches(result *[]*model.PostComment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PostComment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPostCommentDo
	Assign(attrs ...field.AssignExpr) IPostCommentDo
	Joins(fields ...field.RelationField) IPostCommentDo
	Preload(fields ...field.RelationField) IPostCommentDo
	FirstOrInit() (*model.PostComment, error)
	FirstOrCreate() (*model.PostComment, error)
	FindByPage(offset int, limit int) (result []*model.PostComment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPostCommentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p postCommentDo) Debug() IPostCommentDo {
	return p.withDO(p.DO.Debug())
}

func (p postCommentDo) WithContext(ctx context.Context) IPostCommentDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p postCommentDo) ReadDB() IPostCommentDo {
	return p.Clauses(dbresolver.Read)
}

func (p postCommentDo) WriteDB() IPostCommentDo {
	return p.Clauses(dbresolver.Write)
}

func (p postCommentDo) Session(config *gorm.Session) IPostCommentDo {
	return p.withDO(p.DO.Session(config))
}

func (p postCommentDo) Clauses(conds ...clause.Expression) IPostCommentDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p postCommentDo) Returning(value interface{}, columns ...string) IPostCommentDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p postCommentDo) Not(conds ...gen.Condition) IPostCommentDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p postCommentDo) Or(conds ...gen.Condition) IPostCommentDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p postCommentDo) Select(conds ...field.Expr) IPostCommentDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p postCommentDo) Where(conds ...gen.Condition) IPostCommentDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p postCommentDo) Order(conds ...field.Expr) IPostCommentDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p postCommentDo) Distinct(cols ...field.Expr) IPostCommentDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p postCommentDo) Omit(cols ...field.Expr) IPostCommentDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p postCommentDo) Join(table schema.Tabler, on ...field.Expr) IPostCommentDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p postCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPostCommentDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p postCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) IPostCommentDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p postCommentDo) Group(cols ...field.Expr) IPostCommentDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p postCommentDo) Having(conds ...gen.Condition) IPostCommentDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p postCommentDo) Limit(limit int) IPostCommentDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p postCommentDo) Offset(offset int) IPostCommentDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p postCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPostCommentDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p postCommentDo) Unscoped() IPostCommentDo {
	return p.withDO(p.DO.Unscoped())
}

func (p postCommentDo) Create(values ...*model.PostComment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p postCommentDo) CreateInBatches(values []*model.PostComment, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p postCommentDo) Save(values ...*model.PostComment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p postCommentDo) First() (*model.PostComment, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostComment), nil
	}
}

func (p postCommentDo) Take() (*model.PostComment, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostComment), nil
	}
}

func (p postCommentDo) Last() (*model.PostComment, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostComment), nil
	}
}

func (p postCommentDo) Find() ([]*model.PostComment, error) {
	result, err := p.DO.Find()
	return result.([]*model.PostComment), err
}

func (p postCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PostComment, err error) {
	buf := make([]*model.PostComment, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p postCommentDo) FindInBatches(result *[]*model.PostComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p postCommentDo) Attrs(attrs ...field.AssignExpr) IPostCommentDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p postCommentDo) Assign(attrs ...field.AssignExpr) IPostCommentDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p postCommentDo) Joins(fields ...field.RelationField) IPostCommentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p postCommentDo) Preload(fields ...field.RelationField) IPostCommentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p postCommentDo) FirstOrInit() (*model.PostComment, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostComment), nil
	}
}

func (p postCommentDo) FirstOrCreate() (*model.PostComment, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostComment), nil
	}
}

func (p postCommentDo) FindByPage(offset int, limit int) (result []*model.PostComment, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p postCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p postCommentDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p postCommentDo) Delete(models ...*model.PostComment) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *postCommentDo) withDO(do gen.Dao) *postCommentDo {
	p.DO = *do.(*gen.DO)
	return p
}
