// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newSmsCode(db *gorm.DB, opts ...gen.DOOption) smsCode {
	_smsCode := smsCode{}

	_smsCode.smsCodeDo.UseDB(db, opts...)
	_smsCode.smsCodeDo.UseModel(&model.SmsCode{})

	tableName := _smsCode.smsCodeDo.TableName()
	_smsCode.ALL = field.NewAsterisk(tableName)
	_smsCode.ID = field.NewInt64(tableName, "id")
	_smsCode.Code = field.NewString(tableName, "code")
	_smsCode.Phone = field.NewString(tableName, "phone")
	_smsCode.Status = field.NewInt8(tableName, "status")
	_smsCode.CreatedAt = field.NewInt64(tableName, "created_at")

	_smsCode.fillFieldMap()

	return _smsCode
}

// smsCode 短信验证码表
type smsCode struct {
	smsCodeDo

	ALL       field.Asterisk
	ID        field.Int64
	Code      field.String // 验证码
	Phone     field.String // 手机号码
	Status    field.Int8   // 状态 0：未使用 1：已使用
	CreatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (s smsCode) Table(newTableName string) *smsCode {
	s.smsCodeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsCode) As(alias string) *smsCode {
	s.smsCodeDo.DO = *(s.smsCodeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsCode) updateTableName(table string) *smsCode {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Code = field.NewString(table, "code")
	s.Phone = field.NewString(table, "phone")
	s.Status = field.NewInt8(table, "status")
	s.CreatedAt = field.NewInt64(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *smsCode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsCode) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["code"] = s.Code
	s.fieldMap["phone"] = s.Phone
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
}

func (s smsCode) clone(db *gorm.DB) smsCode {
	s.smsCodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsCode) replaceDB(db *gorm.DB) smsCode {
	s.smsCodeDo.ReplaceDB(db)
	return s
}

type smsCodeDo struct{ gen.DO }

type ISmsCodeDo interface {
	gen.SubQuery
	Debug() ISmsCodeDo
	WithContext(ctx context.Context) ISmsCodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsCodeDo
	WriteDB() ISmsCodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsCodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsCodeDo
	Not(conds ...gen.Condition) ISmsCodeDo
	Or(conds ...gen.Condition) ISmsCodeDo
	Select(conds ...field.Expr) ISmsCodeDo
	Where(conds ...gen.Condition) ISmsCodeDo
	Order(conds ...field.Expr) ISmsCodeDo
	Distinct(cols ...field.Expr) ISmsCodeDo
	Omit(cols ...field.Expr) ISmsCodeDo
	Join(table schema.Tabler, on ...field.Expr) ISmsCodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsCodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsCodeDo
	Group(cols ...field.Expr) ISmsCodeDo
	Having(conds ...gen.Condition) ISmsCodeDo
	Limit(limit int) ISmsCodeDo
	Offset(offset int) ISmsCodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsCodeDo
	Unscoped() ISmsCodeDo
	Create(values ...*model.SmsCode) error
	CreateInBatches(values []*model.SmsCode, batchSize int) error
	Save(values ...*model.SmsCode) error
	First() (*model.SmsCode, error)
	Take() (*model.SmsCode, error)
	Last() (*model.SmsCode, error)
	Find() ([]*model.SmsCode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsCode, err error)
	FindInBatches(result *[]*model.SmsCode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsCode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsCodeDo
	Assign(attrs ...field.AssignExpr) ISmsCodeDo
	Joins(fields ...field.RelationField) ISmsCodeDo
	Preload(fields ...field.RelationField) ISmsCodeDo
	FirstOrInit() (*model.SmsCode, error)
	FirstOrCreate() (*model.SmsCode, error)
	FindByPage(offset int, limit int) (result []*model.SmsCode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsCodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsCodeDo) Debug() ISmsCodeDo {
	return s.withDO(s.DO.Debug())
}

func (s smsCodeDo) WithContext(ctx context.Context) ISmsCodeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsCodeDo) ReadDB() ISmsCodeDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsCodeDo) WriteDB() ISmsCodeDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsCodeDo) Session(config *gorm.Session) ISmsCodeDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsCodeDo) Clauses(conds ...clause.Expression) ISmsCodeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsCodeDo) Returning(value interface{}, columns ...string) ISmsCodeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsCodeDo) Not(conds ...gen.Condition) ISmsCodeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsCodeDo) Or(conds ...gen.Condition) ISmsCodeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsCodeDo) Select(conds ...field.Expr) ISmsCodeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsCodeDo) Where(conds ...gen.Condition) ISmsCodeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsCodeDo) Order(conds ...field.Expr) ISmsCodeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsCodeDo) Distinct(cols ...field.Expr) ISmsCodeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsCodeDo) Omit(cols ...field.Expr) ISmsCodeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsCodeDo) Join(table schema.Tabler, on ...field.Expr) ISmsCodeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsCodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsCodeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsCodeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsCodeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsCodeDo) Group(cols ...field.Expr) ISmsCodeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsCodeDo) Having(conds ...gen.Condition) ISmsCodeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsCodeDo) Limit(limit int) ISmsCodeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsCodeDo) Offset(offset int) ISmsCodeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsCodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsCodeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsCodeDo) Unscoped() ISmsCodeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsCodeDo) Create(values ...*model.SmsCode) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsCodeDo) CreateInBatches(values []*model.SmsCode, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsCodeDo) Save(values ...*model.SmsCode) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsCodeDo) First() (*model.SmsCode, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCode), nil
	}
}

func (s smsCodeDo) Take() (*model.SmsCode, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCode), nil
	}
}

func (s smsCodeDo) Last() (*model.SmsCode, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCode), nil
	}
}

func (s smsCodeDo) Find() ([]*model.SmsCode, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsCode), err
}

func (s smsCodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsCode, err error) {
	buf := make([]*model.SmsCode, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsCodeDo) FindInBatches(result *[]*model.SmsCode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsCodeDo) Attrs(attrs ...field.AssignExpr) ISmsCodeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsCodeDo) Assign(attrs ...field.AssignExpr) ISmsCodeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsCodeDo) Joins(fields ...field.RelationField) ISmsCodeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsCodeDo) Preload(fields ...field.RelationField) ISmsCodeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsCodeDo) FirstOrInit() (*model.SmsCode, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCode), nil
	}
}

func (s smsCodeDo) FirstOrCreate() (*model.SmsCode, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCode), nil
	}
}

func (s smsCodeDo) FindByPage(offset int, limit int) (result []*model.SmsCode, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsCodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsCodeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsCodeDo) Delete(models ...*model.SmsCode) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsCodeDo) withDO(do gen.Dao) *smsCodeDo {
	s.DO = *do.(*gen.DO)
	return s
}
