// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newProductGoodsSkuAttrRelation(db *gorm.DB, opts ...gen.DOOption) productGoodsSkuAttrRelation {
	_productGoodsSkuAttrRelation := productGoodsSkuAttrRelation{}

	_productGoodsSkuAttrRelation.productGoodsSkuAttrRelationDo.UseDB(db, opts...)
	_productGoodsSkuAttrRelation.productGoodsSkuAttrRelationDo.UseModel(&model.ProductGoodsSkuAttrRelation{})

	tableName := _productGoodsSkuAttrRelation.productGoodsSkuAttrRelationDo.TableName()
	_productGoodsSkuAttrRelation.ALL = field.NewAsterisk(tableName)
	_productGoodsSkuAttrRelation.ID = field.NewInt64(tableName, "id")
	_productGoodsSkuAttrRelation.SkuID = field.NewInt64(tableName, "sku_id")
	_productGoodsSkuAttrRelation.AttrID = field.NewInt64(tableName, "attr_id")
	_productGoodsSkuAttrRelation.AttrName = field.NewString(tableName, "attr_name")
	_productGoodsSkuAttrRelation.AttrValue = field.NewString(tableName, "attr_value")
	_productGoodsSkuAttrRelation.CreatedAt = field.NewInt64(tableName, "created_at")

	_productGoodsSkuAttrRelation.fillFieldMap()

	return _productGoodsSkuAttrRelation
}

// productGoodsSkuAttrRelation 商品sku属性关联表
type productGoodsSkuAttrRelation struct {
	productGoodsSkuAttrRelationDo

	ALL       field.Asterisk
	ID        field.Int64
	SkuID     field.Int64  // skuID
	AttrID    field.Int64  // 属性ID
	AttrName  field.String // 商品属性名称 如：颜色
	AttrValue field.String // 商品属性值 如：金色,银色,黄色
	CreatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (p productGoodsSkuAttrRelation) Table(newTableName string) *productGoodsSkuAttrRelation {
	p.productGoodsSkuAttrRelationDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p productGoodsSkuAttrRelation) As(alias string) *productGoodsSkuAttrRelation {
	p.productGoodsSkuAttrRelationDo.DO = *(p.productGoodsSkuAttrRelationDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *productGoodsSkuAttrRelation) updateTableName(table string) *productGoodsSkuAttrRelation {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.SkuID = field.NewInt64(table, "sku_id")
	p.AttrID = field.NewInt64(table, "attr_id")
	p.AttrName = field.NewString(table, "attr_name")
	p.AttrValue = field.NewString(table, "attr_value")
	p.CreatedAt = field.NewInt64(table, "created_at")

	p.fillFieldMap()

	return p
}

func (p *productGoodsSkuAttrRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *productGoodsSkuAttrRelation) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["sku_id"] = p.SkuID
	p.fieldMap["attr_id"] = p.AttrID
	p.fieldMap["attr_name"] = p.AttrName
	p.fieldMap["attr_value"] = p.AttrValue
	p.fieldMap["created_at"] = p.CreatedAt
}

func (p productGoodsSkuAttrRelation) clone(db *gorm.DB) productGoodsSkuAttrRelation {
	p.productGoodsSkuAttrRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p productGoodsSkuAttrRelation) replaceDB(db *gorm.DB) productGoodsSkuAttrRelation {
	p.productGoodsSkuAttrRelationDo.ReplaceDB(db)
	return p
}

type productGoodsSkuAttrRelationDo struct{ gen.DO }

type IProductGoodsSkuAttrRelationDo interface {
	gen.SubQuery
	Debug() IProductGoodsSkuAttrRelationDo
	WithContext(ctx context.Context) IProductGoodsSkuAttrRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProductGoodsSkuAttrRelationDo
	WriteDB() IProductGoodsSkuAttrRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProductGoodsSkuAttrRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProductGoodsSkuAttrRelationDo
	Not(conds ...gen.Condition) IProductGoodsSkuAttrRelationDo
	Or(conds ...gen.Condition) IProductGoodsSkuAttrRelationDo
	Select(conds ...field.Expr) IProductGoodsSkuAttrRelationDo
	Where(conds ...gen.Condition) IProductGoodsSkuAttrRelationDo
	Order(conds ...field.Expr) IProductGoodsSkuAttrRelationDo
	Distinct(cols ...field.Expr) IProductGoodsSkuAttrRelationDo
	Omit(cols ...field.Expr) IProductGoodsSkuAttrRelationDo
	Join(table schema.Tabler, on ...field.Expr) IProductGoodsSkuAttrRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProductGoodsSkuAttrRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProductGoodsSkuAttrRelationDo
	Group(cols ...field.Expr) IProductGoodsSkuAttrRelationDo
	Having(conds ...gen.Condition) IProductGoodsSkuAttrRelationDo
	Limit(limit int) IProductGoodsSkuAttrRelationDo
	Offset(offset int) IProductGoodsSkuAttrRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProductGoodsSkuAttrRelationDo
	Unscoped() IProductGoodsSkuAttrRelationDo
	Create(values ...*model.ProductGoodsSkuAttrRelation) error
	CreateInBatches(values []*model.ProductGoodsSkuAttrRelation, batchSize int) error
	Save(values ...*model.ProductGoodsSkuAttrRelation) error
	First() (*model.ProductGoodsSkuAttrRelation, error)
	Take() (*model.ProductGoodsSkuAttrRelation, error)
	Last() (*model.ProductGoodsSkuAttrRelation, error)
	Find() ([]*model.ProductGoodsSkuAttrRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductGoodsSkuAttrRelation, err error)
	FindInBatches(result *[]*model.ProductGoodsSkuAttrRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProductGoodsSkuAttrRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProductGoodsSkuAttrRelationDo
	Assign(attrs ...field.AssignExpr) IProductGoodsSkuAttrRelationDo
	Joins(fields ...field.RelationField) IProductGoodsSkuAttrRelationDo
	Preload(fields ...field.RelationField) IProductGoodsSkuAttrRelationDo
	FirstOrInit() (*model.ProductGoodsSkuAttrRelation, error)
	FirstOrCreate() (*model.ProductGoodsSkuAttrRelation, error)
	FindByPage(offset int, limit int) (result []*model.ProductGoodsSkuAttrRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProductGoodsSkuAttrRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p productGoodsSkuAttrRelationDo) Debug() IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Debug())
}

func (p productGoodsSkuAttrRelationDo) WithContext(ctx context.Context) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productGoodsSkuAttrRelationDo) ReadDB() IProductGoodsSkuAttrRelationDo {
	return p.Clauses(dbresolver.Read)
}

func (p productGoodsSkuAttrRelationDo) WriteDB() IProductGoodsSkuAttrRelationDo {
	return p.Clauses(dbresolver.Write)
}

func (p productGoodsSkuAttrRelationDo) Session(config *gorm.Session) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Session(config))
}

func (p productGoodsSkuAttrRelationDo) Clauses(conds ...clause.Expression) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productGoodsSkuAttrRelationDo) Returning(value interface{}, columns ...string) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productGoodsSkuAttrRelationDo) Not(conds ...gen.Condition) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productGoodsSkuAttrRelationDo) Or(conds ...gen.Condition) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productGoodsSkuAttrRelationDo) Select(conds ...field.Expr) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productGoodsSkuAttrRelationDo) Where(conds ...gen.Condition) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productGoodsSkuAttrRelationDo) Order(conds ...field.Expr) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productGoodsSkuAttrRelationDo) Distinct(cols ...field.Expr) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productGoodsSkuAttrRelationDo) Omit(cols ...field.Expr) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productGoodsSkuAttrRelationDo) Join(table schema.Tabler, on ...field.Expr) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productGoodsSkuAttrRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productGoodsSkuAttrRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productGoodsSkuAttrRelationDo) Group(cols ...field.Expr) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productGoodsSkuAttrRelationDo) Having(conds ...gen.Condition) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productGoodsSkuAttrRelationDo) Limit(limit int) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productGoodsSkuAttrRelationDo) Offset(offset int) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productGoodsSkuAttrRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productGoodsSkuAttrRelationDo) Unscoped() IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productGoodsSkuAttrRelationDo) Create(values ...*model.ProductGoodsSkuAttrRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productGoodsSkuAttrRelationDo) CreateInBatches(values []*model.ProductGoodsSkuAttrRelation, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productGoodsSkuAttrRelationDo) Save(values ...*model.ProductGoodsSkuAttrRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productGoodsSkuAttrRelationDo) First() (*model.ProductGoodsSkuAttrRelation, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsSkuAttrRelation), nil
	}
}

func (p productGoodsSkuAttrRelationDo) Take() (*model.ProductGoodsSkuAttrRelation, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsSkuAttrRelation), nil
	}
}

func (p productGoodsSkuAttrRelationDo) Last() (*model.ProductGoodsSkuAttrRelation, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsSkuAttrRelation), nil
	}
}

func (p productGoodsSkuAttrRelationDo) Find() ([]*model.ProductGoodsSkuAttrRelation, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProductGoodsSkuAttrRelation), err
}

func (p productGoodsSkuAttrRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductGoodsSkuAttrRelation, err error) {
	buf := make([]*model.ProductGoodsSkuAttrRelation, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productGoodsSkuAttrRelationDo) FindInBatches(result *[]*model.ProductGoodsSkuAttrRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productGoodsSkuAttrRelationDo) Attrs(attrs ...field.AssignExpr) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productGoodsSkuAttrRelationDo) Assign(attrs ...field.AssignExpr) IProductGoodsSkuAttrRelationDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productGoodsSkuAttrRelationDo) Joins(fields ...field.RelationField) IProductGoodsSkuAttrRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productGoodsSkuAttrRelationDo) Preload(fields ...field.RelationField) IProductGoodsSkuAttrRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productGoodsSkuAttrRelationDo) FirstOrInit() (*model.ProductGoodsSkuAttrRelation, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsSkuAttrRelation), nil
	}
}

func (p productGoodsSkuAttrRelationDo) FirstOrCreate() (*model.ProductGoodsSkuAttrRelation, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsSkuAttrRelation), nil
	}
}

func (p productGoodsSkuAttrRelationDo) FindByPage(offset int, limit int) (result []*model.ProductGoodsSkuAttrRelation, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productGoodsSkuAttrRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productGoodsSkuAttrRelationDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productGoodsSkuAttrRelationDo) Delete(models ...*model.ProductGoodsSkuAttrRelation) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productGoodsSkuAttrRelationDo) withDO(do gen.Dao) *productGoodsSkuAttrRelationDo {
	p.DO = *do.(*gen.DO)
	return p
}
