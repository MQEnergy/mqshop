// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newBannerCate(db *gorm.DB, opts ...gen.DOOption) bannerCate {
	_bannerCate := bannerCate{}

	_bannerCate.bannerCateDo.UseDB(db, opts...)
	_bannerCate.bannerCateDo.UseModel(&model.BannerCate{})

	tableName := _bannerCate.bannerCateDo.TableName()
	_bannerCate.ALL = field.NewAsterisk(tableName)
	_bannerCate.ID = field.NewInt64(tableName, "id")
	_bannerCate.Name = field.NewString(tableName, "name")
	_bannerCate.Desc = field.NewString(tableName, "desc")
	_bannerCate.IsHome = field.NewInt8(tableName, "is_home")
	_bannerCate.Status = field.NewInt8(tableName, "status")
	_bannerCate.CreatedAt = field.NewInt64(tableName, "created_at")
	_bannerCate.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_bannerCate.fillFieldMap()

	return _bannerCate
}

type bannerCate struct {
	bannerCateDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String // 名称
	Desc      field.String // 描述
	IsHome    field.Int8   // 是否放首页 1：放 0：不放
	Status    field.Int8   // 状态 1：正常 0：下架
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (b bannerCate) Table(newTableName string) *bannerCate {
	b.bannerCateDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bannerCate) As(alias string) *bannerCate {
	b.bannerCateDo.DO = *(b.bannerCateDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bannerCate) updateTableName(table string) *bannerCate {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.Name = field.NewString(table, "name")
	b.Desc = field.NewString(table, "desc")
	b.IsHome = field.NewInt8(table, "is_home")
	b.Status = field.NewInt8(table, "status")
	b.CreatedAt = field.NewInt64(table, "created_at")
	b.UpdatedAt = field.NewInt64(table, "updated_at")

	b.fillFieldMap()

	return b
}

func (b *bannerCate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bannerCate) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 7)
	b.fieldMap["id"] = b.ID
	b.fieldMap["name"] = b.Name
	b.fieldMap["desc"] = b.Desc
	b.fieldMap["is_home"] = b.IsHome
	b.fieldMap["status"] = b.Status
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
}

func (b bannerCate) clone(db *gorm.DB) bannerCate {
	b.bannerCateDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bannerCate) replaceDB(db *gorm.DB) bannerCate {
	b.bannerCateDo.ReplaceDB(db)
	return b
}

type bannerCateDo struct{ gen.DO }

type IBannerCateDo interface {
	gen.SubQuery
	Debug() IBannerCateDo
	WithContext(ctx context.Context) IBannerCateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBannerCateDo
	WriteDB() IBannerCateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBannerCateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBannerCateDo
	Not(conds ...gen.Condition) IBannerCateDo
	Or(conds ...gen.Condition) IBannerCateDo
	Select(conds ...field.Expr) IBannerCateDo
	Where(conds ...gen.Condition) IBannerCateDo
	Order(conds ...field.Expr) IBannerCateDo
	Distinct(cols ...field.Expr) IBannerCateDo
	Omit(cols ...field.Expr) IBannerCateDo
	Join(table schema.Tabler, on ...field.Expr) IBannerCateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBannerCateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBannerCateDo
	Group(cols ...field.Expr) IBannerCateDo
	Having(conds ...gen.Condition) IBannerCateDo
	Limit(limit int) IBannerCateDo
	Offset(offset int) IBannerCateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBannerCateDo
	Unscoped() IBannerCateDo
	Create(values ...*model.BannerCate) error
	CreateInBatches(values []*model.BannerCate, batchSize int) error
	Save(values ...*model.BannerCate) error
	First() (*model.BannerCate, error)
	Take() (*model.BannerCate, error)
	Last() (*model.BannerCate, error)
	Find() ([]*model.BannerCate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BannerCate, err error)
	FindInBatches(result *[]*model.BannerCate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BannerCate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBannerCateDo
	Assign(attrs ...field.AssignExpr) IBannerCateDo
	Joins(fields ...field.RelationField) IBannerCateDo
	Preload(fields ...field.RelationField) IBannerCateDo
	FirstOrInit() (*model.BannerCate, error)
	FirstOrCreate() (*model.BannerCate, error)
	FindByPage(offset int, limit int) (result []*model.BannerCate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBannerCateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bannerCateDo) Debug() IBannerCateDo {
	return b.withDO(b.DO.Debug())
}

func (b bannerCateDo) WithContext(ctx context.Context) IBannerCateDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bannerCateDo) ReadDB() IBannerCateDo {
	return b.Clauses(dbresolver.Read)
}

func (b bannerCateDo) WriteDB() IBannerCateDo {
	return b.Clauses(dbresolver.Write)
}

func (b bannerCateDo) Session(config *gorm.Session) IBannerCateDo {
	return b.withDO(b.DO.Session(config))
}

func (b bannerCateDo) Clauses(conds ...clause.Expression) IBannerCateDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bannerCateDo) Returning(value interface{}, columns ...string) IBannerCateDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bannerCateDo) Not(conds ...gen.Condition) IBannerCateDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bannerCateDo) Or(conds ...gen.Condition) IBannerCateDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bannerCateDo) Select(conds ...field.Expr) IBannerCateDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bannerCateDo) Where(conds ...gen.Condition) IBannerCateDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bannerCateDo) Order(conds ...field.Expr) IBannerCateDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bannerCateDo) Distinct(cols ...field.Expr) IBannerCateDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bannerCateDo) Omit(cols ...field.Expr) IBannerCateDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bannerCateDo) Join(table schema.Tabler, on ...field.Expr) IBannerCateDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bannerCateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBannerCateDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bannerCateDo) RightJoin(table schema.Tabler, on ...field.Expr) IBannerCateDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bannerCateDo) Group(cols ...field.Expr) IBannerCateDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bannerCateDo) Having(conds ...gen.Condition) IBannerCateDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bannerCateDo) Limit(limit int) IBannerCateDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bannerCateDo) Offset(offset int) IBannerCateDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bannerCateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBannerCateDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bannerCateDo) Unscoped() IBannerCateDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bannerCateDo) Create(values ...*model.BannerCate) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bannerCateDo) CreateInBatches(values []*model.BannerCate, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bannerCateDo) Save(values ...*model.BannerCate) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bannerCateDo) First() (*model.BannerCate, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BannerCate), nil
	}
}

func (b bannerCateDo) Take() (*model.BannerCate, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BannerCate), nil
	}
}

func (b bannerCateDo) Last() (*model.BannerCate, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BannerCate), nil
	}
}

func (b bannerCateDo) Find() ([]*model.BannerCate, error) {
	result, err := b.DO.Find()
	return result.([]*model.BannerCate), err
}

func (b bannerCateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BannerCate, err error) {
	buf := make([]*model.BannerCate, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bannerCateDo) FindInBatches(result *[]*model.BannerCate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bannerCateDo) Attrs(attrs ...field.AssignExpr) IBannerCateDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bannerCateDo) Assign(attrs ...field.AssignExpr) IBannerCateDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bannerCateDo) Joins(fields ...field.RelationField) IBannerCateDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bannerCateDo) Preload(fields ...field.RelationField) IBannerCateDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bannerCateDo) FirstOrInit() (*model.BannerCate, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BannerCate), nil
	}
}

func (b bannerCateDo) FirstOrCreate() (*model.BannerCate, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BannerCate), nil
	}
}

func (b bannerCateDo) FindByPage(offset int, limit int) (result []*model.BannerCate, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bannerCateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bannerCateDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bannerCateDo) Delete(models ...*model.BannerCate) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bannerCateDo) withDO(do gen.Dao) *bannerCateDo {
	b.DO = *do.(*gen.DO)
	return b
}
