// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newCProvinces(db *gorm.DB, opts ...gen.DOOption) cProvinces {
	_cProvinces := cProvinces{}

	_cProvinces.cProvincesDo.UseDB(db, opts...)
	_cProvinces.cProvincesDo.UseModel(&model.CProvinces{})

	tableName := _cProvinces.cProvincesDo.TableName()
	_cProvinces.ALL = field.NewAsterisk(tableName)
	_cProvinces.ID = field.NewInt64(tableName, "id")
	_cProvinces.Code = field.NewString(tableName, "code")
	_cProvinces.Name = field.NewString(tableName, "name")

	_cProvinces.fillFieldMap()

	return _cProvinces
}

type cProvinces struct {
	cProvincesDo

	ALL  field.Asterisk
	ID   field.Int64
	Code field.String
	Name field.String

	fieldMap map[string]field.Expr
}

func (c cProvinces) Table(newTableName string) *cProvinces {
	c.cProvincesDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cProvinces) As(alias string) *cProvinces {
	c.cProvincesDo.DO = *(c.cProvincesDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cProvinces) updateTableName(table string) *cProvinces {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Code = field.NewString(table, "code")
	c.Name = field.NewString(table, "name")

	c.fillFieldMap()

	return c
}

func (c *cProvinces) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cProvinces) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["id"] = c.ID
	c.fieldMap["code"] = c.Code
	c.fieldMap["name"] = c.Name
}

func (c cProvinces) clone(db *gorm.DB) cProvinces {
	c.cProvincesDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cProvinces) replaceDB(db *gorm.DB) cProvinces {
	c.cProvincesDo.ReplaceDB(db)
	return c
}

type cProvincesDo struct{ gen.DO }

type ICProvincesDo interface {
	gen.SubQuery
	Debug() ICProvincesDo
	WithContext(ctx context.Context) ICProvincesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICProvincesDo
	WriteDB() ICProvincesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICProvincesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICProvincesDo
	Not(conds ...gen.Condition) ICProvincesDo
	Or(conds ...gen.Condition) ICProvincesDo
	Select(conds ...field.Expr) ICProvincesDo
	Where(conds ...gen.Condition) ICProvincesDo
	Order(conds ...field.Expr) ICProvincesDo
	Distinct(cols ...field.Expr) ICProvincesDo
	Omit(cols ...field.Expr) ICProvincesDo
	Join(table schema.Tabler, on ...field.Expr) ICProvincesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICProvincesDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICProvincesDo
	Group(cols ...field.Expr) ICProvincesDo
	Having(conds ...gen.Condition) ICProvincesDo
	Limit(limit int) ICProvincesDo
	Offset(offset int) ICProvincesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICProvincesDo
	Unscoped() ICProvincesDo
	Create(values ...*model.CProvinces) error
	CreateInBatches(values []*model.CProvinces, batchSize int) error
	Save(values ...*model.CProvinces) error
	First() (*model.CProvinces, error)
	Take() (*model.CProvinces, error)
	Last() (*model.CProvinces, error)
	Find() ([]*model.CProvinces, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CProvinces, err error)
	FindInBatches(result *[]*model.CProvinces, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CProvinces) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICProvincesDo
	Assign(attrs ...field.AssignExpr) ICProvincesDo
	Joins(fields ...field.RelationField) ICProvincesDo
	Preload(fields ...field.RelationField) ICProvincesDo
	FirstOrInit() (*model.CProvinces, error)
	FirstOrCreate() (*model.CProvinces, error)
	FindByPage(offset int, limit int) (result []*model.CProvinces, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICProvincesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cProvincesDo) Debug() ICProvincesDo {
	return c.withDO(c.DO.Debug())
}

func (c cProvincesDo) WithContext(ctx context.Context) ICProvincesDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cProvincesDo) ReadDB() ICProvincesDo {
	return c.Clauses(dbresolver.Read)
}

func (c cProvincesDo) WriteDB() ICProvincesDo {
	return c.Clauses(dbresolver.Write)
}

func (c cProvincesDo) Session(config *gorm.Session) ICProvincesDo {
	return c.withDO(c.DO.Session(config))
}

func (c cProvincesDo) Clauses(conds ...clause.Expression) ICProvincesDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cProvincesDo) Returning(value interface{}, columns ...string) ICProvincesDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cProvincesDo) Not(conds ...gen.Condition) ICProvincesDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cProvincesDo) Or(conds ...gen.Condition) ICProvincesDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cProvincesDo) Select(conds ...field.Expr) ICProvincesDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cProvincesDo) Where(conds ...gen.Condition) ICProvincesDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cProvincesDo) Order(conds ...field.Expr) ICProvincesDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cProvincesDo) Distinct(cols ...field.Expr) ICProvincesDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cProvincesDo) Omit(cols ...field.Expr) ICProvincesDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cProvincesDo) Join(table schema.Tabler, on ...field.Expr) ICProvincesDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cProvincesDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICProvincesDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cProvincesDo) RightJoin(table schema.Tabler, on ...field.Expr) ICProvincesDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cProvincesDo) Group(cols ...field.Expr) ICProvincesDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cProvincesDo) Having(conds ...gen.Condition) ICProvincesDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cProvincesDo) Limit(limit int) ICProvincesDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cProvincesDo) Offset(offset int) ICProvincesDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cProvincesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICProvincesDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cProvincesDo) Unscoped() ICProvincesDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cProvincesDo) Create(values ...*model.CProvinces) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cProvincesDo) CreateInBatches(values []*model.CProvinces, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cProvincesDo) Save(values ...*model.CProvinces) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cProvincesDo) First() (*model.CProvinces, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CProvinces), nil
	}
}

func (c cProvincesDo) Take() (*model.CProvinces, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CProvinces), nil
	}
}

func (c cProvincesDo) Last() (*model.CProvinces, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CProvinces), nil
	}
}

func (c cProvincesDo) Find() ([]*model.CProvinces, error) {
	result, err := c.DO.Find()
	return result.([]*model.CProvinces), err
}

func (c cProvincesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CProvinces, err error) {
	buf := make([]*model.CProvinces, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cProvincesDo) FindInBatches(result *[]*model.CProvinces, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cProvincesDo) Attrs(attrs ...field.AssignExpr) ICProvincesDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cProvincesDo) Assign(attrs ...field.AssignExpr) ICProvincesDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cProvincesDo) Joins(fields ...field.RelationField) ICProvincesDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cProvincesDo) Preload(fields ...field.RelationField) ICProvincesDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cProvincesDo) FirstOrInit() (*model.CProvinces, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CProvinces), nil
	}
}

func (c cProvincesDo) FirstOrCreate() (*model.CProvinces, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CProvinces), nil
	}
}

func (c cProvincesDo) FindByPage(offset int, limit int) (result []*model.CProvinces, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cProvincesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cProvincesDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cProvincesDo) Delete(models ...*model.CProvinces) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cProvincesDo) withDO(do gen.Dao) *cProvincesDo {
	c.DO = *do.(*gen.DO)
	return c
}
