// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newMemberCart(db *gorm.DB, opts ...gen.DOOption) memberCart {
	_memberCart := memberCart{}

	_memberCart.memberCartDo.UseDB(db, opts...)
	_memberCart.memberCartDo.UseModel(&model.MemberCart{})

	tableName := _memberCart.memberCartDo.TableName()
	_memberCart.ALL = field.NewAsterisk(tableName)
	_memberCart.ID = field.NewInt64(tableName, "id")
	_memberCart.MemberID = field.NewInt64(tableName, "member_id")
	_memberCart.GoodsID = field.NewInt64(tableName, "goods_id")
	_memberCart.GoodsNum = field.NewInt(tableName, "goods_num")
	_memberCart.SkuNo = field.NewString(tableName, "sku_no")
	_memberCart.CreatedAt = field.NewInt64(tableName, "created_at")
	_memberCart.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_memberCart.fillFieldMap()

	return _memberCart
}

// memberCart 用户购物车
type memberCart struct {
	memberCartDo

	ALL       field.Asterisk
	ID        field.Int64
	MemberID  field.Int64  // 用户ID
	GoodsID   field.Int64  // 商品ID
	GoodsNum  field.Int    // 数量
	SkuNo     field.String // 商品sku编码
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (m memberCart) Table(newTableName string) *memberCart {
	m.memberCartDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m memberCart) As(alias string) *memberCart {
	m.memberCartDo.DO = *(m.memberCartDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *memberCart) updateTableName(table string) *memberCart {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.MemberID = field.NewInt64(table, "member_id")
	m.GoodsID = field.NewInt64(table, "goods_id")
	m.GoodsNum = field.NewInt(table, "goods_num")
	m.SkuNo = field.NewString(table, "sku_no")
	m.CreatedAt = field.NewInt64(table, "created_at")
	m.UpdatedAt = field.NewInt64(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *memberCart) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *memberCart) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["member_id"] = m.MemberID
	m.fieldMap["goods_id"] = m.GoodsID
	m.fieldMap["goods_num"] = m.GoodsNum
	m.fieldMap["sku_no"] = m.SkuNo
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m memberCart) clone(db *gorm.DB) memberCart {
	m.memberCartDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m memberCart) replaceDB(db *gorm.DB) memberCart {
	m.memberCartDo.ReplaceDB(db)
	return m
}

type memberCartDo struct{ gen.DO }

type IMemberCartDo interface {
	gen.SubQuery
	Debug() IMemberCartDo
	WithContext(ctx context.Context) IMemberCartDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMemberCartDo
	WriteDB() IMemberCartDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMemberCartDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMemberCartDo
	Not(conds ...gen.Condition) IMemberCartDo
	Or(conds ...gen.Condition) IMemberCartDo
	Select(conds ...field.Expr) IMemberCartDo
	Where(conds ...gen.Condition) IMemberCartDo
	Order(conds ...field.Expr) IMemberCartDo
	Distinct(cols ...field.Expr) IMemberCartDo
	Omit(cols ...field.Expr) IMemberCartDo
	Join(table schema.Tabler, on ...field.Expr) IMemberCartDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMemberCartDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMemberCartDo
	Group(cols ...field.Expr) IMemberCartDo
	Having(conds ...gen.Condition) IMemberCartDo
	Limit(limit int) IMemberCartDo
	Offset(offset int) IMemberCartDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberCartDo
	Unscoped() IMemberCartDo
	Create(values ...*model.MemberCart) error
	CreateInBatches(values []*model.MemberCart, batchSize int) error
	Save(values ...*model.MemberCart) error
	First() (*model.MemberCart, error)
	Take() (*model.MemberCart, error)
	Last() (*model.MemberCart, error)
	Find() ([]*model.MemberCart, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemberCart, err error)
	FindInBatches(result *[]*model.MemberCart, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MemberCart) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMemberCartDo
	Assign(attrs ...field.AssignExpr) IMemberCartDo
	Joins(fields ...field.RelationField) IMemberCartDo
	Preload(fields ...field.RelationField) IMemberCartDo
	FirstOrInit() (*model.MemberCart, error)
	FirstOrCreate() (*model.MemberCart, error)
	FindByPage(offset int, limit int) (result []*model.MemberCart, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMemberCartDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m memberCartDo) Debug() IMemberCartDo {
	return m.withDO(m.DO.Debug())
}

func (m memberCartDo) WithContext(ctx context.Context) IMemberCartDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m memberCartDo) ReadDB() IMemberCartDo {
	return m.Clauses(dbresolver.Read)
}

func (m memberCartDo) WriteDB() IMemberCartDo {
	return m.Clauses(dbresolver.Write)
}

func (m memberCartDo) Session(config *gorm.Session) IMemberCartDo {
	return m.withDO(m.DO.Session(config))
}

func (m memberCartDo) Clauses(conds ...clause.Expression) IMemberCartDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m memberCartDo) Returning(value interface{}, columns ...string) IMemberCartDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m memberCartDo) Not(conds ...gen.Condition) IMemberCartDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m memberCartDo) Or(conds ...gen.Condition) IMemberCartDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m memberCartDo) Select(conds ...field.Expr) IMemberCartDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m memberCartDo) Where(conds ...gen.Condition) IMemberCartDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m memberCartDo) Order(conds ...field.Expr) IMemberCartDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m memberCartDo) Distinct(cols ...field.Expr) IMemberCartDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m memberCartDo) Omit(cols ...field.Expr) IMemberCartDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m memberCartDo) Join(table schema.Tabler, on ...field.Expr) IMemberCartDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m memberCartDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMemberCartDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m memberCartDo) RightJoin(table schema.Tabler, on ...field.Expr) IMemberCartDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m memberCartDo) Group(cols ...field.Expr) IMemberCartDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m memberCartDo) Having(conds ...gen.Condition) IMemberCartDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m memberCartDo) Limit(limit int) IMemberCartDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m memberCartDo) Offset(offset int) IMemberCartDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m memberCartDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberCartDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m memberCartDo) Unscoped() IMemberCartDo {
	return m.withDO(m.DO.Unscoped())
}

func (m memberCartDo) Create(values ...*model.MemberCart) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m memberCartDo) CreateInBatches(values []*model.MemberCart, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m memberCartDo) Save(values ...*model.MemberCart) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m memberCartDo) First() (*model.MemberCart, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberCart), nil
	}
}

func (m memberCartDo) Take() (*model.MemberCart, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberCart), nil
	}
}

func (m memberCartDo) Last() (*model.MemberCart, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberCart), nil
	}
}

func (m memberCartDo) Find() ([]*model.MemberCart, error) {
	result, err := m.DO.Find()
	return result.([]*model.MemberCart), err
}

func (m memberCartDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemberCart, err error) {
	buf := make([]*model.MemberCart, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m memberCartDo) FindInBatches(result *[]*model.MemberCart, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m memberCartDo) Attrs(attrs ...field.AssignExpr) IMemberCartDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m memberCartDo) Assign(attrs ...field.AssignExpr) IMemberCartDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m memberCartDo) Joins(fields ...field.RelationField) IMemberCartDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m memberCartDo) Preload(fields ...field.RelationField) IMemberCartDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m memberCartDo) FirstOrInit() (*model.MemberCart, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberCart), nil
	}
}

func (m memberCartDo) FirstOrCreate() (*model.MemberCart, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberCart), nil
	}
}

func (m memberCartDo) FindByPage(offset int, limit int) (result []*model.MemberCart, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m memberCartDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m memberCartDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m memberCartDo) Delete(models ...*model.MemberCart) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *memberCartDo) withDO(do gen.Dao) *memberCartDo {
	m.DO = *do.(*gen.DO)
	return m
}
