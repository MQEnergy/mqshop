// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newCCasbinRule(db *gorm.DB, opts ...gen.DOOption) cCasbinRule {
	_cCasbinRule := cCasbinRule{}

	_cCasbinRule.cCasbinRuleDo.UseDB(db, opts...)
	_cCasbinRule.cCasbinRuleDo.UseModel(&model.CCasbinRule{})

	tableName := _cCasbinRule.cCasbinRuleDo.TableName()
	_cCasbinRule.ALL = field.NewAsterisk(tableName)
	_cCasbinRule.ID = field.NewInt64(tableName, "id")
	_cCasbinRule.Ptype = field.NewString(tableName, "ptype")
	_cCasbinRule.V0 = field.NewString(tableName, "v0")
	_cCasbinRule.V1 = field.NewString(tableName, "v1")
	_cCasbinRule.V2 = field.NewString(tableName, "v2")
	_cCasbinRule.V3 = field.NewString(tableName, "v3")
	_cCasbinRule.V4 = field.NewString(tableName, "v4")
	_cCasbinRule.V5 = field.NewString(tableName, "v5")

	_cCasbinRule.fillFieldMap()

	return _cCasbinRule
}

type cCasbinRule struct {
	cCasbinRuleDo

	ALL   field.Asterisk
	ID    field.Int64
	Ptype field.String
	V0    field.String
	V1    field.String
	V2    field.String
	V3    field.String
	V4    field.String
	V5    field.String

	fieldMap map[string]field.Expr
}

func (c cCasbinRule) Table(newTableName string) *cCasbinRule {
	c.cCasbinRuleDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cCasbinRule) As(alias string) *cCasbinRule {
	c.cCasbinRuleDo.DO = *(c.cCasbinRuleDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cCasbinRule) updateTableName(table string) *cCasbinRule {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Ptype = field.NewString(table, "ptype")
	c.V0 = field.NewString(table, "v0")
	c.V1 = field.NewString(table, "v1")
	c.V2 = field.NewString(table, "v2")
	c.V3 = field.NewString(table, "v3")
	c.V4 = field.NewString(table, "v4")
	c.V5 = field.NewString(table, "v5")

	c.fillFieldMap()

	return c
}

func (c *cCasbinRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cCasbinRule) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["ptype"] = c.Ptype
	c.fieldMap["v0"] = c.V0
	c.fieldMap["v1"] = c.V1
	c.fieldMap["v2"] = c.V2
	c.fieldMap["v3"] = c.V3
	c.fieldMap["v4"] = c.V4
	c.fieldMap["v5"] = c.V5
}

func (c cCasbinRule) clone(db *gorm.DB) cCasbinRule {
	c.cCasbinRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cCasbinRule) replaceDB(db *gorm.DB) cCasbinRule {
	c.cCasbinRuleDo.ReplaceDB(db)
	return c
}

type cCasbinRuleDo struct{ gen.DO }

type ICCasbinRuleDo interface {
	gen.SubQuery
	Debug() ICCasbinRuleDo
	WithContext(ctx context.Context) ICCasbinRuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICCasbinRuleDo
	WriteDB() ICCasbinRuleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICCasbinRuleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICCasbinRuleDo
	Not(conds ...gen.Condition) ICCasbinRuleDo
	Or(conds ...gen.Condition) ICCasbinRuleDo
	Select(conds ...field.Expr) ICCasbinRuleDo
	Where(conds ...gen.Condition) ICCasbinRuleDo
	Order(conds ...field.Expr) ICCasbinRuleDo
	Distinct(cols ...field.Expr) ICCasbinRuleDo
	Omit(cols ...field.Expr) ICCasbinRuleDo
	Join(table schema.Tabler, on ...field.Expr) ICCasbinRuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICCasbinRuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICCasbinRuleDo
	Group(cols ...field.Expr) ICCasbinRuleDo
	Having(conds ...gen.Condition) ICCasbinRuleDo
	Limit(limit int) ICCasbinRuleDo
	Offset(offset int) ICCasbinRuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICCasbinRuleDo
	Unscoped() ICCasbinRuleDo
	Create(values ...*model.CCasbinRule) error
	CreateInBatches(values []*model.CCasbinRule, batchSize int) error
	Save(values ...*model.CCasbinRule) error
	First() (*model.CCasbinRule, error)
	Take() (*model.CCasbinRule, error)
	Last() (*model.CCasbinRule, error)
	Find() ([]*model.CCasbinRule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CCasbinRule, err error)
	FindInBatches(result *[]*model.CCasbinRule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CCasbinRule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICCasbinRuleDo
	Assign(attrs ...field.AssignExpr) ICCasbinRuleDo
	Joins(fields ...field.RelationField) ICCasbinRuleDo
	Preload(fields ...field.RelationField) ICCasbinRuleDo
	FirstOrInit() (*model.CCasbinRule, error)
	FirstOrCreate() (*model.CCasbinRule, error)
	FindByPage(offset int, limit int) (result []*model.CCasbinRule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICCasbinRuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cCasbinRuleDo) Debug() ICCasbinRuleDo {
	return c.withDO(c.DO.Debug())
}

func (c cCasbinRuleDo) WithContext(ctx context.Context) ICCasbinRuleDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cCasbinRuleDo) ReadDB() ICCasbinRuleDo {
	return c.Clauses(dbresolver.Read)
}

func (c cCasbinRuleDo) WriteDB() ICCasbinRuleDo {
	return c.Clauses(dbresolver.Write)
}

func (c cCasbinRuleDo) Session(config *gorm.Session) ICCasbinRuleDo {
	return c.withDO(c.DO.Session(config))
}

func (c cCasbinRuleDo) Clauses(conds ...clause.Expression) ICCasbinRuleDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cCasbinRuleDo) Returning(value interface{}, columns ...string) ICCasbinRuleDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cCasbinRuleDo) Not(conds ...gen.Condition) ICCasbinRuleDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cCasbinRuleDo) Or(conds ...gen.Condition) ICCasbinRuleDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cCasbinRuleDo) Select(conds ...field.Expr) ICCasbinRuleDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cCasbinRuleDo) Where(conds ...gen.Condition) ICCasbinRuleDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cCasbinRuleDo) Order(conds ...field.Expr) ICCasbinRuleDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cCasbinRuleDo) Distinct(cols ...field.Expr) ICCasbinRuleDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cCasbinRuleDo) Omit(cols ...field.Expr) ICCasbinRuleDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cCasbinRuleDo) Join(table schema.Tabler, on ...field.Expr) ICCasbinRuleDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cCasbinRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICCasbinRuleDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cCasbinRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) ICCasbinRuleDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cCasbinRuleDo) Group(cols ...field.Expr) ICCasbinRuleDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cCasbinRuleDo) Having(conds ...gen.Condition) ICCasbinRuleDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cCasbinRuleDo) Limit(limit int) ICCasbinRuleDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cCasbinRuleDo) Offset(offset int) ICCasbinRuleDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cCasbinRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICCasbinRuleDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cCasbinRuleDo) Unscoped() ICCasbinRuleDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cCasbinRuleDo) Create(values ...*model.CCasbinRule) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cCasbinRuleDo) CreateInBatches(values []*model.CCasbinRule, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cCasbinRuleDo) Save(values ...*model.CCasbinRule) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cCasbinRuleDo) First() (*model.CCasbinRule, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CCasbinRule), nil
	}
}

func (c cCasbinRuleDo) Take() (*model.CCasbinRule, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CCasbinRule), nil
	}
}

func (c cCasbinRuleDo) Last() (*model.CCasbinRule, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CCasbinRule), nil
	}
}

func (c cCasbinRuleDo) Find() ([]*model.CCasbinRule, error) {
	result, err := c.DO.Find()
	return result.([]*model.CCasbinRule), err
}

func (c cCasbinRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CCasbinRule, err error) {
	buf := make([]*model.CCasbinRule, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cCasbinRuleDo) FindInBatches(result *[]*model.CCasbinRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cCasbinRuleDo) Attrs(attrs ...field.AssignExpr) ICCasbinRuleDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cCasbinRuleDo) Assign(attrs ...field.AssignExpr) ICCasbinRuleDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cCasbinRuleDo) Joins(fields ...field.RelationField) ICCasbinRuleDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cCasbinRuleDo) Preload(fields ...field.RelationField) ICCasbinRuleDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cCasbinRuleDo) FirstOrInit() (*model.CCasbinRule, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CCasbinRule), nil
	}
}

func (c cCasbinRuleDo) FirstOrCreate() (*model.CCasbinRule, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CCasbinRule), nil
	}
}

func (c cCasbinRuleDo) FindByPage(offset int, limit int) (result []*model.CCasbinRule, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cCasbinRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cCasbinRuleDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cCasbinRuleDo) Delete(models ...*model.CCasbinRule) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cCasbinRuleDo) withDO(do gen.Dao) *cCasbinRuleDo {
	c.DO = *do.(*gen.DO)
	return c
}
