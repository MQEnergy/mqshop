// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                           = new(Query)
	Banner                      *banner
	BannerCate                  *bannerCate
	CAdmin                      *cAdmin
	CAreas                      *cAreas
	CAttachment                 *cAttachment
	CCasbinRule                 *cCasbinRule
	CCities                     *cCities
	CProvinces                  *cProvinces
	CResource                   *cResource
	CRole                       *cRole
	CRoleAuth                   *cRoleAuth
	CStreets                    *cStreets
	CVillages                   *cVillages
	CommentLike                 *commentLike
	CommentReply                *commentReply
	Member                      *member
	MemberAddress               *memberAddress
	MemberCart                  *memberCart
	MemberFollowRelation        *memberFollowRelation
	MemberGoodsFavorite         *memberGoodsFavorite
	MemberInfo                  *memberInfo
	MemberPost                  *memberPost
	MemberPostTagRelation       *memberPostTagRelation
	MemberThirdAuth             *memberThirdAuth
	Order                       *order
	OrderGoods                  *orderGoods
	OrderPayLog                 *orderPayLog
	PostComment                 *postComment
	PostLike                    *postLike
	ProductBrand                *productBrand
	ProductCategory             *productCategory
	ProductComment              *productComment
	ProductGoods                *productGoods
	ProductGoodsAttr            *productGoodsAttr
	ProductGoodsAttrCate        *productGoodsAttrCate
	ProductGoodsAttrRelation    *productGoodsAttrRelation
	ProductGoodsInfo            *productGoodsInfo
	ProductGoodsSku             *productGoodsSku
	ProductGoodsSkuAttrRelation *productGoodsSkuAttrRelation
	ProductGoodsTagRelation     *productGoodsTagRelation
	SmsCode                     *smsCode
	Suggestion                  *suggestion
	Tag                         *tag
	TbOriginGoods               *tbOriginGoods
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Banner = &Q.Banner
	BannerCate = &Q.BannerCate
	CAdmin = &Q.CAdmin
	CAreas = &Q.CAreas
	CAttachment = &Q.CAttachment
	CCasbinRule = &Q.CCasbinRule
	CCities = &Q.CCities
	CProvinces = &Q.CProvinces
	CResource = &Q.CResource
	CRole = &Q.CRole
	CRoleAuth = &Q.CRoleAuth
	CStreets = &Q.CStreets
	CVillages = &Q.CVillages
	CommentLike = &Q.CommentLike
	CommentReply = &Q.CommentReply
	Member = &Q.Member
	MemberAddress = &Q.MemberAddress
	MemberCart = &Q.MemberCart
	MemberFollowRelation = &Q.MemberFollowRelation
	MemberGoodsFavorite = &Q.MemberGoodsFavorite
	MemberInfo = &Q.MemberInfo
	MemberPost = &Q.MemberPost
	MemberPostTagRelation = &Q.MemberPostTagRelation
	MemberThirdAuth = &Q.MemberThirdAuth
	Order = &Q.Order
	OrderGoods = &Q.OrderGoods
	OrderPayLog = &Q.OrderPayLog
	PostComment = &Q.PostComment
	PostLike = &Q.PostLike
	ProductBrand = &Q.ProductBrand
	ProductCategory = &Q.ProductCategory
	ProductComment = &Q.ProductComment
	ProductGoods = &Q.ProductGoods
	ProductGoodsAttr = &Q.ProductGoodsAttr
	ProductGoodsAttrCate = &Q.ProductGoodsAttrCate
	ProductGoodsAttrRelation = &Q.ProductGoodsAttrRelation
	ProductGoodsInfo = &Q.ProductGoodsInfo
	ProductGoodsSku = &Q.ProductGoodsSku
	ProductGoodsSkuAttrRelation = &Q.ProductGoodsSkuAttrRelation
	ProductGoodsTagRelation = &Q.ProductGoodsTagRelation
	SmsCode = &Q.SmsCode
	Suggestion = &Q.Suggestion
	Tag = &Q.Tag
	TbOriginGoods = &Q.TbOriginGoods
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                          db,
		Banner:                      newBanner(db, opts...),
		BannerCate:                  newBannerCate(db, opts...),
		CAdmin:                      newCAdmin(db, opts...),
		CAreas:                      newCAreas(db, opts...),
		CAttachment:                 newCAttachment(db, opts...),
		CCasbinRule:                 newCCasbinRule(db, opts...),
		CCities:                     newCCities(db, opts...),
		CProvinces:                  newCProvinces(db, opts...),
		CResource:                   newCResource(db, opts...),
		CRole:                       newCRole(db, opts...),
		CRoleAuth:                   newCRoleAuth(db, opts...),
		CStreets:                    newCStreets(db, opts...),
		CVillages:                   newCVillages(db, opts...),
		CommentLike:                 newCommentLike(db, opts...),
		CommentReply:                newCommentReply(db, opts...),
		Member:                      newMember(db, opts...),
		MemberAddress:               newMemberAddress(db, opts...),
		MemberCart:                  newMemberCart(db, opts...),
		MemberFollowRelation:        newMemberFollowRelation(db, opts...),
		MemberGoodsFavorite:         newMemberGoodsFavorite(db, opts...),
		MemberInfo:                  newMemberInfo(db, opts...),
		MemberPost:                  newMemberPost(db, opts...),
		MemberPostTagRelation:       newMemberPostTagRelation(db, opts...),
		MemberThirdAuth:             newMemberThirdAuth(db, opts...),
		Order:                       newOrder(db, opts...),
		OrderGoods:                  newOrderGoods(db, opts...),
		OrderPayLog:                 newOrderPayLog(db, opts...),
		PostComment:                 newPostComment(db, opts...),
		PostLike:                    newPostLike(db, opts...),
		ProductBrand:                newProductBrand(db, opts...),
		ProductCategory:             newProductCategory(db, opts...),
		ProductComment:              newProductComment(db, opts...),
		ProductGoods:                newProductGoods(db, opts...),
		ProductGoodsAttr:            newProductGoodsAttr(db, opts...),
		ProductGoodsAttrCate:        newProductGoodsAttrCate(db, opts...),
		ProductGoodsAttrRelation:    newProductGoodsAttrRelation(db, opts...),
		ProductGoodsInfo:            newProductGoodsInfo(db, opts...),
		ProductGoodsSku:             newProductGoodsSku(db, opts...),
		ProductGoodsSkuAttrRelation: newProductGoodsSkuAttrRelation(db, opts...),
		ProductGoodsTagRelation:     newProductGoodsTagRelation(db, opts...),
		SmsCode:                     newSmsCode(db, opts...),
		Suggestion:                  newSuggestion(db, opts...),
		Tag:                         newTag(db, opts...),
		TbOriginGoods:               newTbOriginGoods(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Banner                      banner
	BannerCate                  bannerCate
	CAdmin                      cAdmin
	CAreas                      cAreas
	CAttachment                 cAttachment
	CCasbinRule                 cCasbinRule
	CCities                     cCities
	CProvinces                  cProvinces
	CResource                   cResource
	CRole                       cRole
	CRoleAuth                   cRoleAuth
	CStreets                    cStreets
	CVillages                   cVillages
	CommentLike                 commentLike
	CommentReply                commentReply
	Member                      member
	MemberAddress               memberAddress
	MemberCart                  memberCart
	MemberFollowRelation        memberFollowRelation
	MemberGoodsFavorite         memberGoodsFavorite
	MemberInfo                  memberInfo
	MemberPost                  memberPost
	MemberPostTagRelation       memberPostTagRelation
	MemberThirdAuth             memberThirdAuth
	Order                       order
	OrderGoods                  orderGoods
	OrderPayLog                 orderPayLog
	PostComment                 postComment
	PostLike                    postLike
	ProductBrand                productBrand
	ProductCategory             productCategory
	ProductComment              productComment
	ProductGoods                productGoods
	ProductGoodsAttr            productGoodsAttr
	ProductGoodsAttrCate        productGoodsAttrCate
	ProductGoodsAttrRelation    productGoodsAttrRelation
	ProductGoodsInfo            productGoodsInfo
	ProductGoodsSku             productGoodsSku
	ProductGoodsSkuAttrRelation productGoodsSkuAttrRelation
	ProductGoodsTagRelation     productGoodsTagRelation
	SmsCode                     smsCode
	Suggestion                  suggestion
	Tag                         tag
	TbOriginGoods               tbOriginGoods
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                          db,
		Banner:                      q.Banner.clone(db),
		BannerCate:                  q.BannerCate.clone(db),
		CAdmin:                      q.CAdmin.clone(db),
		CAreas:                      q.CAreas.clone(db),
		CAttachment:                 q.CAttachment.clone(db),
		CCasbinRule:                 q.CCasbinRule.clone(db),
		CCities:                     q.CCities.clone(db),
		CProvinces:                  q.CProvinces.clone(db),
		CResource:                   q.CResource.clone(db),
		CRole:                       q.CRole.clone(db),
		CRoleAuth:                   q.CRoleAuth.clone(db),
		CStreets:                    q.CStreets.clone(db),
		CVillages:                   q.CVillages.clone(db),
		CommentLike:                 q.CommentLike.clone(db),
		CommentReply:                q.CommentReply.clone(db),
		Member:                      q.Member.clone(db),
		MemberAddress:               q.MemberAddress.clone(db),
		MemberCart:                  q.MemberCart.clone(db),
		MemberFollowRelation:        q.MemberFollowRelation.clone(db),
		MemberGoodsFavorite:         q.MemberGoodsFavorite.clone(db),
		MemberInfo:                  q.MemberInfo.clone(db),
		MemberPost:                  q.MemberPost.clone(db),
		MemberPostTagRelation:       q.MemberPostTagRelation.clone(db),
		MemberThirdAuth:             q.MemberThirdAuth.clone(db),
		Order:                       q.Order.clone(db),
		OrderGoods:                  q.OrderGoods.clone(db),
		OrderPayLog:                 q.OrderPayLog.clone(db),
		PostComment:                 q.PostComment.clone(db),
		PostLike:                    q.PostLike.clone(db),
		ProductBrand:                q.ProductBrand.clone(db),
		ProductCategory:             q.ProductCategory.clone(db),
		ProductComment:              q.ProductComment.clone(db),
		ProductGoods:                q.ProductGoods.clone(db),
		ProductGoodsAttr:            q.ProductGoodsAttr.clone(db),
		ProductGoodsAttrCate:        q.ProductGoodsAttrCate.clone(db),
		ProductGoodsAttrRelation:    q.ProductGoodsAttrRelation.clone(db),
		ProductGoodsInfo:            q.ProductGoodsInfo.clone(db),
		ProductGoodsSku:             q.ProductGoodsSku.clone(db),
		ProductGoodsSkuAttrRelation: q.ProductGoodsSkuAttrRelation.clone(db),
		ProductGoodsTagRelation:     q.ProductGoodsTagRelation.clone(db),
		SmsCode:                     q.SmsCode.clone(db),
		Suggestion:                  q.Suggestion.clone(db),
		Tag:                         q.Tag.clone(db),
		TbOriginGoods:               q.TbOriginGoods.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                          db,
		Banner:                      q.Banner.replaceDB(db),
		BannerCate:                  q.BannerCate.replaceDB(db),
		CAdmin:                      q.CAdmin.replaceDB(db),
		CAreas:                      q.CAreas.replaceDB(db),
		CAttachment:                 q.CAttachment.replaceDB(db),
		CCasbinRule:                 q.CCasbinRule.replaceDB(db),
		CCities:                     q.CCities.replaceDB(db),
		CProvinces:                  q.CProvinces.replaceDB(db),
		CResource:                   q.CResource.replaceDB(db),
		CRole:                       q.CRole.replaceDB(db),
		CRoleAuth:                   q.CRoleAuth.replaceDB(db),
		CStreets:                    q.CStreets.replaceDB(db),
		CVillages:                   q.CVillages.replaceDB(db),
		CommentLike:                 q.CommentLike.replaceDB(db),
		CommentReply:                q.CommentReply.replaceDB(db),
		Member:                      q.Member.replaceDB(db),
		MemberAddress:               q.MemberAddress.replaceDB(db),
		MemberCart:                  q.MemberCart.replaceDB(db),
		MemberFollowRelation:        q.MemberFollowRelation.replaceDB(db),
		MemberGoodsFavorite:         q.MemberGoodsFavorite.replaceDB(db),
		MemberInfo:                  q.MemberInfo.replaceDB(db),
		MemberPost:                  q.MemberPost.replaceDB(db),
		MemberPostTagRelation:       q.MemberPostTagRelation.replaceDB(db),
		MemberThirdAuth:             q.MemberThirdAuth.replaceDB(db),
		Order:                       q.Order.replaceDB(db),
		OrderGoods:                  q.OrderGoods.replaceDB(db),
		OrderPayLog:                 q.OrderPayLog.replaceDB(db),
		PostComment:                 q.PostComment.replaceDB(db),
		PostLike:                    q.PostLike.replaceDB(db),
		ProductBrand:                q.ProductBrand.replaceDB(db),
		ProductCategory:             q.ProductCategory.replaceDB(db),
		ProductComment:              q.ProductComment.replaceDB(db),
		ProductGoods:                q.ProductGoods.replaceDB(db),
		ProductGoodsAttr:            q.ProductGoodsAttr.replaceDB(db),
		ProductGoodsAttrCate:        q.ProductGoodsAttrCate.replaceDB(db),
		ProductGoodsAttrRelation:    q.ProductGoodsAttrRelation.replaceDB(db),
		ProductGoodsInfo:            q.ProductGoodsInfo.replaceDB(db),
		ProductGoodsSku:             q.ProductGoodsSku.replaceDB(db),
		ProductGoodsSkuAttrRelation: q.ProductGoodsSkuAttrRelation.replaceDB(db),
		ProductGoodsTagRelation:     q.ProductGoodsTagRelation.replaceDB(db),
		SmsCode:                     q.SmsCode.replaceDB(db),
		Suggestion:                  q.Suggestion.replaceDB(db),
		Tag:                         q.Tag.replaceDB(db),
		TbOriginGoods:               q.TbOriginGoods.replaceDB(db),
	}
}

type queryCtx struct {
	Banner                      IBannerDo
	BannerCate                  IBannerCateDo
	CAdmin                      ICAdminDo
	CAreas                      ICAreasDo
	CAttachment                 ICAttachmentDo
	CCasbinRule                 ICCasbinRuleDo
	CCities                     ICCitiesDo
	CProvinces                  ICProvincesDo
	CResource                   ICResourceDo
	CRole                       ICRoleDo
	CRoleAuth                   ICRoleAuthDo
	CStreets                    ICStreetsDo
	CVillages                   ICVillagesDo
	CommentLike                 ICommentLikeDo
	CommentReply                ICommentReplyDo
	Member                      IMemberDo
	MemberAddress               IMemberAddressDo
	MemberCart                  IMemberCartDo
	MemberFollowRelation        IMemberFollowRelationDo
	MemberGoodsFavorite         IMemberGoodsFavoriteDo
	MemberInfo                  IMemberInfoDo
	MemberPost                  IMemberPostDo
	MemberPostTagRelation       IMemberPostTagRelationDo
	MemberThirdAuth             IMemberThirdAuthDo
	Order                       IOrderDo
	OrderGoods                  IOrderGoodsDo
	OrderPayLog                 IOrderPayLogDo
	PostComment                 IPostCommentDo
	PostLike                    IPostLikeDo
	ProductBrand                IProductBrandDo
	ProductCategory             IProductCategoryDo
	ProductComment              IProductCommentDo
	ProductGoods                IProductGoodsDo
	ProductGoodsAttr            IProductGoodsAttrDo
	ProductGoodsAttrCate        IProductGoodsAttrCateDo
	ProductGoodsAttrRelation    IProductGoodsAttrRelationDo
	ProductGoodsInfo            IProductGoodsInfoDo
	ProductGoodsSku             IProductGoodsSkuDo
	ProductGoodsSkuAttrRelation IProductGoodsSkuAttrRelationDo
	ProductGoodsTagRelation     IProductGoodsTagRelationDo
	SmsCode                     ISmsCodeDo
	Suggestion                  ISuggestionDo
	Tag                         ITagDo
	TbOriginGoods               ITbOriginGoodsDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Banner:                      q.Banner.WithContext(ctx),
		BannerCate:                  q.BannerCate.WithContext(ctx),
		CAdmin:                      q.CAdmin.WithContext(ctx),
		CAreas:                      q.CAreas.WithContext(ctx),
		CAttachment:                 q.CAttachment.WithContext(ctx),
		CCasbinRule:                 q.CCasbinRule.WithContext(ctx),
		CCities:                     q.CCities.WithContext(ctx),
		CProvinces:                  q.CProvinces.WithContext(ctx),
		CResource:                   q.CResource.WithContext(ctx),
		CRole:                       q.CRole.WithContext(ctx),
		CRoleAuth:                   q.CRoleAuth.WithContext(ctx),
		CStreets:                    q.CStreets.WithContext(ctx),
		CVillages:                   q.CVillages.WithContext(ctx),
		CommentLike:                 q.CommentLike.WithContext(ctx),
		CommentReply:                q.CommentReply.WithContext(ctx),
		Member:                      q.Member.WithContext(ctx),
		MemberAddress:               q.MemberAddress.WithContext(ctx),
		MemberCart:                  q.MemberCart.WithContext(ctx),
		MemberFollowRelation:        q.MemberFollowRelation.WithContext(ctx),
		MemberGoodsFavorite:         q.MemberGoodsFavorite.WithContext(ctx),
		MemberInfo:                  q.MemberInfo.WithContext(ctx),
		MemberPost:                  q.MemberPost.WithContext(ctx),
		MemberPostTagRelation:       q.MemberPostTagRelation.WithContext(ctx),
		MemberThirdAuth:             q.MemberThirdAuth.WithContext(ctx),
		Order:                       q.Order.WithContext(ctx),
		OrderGoods:                  q.OrderGoods.WithContext(ctx),
		OrderPayLog:                 q.OrderPayLog.WithContext(ctx),
		PostComment:                 q.PostComment.WithContext(ctx),
		PostLike:                    q.PostLike.WithContext(ctx),
		ProductBrand:                q.ProductBrand.WithContext(ctx),
		ProductCategory:             q.ProductCategory.WithContext(ctx),
		ProductComment:              q.ProductComment.WithContext(ctx),
		ProductGoods:                q.ProductGoods.WithContext(ctx),
		ProductGoodsAttr:            q.ProductGoodsAttr.WithContext(ctx),
		ProductGoodsAttrCate:        q.ProductGoodsAttrCate.WithContext(ctx),
		ProductGoodsAttrRelation:    q.ProductGoodsAttrRelation.WithContext(ctx),
		ProductGoodsInfo:            q.ProductGoodsInfo.WithContext(ctx),
		ProductGoodsSku:             q.ProductGoodsSku.WithContext(ctx),
		ProductGoodsSkuAttrRelation: q.ProductGoodsSkuAttrRelation.WithContext(ctx),
		ProductGoodsTagRelation:     q.ProductGoodsTagRelation.WithContext(ctx),
		SmsCode:                     q.SmsCode.WithContext(ctx),
		Suggestion:                  q.Suggestion.WithContext(ctx),
		Tag:                         q.Tag.WithContext(ctx),
		TbOriginGoods:               q.TbOriginGoods.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
