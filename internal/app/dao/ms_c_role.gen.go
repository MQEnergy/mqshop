// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newCRole(db *gorm.DB, opts ...gen.DOOption) cRole {
	_cRole := cRole{}

	_cRole.cRoleDo.UseDB(db, opts...)
	_cRole.cRoleDo.UseModel(&model.CRole{})

	tableName := _cRole.cRoleDo.TableName()
	_cRole.ALL = field.NewAsterisk(tableName)
	_cRole.ID = field.NewInt(tableName, "id")
	_cRole.Name = field.NewString(tableName, "name")
	_cRole.Desc = field.NewString(tableName, "desc")
	_cRole.Status = field.NewInt8(tableName, "status")
	_cRole.CreatedAt = field.NewInt(tableName, "created_at")
	_cRole.UpdatedAt = field.NewInt(tableName, "updated_at")

	_cRole.fillFieldMap()

	return _cRole
}

// cRole 角色表
type cRole struct {
	cRoleDo

	ALL       field.Asterisk
	ID        field.Int
	Name      field.String // 角色名称
	Desc      field.String // 角色描述
	Status    field.Int8   // 状态：1正常(默认) 2停用
	CreatedAt field.Int
	UpdatedAt field.Int

	fieldMap map[string]field.Expr
}

func (c cRole) Table(newTableName string) *cRole {
	c.cRoleDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cRole) As(alias string) *cRole {
	c.cRoleDo.DO = *(c.cRoleDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cRole) updateTableName(table string) *cRole {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt(table, "id")
	c.Name = field.NewString(table, "name")
	c.Desc = field.NewString(table, "desc")
	c.Status = field.NewInt8(table, "status")
	c.CreatedAt = field.NewInt(table, "created_at")
	c.UpdatedAt = field.NewInt(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *cRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cRole) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["desc"] = c.Desc
	c.fieldMap["status"] = c.Status
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c cRole) clone(db *gorm.DB) cRole {
	c.cRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cRole) replaceDB(db *gorm.DB) cRole {
	c.cRoleDo.ReplaceDB(db)
	return c
}

type cRoleDo struct{ gen.DO }

type ICRoleDo interface {
	gen.SubQuery
	Debug() ICRoleDo
	WithContext(ctx context.Context) ICRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICRoleDo
	WriteDB() ICRoleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICRoleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICRoleDo
	Not(conds ...gen.Condition) ICRoleDo
	Or(conds ...gen.Condition) ICRoleDo
	Select(conds ...field.Expr) ICRoleDo
	Where(conds ...gen.Condition) ICRoleDo
	Order(conds ...field.Expr) ICRoleDo
	Distinct(cols ...field.Expr) ICRoleDo
	Omit(cols ...field.Expr) ICRoleDo
	Join(table schema.Tabler, on ...field.Expr) ICRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICRoleDo
	Group(cols ...field.Expr) ICRoleDo
	Having(conds ...gen.Condition) ICRoleDo
	Limit(limit int) ICRoleDo
	Offset(offset int) ICRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICRoleDo
	Unscoped() ICRoleDo
	Create(values ...*model.CRole) error
	CreateInBatches(values []*model.CRole, batchSize int) error
	Save(values ...*model.CRole) error
	First() (*model.CRole, error)
	Take() (*model.CRole, error)
	Last() (*model.CRole, error)
	Find() ([]*model.CRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CRole, err error)
	FindInBatches(result *[]*model.CRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICRoleDo
	Assign(attrs ...field.AssignExpr) ICRoleDo
	Joins(fields ...field.RelationField) ICRoleDo
	Preload(fields ...field.RelationField) ICRoleDo
	FirstOrInit() (*model.CRole, error)
	FirstOrCreate() (*model.CRole, error)
	FindByPage(offset int, limit int) (result []*model.CRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cRoleDo) Debug() ICRoleDo {
	return c.withDO(c.DO.Debug())
}

func (c cRoleDo) WithContext(ctx context.Context) ICRoleDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cRoleDo) ReadDB() ICRoleDo {
	return c.Clauses(dbresolver.Read)
}

func (c cRoleDo) WriteDB() ICRoleDo {
	return c.Clauses(dbresolver.Write)
}

func (c cRoleDo) Session(config *gorm.Session) ICRoleDo {
	return c.withDO(c.DO.Session(config))
}

func (c cRoleDo) Clauses(conds ...clause.Expression) ICRoleDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cRoleDo) Returning(value interface{}, columns ...string) ICRoleDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cRoleDo) Not(conds ...gen.Condition) ICRoleDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cRoleDo) Or(conds ...gen.Condition) ICRoleDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cRoleDo) Select(conds ...field.Expr) ICRoleDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cRoleDo) Where(conds ...gen.Condition) ICRoleDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cRoleDo) Order(conds ...field.Expr) ICRoleDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cRoleDo) Distinct(cols ...field.Expr) ICRoleDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cRoleDo) Omit(cols ...field.Expr) ICRoleDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cRoleDo) Join(table schema.Tabler, on ...field.Expr) ICRoleDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICRoleDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) ICRoleDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cRoleDo) Group(cols ...field.Expr) ICRoleDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cRoleDo) Having(conds ...gen.Condition) ICRoleDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cRoleDo) Limit(limit int) ICRoleDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cRoleDo) Offset(offset int) ICRoleDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICRoleDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cRoleDo) Unscoped() ICRoleDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cRoleDo) Create(values ...*model.CRole) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cRoleDo) CreateInBatches(values []*model.CRole, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cRoleDo) Save(values ...*model.CRole) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cRoleDo) First() (*model.CRole, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CRole), nil
	}
}

func (c cRoleDo) Take() (*model.CRole, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CRole), nil
	}
}

func (c cRoleDo) Last() (*model.CRole, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CRole), nil
	}
}

func (c cRoleDo) Find() ([]*model.CRole, error) {
	result, err := c.DO.Find()
	return result.([]*model.CRole), err
}

func (c cRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CRole, err error) {
	buf := make([]*model.CRole, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cRoleDo) FindInBatches(result *[]*model.CRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cRoleDo) Attrs(attrs ...field.AssignExpr) ICRoleDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cRoleDo) Assign(attrs ...field.AssignExpr) ICRoleDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cRoleDo) Joins(fields ...field.RelationField) ICRoleDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cRoleDo) Preload(fields ...field.RelationField) ICRoleDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cRoleDo) FirstOrInit() (*model.CRole, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CRole), nil
	}
}

func (c cRoleDo) FirstOrCreate() (*model.CRole, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CRole), nil
	}
}

func (c cRoleDo) FindByPage(offset int, limit int) (result []*model.CRole, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cRoleDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cRoleDo) Delete(models ...*model.CRole) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cRoleDo) withDO(do gen.Dao) *cRoleDo {
	c.DO = *do.(*gen.DO)
	return c
}
