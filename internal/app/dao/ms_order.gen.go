// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newOrder(db *gorm.DB, opts ...gen.DOOption) order {
	_order := order{}

	_order.orderDo.UseDB(db, opts...)
	_order.orderDo.UseModel(&model.Order{})

	tableName := _order.orderDo.TableName()
	_order.ALL = field.NewAsterisk(tableName)
	_order.ID = field.NewInt64(tableName, "id")
	_order.MemberID = field.NewInt64(tableName, "member_id")
	_order.OrderNo = field.NewString(tableName, "order_no")
	_order.ConsigneeName = field.NewString(tableName, "consignee_name")
	_order.ConsigneePhone = field.NewString(tableName, "consignee_phone")
	_order.ConsigneeAddress = field.NewString(tableName, "consignee_address")
	_order.ConsigneeProvinceID = field.NewString(tableName, "consignee_province_id")
	_order.ConsigneeProvinceName = field.NewString(tableName, "consignee_province_name")
	_order.ConsigneeCityID = field.NewString(tableName, "consignee_city_id")
	_order.ConsigneeCityName = field.NewString(tableName, "consignee_city_name")
	_order.ConsigneeAreaID = field.NewString(tableName, "consignee_area_id")
	_order.ConsigneeAreaName = field.NewString(tableName, "consignee_area_name")
	_order.ConsigneeLongitude = field.NewFloat64(tableName, "consignee_longitude")
	_order.ConsigneeLatitude = field.NewFloat64(tableName, "consignee_latitude")
	_order.GoodsPrice = field.NewFloat64(tableName, "goods_price")
	_order.CouponPrice = field.NewFloat64(tableName, "coupon_price")
	_order.ShippingFee = field.NewFloat64(tableName, "shipping_fee")
	_order.PromotePrice = field.NewFloat64(tableName, "promote_price")
	_order.FinalPrice = field.NewFloat64(tableName, "final_price")
	_order.TotalIntegral = field.NewInt(tableName, "total_integral")
	_order.DistributionType = field.NewInt16(tableName, "distribution_type")
	_order.OrderTime = field.NewInt64(tableName, "order_time")
	_order.PayTime = field.NewInt64(tableName, "pay_time")
	_order.ShippingTime = field.NewInt64(tableName, "shipping_time")
	_order.ShippingNo = field.NewString(tableName, "shipping_no")
	_order.OrderRemark = field.NewString(tableName, "order_remark")
	_order.Status = field.NewInt16(tableName, "status")
	_order.CreatedAt = field.NewInt64(tableName, "created_at")
	_order.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_order.fillFieldMap()

	return _order
}

// order 订单表
type order struct {
	orderDo

	ALL                   field.Asterisk
	ID                    field.Int64
	MemberID              field.Int64   // 用户ID
	OrderNo               field.String  // 订单号
	ConsigneeName         field.String  // 收货人姓名
	ConsigneePhone        field.String  // 收货人电话
	ConsigneeAddress      field.String  // 收货人地址
	ConsigneeProvinceID   field.String  // 省份ID
	ConsigneeProvinceName field.String  // 省份名称
	ConsigneeCityID       field.String  // 城市ID
	ConsigneeCityName     field.String  // 城市名称
	ConsigneeAreaID       field.String  // 城市ID
	ConsigneeAreaName     field.String  // 城市名称
	ConsigneeLongitude    field.Float64 // 经度
	ConsigneeLatitude     field.Float64 // 纬度
	GoodsPrice            field.Float64 // 商品总价 商品原价总价
	CouponPrice           field.Float64 // 优惠券总价格
	ShippingFee           field.Float64 // 配送总价格
	PromotePrice          field.Float64 // 促销总价
	FinalPrice            field.Float64 // 实付价
	TotalIntegral         field.Int     // 赠送积分
	DistributionType      field.Int16   // 配送方式 1：包邮 2：不包邮
	OrderTime             field.Int64   // 订单创建时间
	PayTime               field.Int64   // 付款时间
	ShippingTime          field.Int64   // 发货时间
	ShippingNo            field.String  // 配送单号
	OrderRemark           field.String  // 订单备注
	Status                field.Int16   // 订单状态 1:待付款 2：待发货 3：待收货 4：已完成 5：待评价 6：已取消
	CreatedAt             field.Int64
	UpdatedAt             field.Int64

	fieldMap map[string]field.Expr
}

func (o order) Table(newTableName string) *order {
	o.orderDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o order) As(alias string) *order {
	o.orderDo.DO = *(o.orderDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *order) updateTableName(table string) *order {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.MemberID = field.NewInt64(table, "member_id")
	o.OrderNo = field.NewString(table, "order_no")
	o.ConsigneeName = field.NewString(table, "consignee_name")
	o.ConsigneePhone = field.NewString(table, "consignee_phone")
	o.ConsigneeAddress = field.NewString(table, "consignee_address")
	o.ConsigneeProvinceID = field.NewString(table, "consignee_province_id")
	o.ConsigneeProvinceName = field.NewString(table, "consignee_province_name")
	o.ConsigneeCityID = field.NewString(table, "consignee_city_id")
	o.ConsigneeCityName = field.NewString(table, "consignee_city_name")
	o.ConsigneeAreaID = field.NewString(table, "consignee_area_id")
	o.ConsigneeAreaName = field.NewString(table, "consignee_area_name")
	o.ConsigneeLongitude = field.NewFloat64(table, "consignee_longitude")
	o.ConsigneeLatitude = field.NewFloat64(table, "consignee_latitude")
	o.GoodsPrice = field.NewFloat64(table, "goods_price")
	o.CouponPrice = field.NewFloat64(table, "coupon_price")
	o.ShippingFee = field.NewFloat64(table, "shipping_fee")
	o.PromotePrice = field.NewFloat64(table, "promote_price")
	o.FinalPrice = field.NewFloat64(table, "final_price")
	o.TotalIntegral = field.NewInt(table, "total_integral")
	o.DistributionType = field.NewInt16(table, "distribution_type")
	o.OrderTime = field.NewInt64(table, "order_time")
	o.PayTime = field.NewInt64(table, "pay_time")
	o.ShippingTime = field.NewInt64(table, "shipping_time")
	o.ShippingNo = field.NewString(table, "shipping_no")
	o.OrderRemark = field.NewString(table, "order_remark")
	o.Status = field.NewInt16(table, "status")
	o.CreatedAt = field.NewInt64(table, "created_at")
	o.UpdatedAt = field.NewInt64(table, "updated_at")

	o.fillFieldMap()

	return o
}

func (o *order) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *order) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 29)
	o.fieldMap["id"] = o.ID
	o.fieldMap["member_id"] = o.MemberID
	o.fieldMap["order_no"] = o.OrderNo
	o.fieldMap["consignee_name"] = o.ConsigneeName
	o.fieldMap["consignee_phone"] = o.ConsigneePhone
	o.fieldMap["consignee_address"] = o.ConsigneeAddress
	o.fieldMap["consignee_province_id"] = o.ConsigneeProvinceID
	o.fieldMap["consignee_province_name"] = o.ConsigneeProvinceName
	o.fieldMap["consignee_city_id"] = o.ConsigneeCityID
	o.fieldMap["consignee_city_name"] = o.ConsigneeCityName
	o.fieldMap["consignee_area_id"] = o.ConsigneeAreaID
	o.fieldMap["consignee_area_name"] = o.ConsigneeAreaName
	o.fieldMap["consignee_longitude"] = o.ConsigneeLongitude
	o.fieldMap["consignee_latitude"] = o.ConsigneeLatitude
	o.fieldMap["goods_price"] = o.GoodsPrice
	o.fieldMap["coupon_price"] = o.CouponPrice
	o.fieldMap["shipping_fee"] = o.ShippingFee
	o.fieldMap["promote_price"] = o.PromotePrice
	o.fieldMap["final_price"] = o.FinalPrice
	o.fieldMap["total_integral"] = o.TotalIntegral
	o.fieldMap["distribution_type"] = o.DistributionType
	o.fieldMap["order_time"] = o.OrderTime
	o.fieldMap["pay_time"] = o.PayTime
	o.fieldMap["shipping_time"] = o.ShippingTime
	o.fieldMap["shipping_no"] = o.ShippingNo
	o.fieldMap["order_remark"] = o.OrderRemark
	o.fieldMap["status"] = o.Status
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
}

func (o order) clone(db *gorm.DB) order {
	o.orderDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o order) replaceDB(db *gorm.DB) order {
	o.orderDo.ReplaceDB(db)
	return o
}

type orderDo struct{ gen.DO }

type IOrderDo interface {
	gen.SubQuery
	Debug() IOrderDo
	WithContext(ctx context.Context) IOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderDo
	WriteDB() IOrderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderDo
	Not(conds ...gen.Condition) IOrderDo
	Or(conds ...gen.Condition) IOrderDo
	Select(conds ...field.Expr) IOrderDo
	Where(conds ...gen.Condition) IOrderDo
	Order(conds ...field.Expr) IOrderDo
	Distinct(cols ...field.Expr) IOrderDo
	Omit(cols ...field.Expr) IOrderDo
	Join(table schema.Tabler, on ...field.Expr) IOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderDo
	Group(cols ...field.Expr) IOrderDo
	Having(conds ...gen.Condition) IOrderDo
	Limit(limit int) IOrderDo
	Offset(offset int) IOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderDo
	Unscoped() IOrderDo
	Create(values ...*model.Order) error
	CreateInBatches(values []*model.Order, batchSize int) error
	Save(values ...*model.Order) error
	First() (*model.Order, error)
	Take() (*model.Order, error)
	Last() (*model.Order, error)
	Find() ([]*model.Order, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Order, err error)
	FindInBatches(result *[]*model.Order, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Order) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderDo
	Assign(attrs ...field.AssignExpr) IOrderDo
	Joins(fields ...field.RelationField) IOrderDo
	Preload(fields ...field.RelationField) IOrderDo
	FirstOrInit() (*model.Order, error)
	FirstOrCreate() (*model.Order, error)
	FindByPage(offset int, limit int) (result []*model.Order, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderDo) Debug() IOrderDo {
	return o.withDO(o.DO.Debug())
}

func (o orderDo) WithContext(ctx context.Context) IOrderDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderDo) ReadDB() IOrderDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderDo) WriteDB() IOrderDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderDo) Session(config *gorm.Session) IOrderDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderDo) Clauses(conds ...clause.Expression) IOrderDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderDo) Returning(value interface{}, columns ...string) IOrderDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderDo) Not(conds ...gen.Condition) IOrderDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderDo) Or(conds ...gen.Condition) IOrderDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderDo) Select(conds ...field.Expr) IOrderDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderDo) Where(conds ...gen.Condition) IOrderDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderDo) Order(conds ...field.Expr) IOrderDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderDo) Distinct(cols ...field.Expr) IOrderDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderDo) Omit(cols ...field.Expr) IOrderDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderDo) Join(table schema.Tabler, on ...field.Expr) IOrderDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderDo) Group(cols ...field.Expr) IOrderDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderDo) Having(conds ...gen.Condition) IOrderDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderDo) Limit(limit int) IOrderDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderDo) Offset(offset int) IOrderDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderDo) Unscoped() IOrderDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderDo) Create(values ...*model.Order) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderDo) CreateInBatches(values []*model.Order, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderDo) Save(values ...*model.Order) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderDo) First() (*model.Order, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Order), nil
	}
}

func (o orderDo) Take() (*model.Order, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Order), nil
	}
}

func (o orderDo) Last() (*model.Order, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Order), nil
	}
}

func (o orderDo) Find() ([]*model.Order, error) {
	result, err := o.DO.Find()
	return result.([]*model.Order), err
}

func (o orderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Order, err error) {
	buf := make([]*model.Order, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderDo) FindInBatches(result *[]*model.Order, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderDo) Attrs(attrs ...field.AssignExpr) IOrderDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderDo) Assign(attrs ...field.AssignExpr) IOrderDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderDo) Joins(fields ...field.RelationField) IOrderDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderDo) Preload(fields ...field.RelationField) IOrderDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderDo) FirstOrInit() (*model.Order, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Order), nil
	}
}

func (o orderDo) FirstOrCreate() (*model.Order, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Order), nil
	}
}

func (o orderDo) FindByPage(offset int, limit int) (result []*model.Order, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderDo) Delete(models ...*model.Order) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderDo) withDO(do gen.Dao) *orderDo {
	o.DO = *do.(*gen.DO)
	return o
}
