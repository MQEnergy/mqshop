// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newCResource(db *gorm.DB, opts ...gen.DOOption) cResource {
	_cResource := cResource{}

	_cResource.cResourceDo.UseDB(db, opts...)
	_cResource.cResourceDo.UseModel(&model.CResource{})

	tableName := _cResource.cResourceDo.TableName()
	_cResource.ALL = field.NewAsterisk(tableName)
	_cResource.ID = field.NewInt64(tableName, "id")
	_cResource.Name = field.NewString(tableName, "name")
	_cResource.Alias_ = field.NewString(tableName, "alias")
	_cResource.Desc = field.NewString(tableName, "desc")
	_cResource.FURL = field.NewString(tableName, "f_url")
	_cResource.BURL = field.NewString(tableName, "b_url")
	_cResource.Icon = field.NewString(tableName, "icon")
	_cResource.ParentID = field.NewInt64(tableName, "parent_id")
	_cResource.Path = field.NewString(tableName, "path")
	_cResource.MenuType = field.NewInt8(tableName, "menu_type")
	_cResource.Status = field.NewInt8(tableName, "status")
	_cResource.SortOrder = field.NewInt16(tableName, "sort_order")
	_cResource.CreatedAt = field.NewInt64(tableName, "created_at")
	_cResource.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_cResource.fillFieldMap()

	return _cResource
}

type cResource struct {
	cResourceDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String // 菜单名称
	Alias_    field.String // 菜单别名
	Desc      field.String // 菜单描述
	FURL      field.String // 菜单前端URL
	BURL      field.String // 后端URL
	Icon      field.String // 菜单icon
	ParentID  field.Int64  // 父级ID
	Path      field.String // ID路径 1-2-3...
	MenuType  field.Int8   // 菜单类型 1：模块 2：操作
	Status    field.Int8   // 状态：1正常(默认) 0停用
	SortOrder field.Int16  // 排序
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (c cResource) Table(newTableName string) *cResource {
	c.cResourceDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cResource) As(alias string) *cResource {
	c.cResourceDo.DO = *(c.cResourceDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cResource) updateTableName(table string) *cResource {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Name = field.NewString(table, "name")
	c.Alias_ = field.NewString(table, "alias")
	c.Desc = field.NewString(table, "desc")
	c.FURL = field.NewString(table, "f_url")
	c.BURL = field.NewString(table, "b_url")
	c.Icon = field.NewString(table, "icon")
	c.ParentID = field.NewInt64(table, "parent_id")
	c.Path = field.NewString(table, "path")
	c.MenuType = field.NewInt8(table, "menu_type")
	c.Status = field.NewInt8(table, "status")
	c.SortOrder = field.NewInt16(table, "sort_order")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.UpdatedAt = field.NewInt64(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *cResource) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cResource) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 14)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["alias"] = c.Alias_
	c.fieldMap["desc"] = c.Desc
	c.fieldMap["f_url"] = c.FURL
	c.fieldMap["b_url"] = c.BURL
	c.fieldMap["icon"] = c.Icon
	c.fieldMap["parent_id"] = c.ParentID
	c.fieldMap["path"] = c.Path
	c.fieldMap["menu_type"] = c.MenuType
	c.fieldMap["status"] = c.Status
	c.fieldMap["sort_order"] = c.SortOrder
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c cResource) clone(db *gorm.DB) cResource {
	c.cResourceDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cResource) replaceDB(db *gorm.DB) cResource {
	c.cResourceDo.ReplaceDB(db)
	return c
}

type cResourceDo struct{ gen.DO }

type ICResourceDo interface {
	gen.SubQuery
	Debug() ICResourceDo
	WithContext(ctx context.Context) ICResourceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICResourceDo
	WriteDB() ICResourceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICResourceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICResourceDo
	Not(conds ...gen.Condition) ICResourceDo
	Or(conds ...gen.Condition) ICResourceDo
	Select(conds ...field.Expr) ICResourceDo
	Where(conds ...gen.Condition) ICResourceDo
	Order(conds ...field.Expr) ICResourceDo
	Distinct(cols ...field.Expr) ICResourceDo
	Omit(cols ...field.Expr) ICResourceDo
	Join(table schema.Tabler, on ...field.Expr) ICResourceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICResourceDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICResourceDo
	Group(cols ...field.Expr) ICResourceDo
	Having(conds ...gen.Condition) ICResourceDo
	Limit(limit int) ICResourceDo
	Offset(offset int) ICResourceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICResourceDo
	Unscoped() ICResourceDo
	Create(values ...*model.CResource) error
	CreateInBatches(values []*model.CResource, batchSize int) error
	Save(values ...*model.CResource) error
	First() (*model.CResource, error)
	Take() (*model.CResource, error)
	Last() (*model.CResource, error)
	Find() ([]*model.CResource, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CResource, err error)
	FindInBatches(result *[]*model.CResource, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CResource) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICResourceDo
	Assign(attrs ...field.AssignExpr) ICResourceDo
	Joins(fields ...field.RelationField) ICResourceDo
	Preload(fields ...field.RelationField) ICResourceDo
	FirstOrInit() (*model.CResource, error)
	FirstOrCreate() (*model.CResource, error)
	FindByPage(offset int, limit int) (result []*model.CResource, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICResourceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cResourceDo) Debug() ICResourceDo {
	return c.withDO(c.DO.Debug())
}

func (c cResourceDo) WithContext(ctx context.Context) ICResourceDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cResourceDo) ReadDB() ICResourceDo {
	return c.Clauses(dbresolver.Read)
}

func (c cResourceDo) WriteDB() ICResourceDo {
	return c.Clauses(dbresolver.Write)
}

func (c cResourceDo) Session(config *gorm.Session) ICResourceDo {
	return c.withDO(c.DO.Session(config))
}

func (c cResourceDo) Clauses(conds ...clause.Expression) ICResourceDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cResourceDo) Returning(value interface{}, columns ...string) ICResourceDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cResourceDo) Not(conds ...gen.Condition) ICResourceDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cResourceDo) Or(conds ...gen.Condition) ICResourceDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cResourceDo) Select(conds ...field.Expr) ICResourceDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cResourceDo) Where(conds ...gen.Condition) ICResourceDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cResourceDo) Order(conds ...field.Expr) ICResourceDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cResourceDo) Distinct(cols ...field.Expr) ICResourceDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cResourceDo) Omit(cols ...field.Expr) ICResourceDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cResourceDo) Join(table schema.Tabler, on ...field.Expr) ICResourceDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cResourceDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICResourceDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cResourceDo) RightJoin(table schema.Tabler, on ...field.Expr) ICResourceDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cResourceDo) Group(cols ...field.Expr) ICResourceDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cResourceDo) Having(conds ...gen.Condition) ICResourceDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cResourceDo) Limit(limit int) ICResourceDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cResourceDo) Offset(offset int) ICResourceDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cResourceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICResourceDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cResourceDo) Unscoped() ICResourceDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cResourceDo) Create(values ...*model.CResource) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cResourceDo) CreateInBatches(values []*model.CResource, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cResourceDo) Save(values ...*model.CResource) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cResourceDo) First() (*model.CResource, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CResource), nil
	}
}

func (c cResourceDo) Take() (*model.CResource, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CResource), nil
	}
}

func (c cResourceDo) Last() (*model.CResource, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CResource), nil
	}
}

func (c cResourceDo) Find() ([]*model.CResource, error) {
	result, err := c.DO.Find()
	return result.([]*model.CResource), err
}

func (c cResourceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CResource, err error) {
	buf := make([]*model.CResource, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cResourceDo) FindInBatches(result *[]*model.CResource, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cResourceDo) Attrs(attrs ...field.AssignExpr) ICResourceDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cResourceDo) Assign(attrs ...field.AssignExpr) ICResourceDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cResourceDo) Joins(fields ...field.RelationField) ICResourceDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cResourceDo) Preload(fields ...field.RelationField) ICResourceDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cResourceDo) FirstOrInit() (*model.CResource, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CResource), nil
	}
}

func (c cResourceDo) FirstOrCreate() (*model.CResource, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CResource), nil
	}
}

func (c cResourceDo) FindByPage(offset int, limit int) (result []*model.CResource, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cResourceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cResourceDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cResourceDo) Delete(models ...*model.CResource) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cResourceDo) withDO(do gen.Dao) *cResourceDo {
	c.DO = *do.(*gen.DO)
	return c
}
