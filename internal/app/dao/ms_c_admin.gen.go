// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newCAdmin(db *gorm.DB, opts ...gen.DOOption) cAdmin {
	_cAdmin := cAdmin{}

	_cAdmin.cAdminDo.UseDB(db, opts...)
	_cAdmin.cAdminDo.UseModel(&model.CAdmin{})

	tableName := _cAdmin.cAdminDo.TableName()
	_cAdmin.ALL = field.NewAsterisk(tableName)
	_cAdmin.ID = field.NewInt64(tableName, "id")
	_cAdmin.UUID = field.NewString(tableName, "uuid")
	_cAdmin.Account = field.NewString(tableName, "account")
	_cAdmin.Password = field.NewString(tableName, "password")
	_cAdmin.Phone = field.NewString(tableName, "phone")
	_cAdmin.Avatar = field.NewString(tableName, "avatar")
	_cAdmin.Salt = field.NewString(tableName, "salt")
	_cAdmin.RealName = field.NewString(tableName, "real_name")
	_cAdmin.RegisterTime = field.NewInt64(tableName, "register_time")
	_cAdmin.RegisterIP = field.NewString(tableName, "register_ip")
	_cAdmin.LoginTime = field.NewInt64(tableName, "login_time")
	_cAdmin.LoginIP = field.NewString(tableName, "login_ip")
	_cAdmin.RoleIds = field.NewString(tableName, "role_ids")
	_cAdmin.Status = field.NewInt8(tableName, "status")
	_cAdmin.CreatedAt = field.NewInt64(tableName, "created_at")
	_cAdmin.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_cAdmin.fillFieldMap()

	return _cAdmin
}

// cAdmin 后台管理员表
type cAdmin struct {
	cAdminDo

	ALL          field.Asterisk
	ID           field.Int64
	UUID         field.String // 唯一id号
	Account      field.String // 账号
	Password     field.String // 密码
	Phone        field.String // 手机号
	Avatar       field.String // 头像
	Salt         field.String // 密码
	RealName     field.String // 真实姓名
	RegisterTime field.Int64  // 注册时间
	RegisterIP   field.String // 注册ip
	LoginTime    field.Int64  // 登录时间
	LoginIP      field.String // 登录ip
	RoleIds      field.String // 角色IDs
	Status       field.Int8   // 状态 1：正常 2：禁用
	CreatedAt    field.Int64
	UpdatedAt    field.Int64

	fieldMap map[string]field.Expr
}

func (c cAdmin) Table(newTableName string) *cAdmin {
	c.cAdminDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cAdmin) As(alias string) *cAdmin {
	c.cAdminDo.DO = *(c.cAdminDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cAdmin) updateTableName(table string) *cAdmin {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.UUID = field.NewString(table, "uuid")
	c.Account = field.NewString(table, "account")
	c.Password = field.NewString(table, "password")
	c.Phone = field.NewString(table, "phone")
	c.Avatar = field.NewString(table, "avatar")
	c.Salt = field.NewString(table, "salt")
	c.RealName = field.NewString(table, "real_name")
	c.RegisterTime = field.NewInt64(table, "register_time")
	c.RegisterIP = field.NewString(table, "register_ip")
	c.LoginTime = field.NewInt64(table, "login_time")
	c.LoginIP = field.NewString(table, "login_ip")
	c.RoleIds = field.NewString(table, "role_ids")
	c.Status = field.NewInt8(table, "status")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.UpdatedAt = field.NewInt64(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *cAdmin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cAdmin) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 16)
	c.fieldMap["id"] = c.ID
	c.fieldMap["uuid"] = c.UUID
	c.fieldMap["account"] = c.Account
	c.fieldMap["password"] = c.Password
	c.fieldMap["phone"] = c.Phone
	c.fieldMap["avatar"] = c.Avatar
	c.fieldMap["salt"] = c.Salt
	c.fieldMap["real_name"] = c.RealName
	c.fieldMap["register_time"] = c.RegisterTime
	c.fieldMap["register_ip"] = c.RegisterIP
	c.fieldMap["login_time"] = c.LoginTime
	c.fieldMap["login_ip"] = c.LoginIP
	c.fieldMap["role_ids"] = c.RoleIds
	c.fieldMap["status"] = c.Status
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c cAdmin) clone(db *gorm.DB) cAdmin {
	c.cAdminDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cAdmin) replaceDB(db *gorm.DB) cAdmin {
	c.cAdminDo.ReplaceDB(db)
	return c
}

type cAdminDo struct{ gen.DO }

type ICAdminDo interface {
	gen.SubQuery
	Debug() ICAdminDo
	WithContext(ctx context.Context) ICAdminDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICAdminDo
	WriteDB() ICAdminDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICAdminDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICAdminDo
	Not(conds ...gen.Condition) ICAdminDo
	Or(conds ...gen.Condition) ICAdminDo
	Select(conds ...field.Expr) ICAdminDo
	Where(conds ...gen.Condition) ICAdminDo
	Order(conds ...field.Expr) ICAdminDo
	Distinct(cols ...field.Expr) ICAdminDo
	Omit(cols ...field.Expr) ICAdminDo
	Join(table schema.Tabler, on ...field.Expr) ICAdminDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICAdminDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICAdminDo
	Group(cols ...field.Expr) ICAdminDo
	Having(conds ...gen.Condition) ICAdminDo
	Limit(limit int) ICAdminDo
	Offset(offset int) ICAdminDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICAdminDo
	Unscoped() ICAdminDo
	Create(values ...*model.CAdmin) error
	CreateInBatches(values []*model.CAdmin, batchSize int) error
	Save(values ...*model.CAdmin) error
	First() (*model.CAdmin, error)
	Take() (*model.CAdmin, error)
	Last() (*model.CAdmin, error)
	Find() ([]*model.CAdmin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CAdmin, err error)
	FindInBatches(result *[]*model.CAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CAdmin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICAdminDo
	Assign(attrs ...field.AssignExpr) ICAdminDo
	Joins(fields ...field.RelationField) ICAdminDo
	Preload(fields ...field.RelationField) ICAdminDo
	FirstOrInit() (*model.CAdmin, error)
	FirstOrCreate() (*model.CAdmin, error)
	FindByPage(offset int, limit int) (result []*model.CAdmin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICAdminDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int) (result model.CAdmin, err error)
	FindAll() (result []model.CAdmin, err error)
	FindOne() (result model.CAdmin)
	GetByAccount(account string) (result *model.CAdmin, err error)
}

// SELECT * FROM @@table WHERE id = @id
func (c cAdminDo) GetByID(id int) (result model.CAdmin, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM ms_c_admin WHERE id = ? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
func (c cAdminDo) FindAll() (result []model.CAdmin, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM ms_c_admin ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table LIMIT 1
func (c cAdminDo) FindOne() (result model.CAdmin) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM ms_c_admin LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	_ = executeSQL

	return
}

// SELECT * FROM @@table WHERE account = @account
func (c cAdminDo) GetByAccount(account string) (result *model.CAdmin, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, account)
	generateSQL.WriteString("SELECT * FROM ms_c_admin WHERE account = ? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c cAdminDo) Debug() ICAdminDo {
	return c.withDO(c.DO.Debug())
}

func (c cAdminDo) WithContext(ctx context.Context) ICAdminDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cAdminDo) ReadDB() ICAdminDo {
	return c.Clauses(dbresolver.Read)
}

func (c cAdminDo) WriteDB() ICAdminDo {
	return c.Clauses(dbresolver.Write)
}

func (c cAdminDo) Session(config *gorm.Session) ICAdminDo {
	return c.withDO(c.DO.Session(config))
}

func (c cAdminDo) Clauses(conds ...clause.Expression) ICAdminDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cAdminDo) Returning(value interface{}, columns ...string) ICAdminDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cAdminDo) Not(conds ...gen.Condition) ICAdminDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cAdminDo) Or(conds ...gen.Condition) ICAdminDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cAdminDo) Select(conds ...field.Expr) ICAdminDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cAdminDo) Where(conds ...gen.Condition) ICAdminDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cAdminDo) Order(conds ...field.Expr) ICAdminDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cAdminDo) Distinct(cols ...field.Expr) ICAdminDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cAdminDo) Omit(cols ...field.Expr) ICAdminDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cAdminDo) Join(table schema.Tabler, on ...field.Expr) ICAdminDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cAdminDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICAdminDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cAdminDo) RightJoin(table schema.Tabler, on ...field.Expr) ICAdminDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cAdminDo) Group(cols ...field.Expr) ICAdminDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cAdminDo) Having(conds ...gen.Condition) ICAdminDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cAdminDo) Limit(limit int) ICAdminDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cAdminDo) Offset(offset int) ICAdminDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cAdminDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICAdminDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cAdminDo) Unscoped() ICAdminDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cAdminDo) Create(values ...*model.CAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cAdminDo) CreateInBatches(values []*model.CAdmin, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cAdminDo) Save(values ...*model.CAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cAdminDo) First() (*model.CAdmin, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CAdmin), nil
	}
}

func (c cAdminDo) Take() (*model.CAdmin, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CAdmin), nil
	}
}

func (c cAdminDo) Last() (*model.CAdmin, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CAdmin), nil
	}
}

func (c cAdminDo) Find() ([]*model.CAdmin, error) {
	result, err := c.DO.Find()
	return result.([]*model.CAdmin), err
}

func (c cAdminDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CAdmin, err error) {
	buf := make([]*model.CAdmin, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cAdminDo) FindInBatches(result *[]*model.CAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cAdminDo) Attrs(attrs ...field.AssignExpr) ICAdminDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cAdminDo) Assign(attrs ...field.AssignExpr) ICAdminDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cAdminDo) Joins(fields ...field.RelationField) ICAdminDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cAdminDo) Preload(fields ...field.RelationField) ICAdminDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cAdminDo) FirstOrInit() (*model.CAdmin, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CAdmin), nil
	}
}

func (c cAdminDo) FirstOrCreate() (*model.CAdmin, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CAdmin), nil
	}
}

func (c cAdminDo) FindByPage(offset int, limit int) (result []*model.CAdmin, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cAdminDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cAdminDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cAdminDo) Delete(models ...*model.CAdmin) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cAdminDo) withDO(do gen.Dao) *cAdminDo {
	c.DO = *do.(*gen.DO)
	return c
}
