// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newCCities(db *gorm.DB, opts ...gen.DOOption) cCities {
	_cCities := cCities{}

	_cCities.cCitiesDo.UseDB(db, opts...)
	_cCities.cCitiesDo.UseModel(&model.CCities{})

	tableName := _cCities.cCitiesDo.TableName()
	_cCities.ALL = field.NewAsterisk(tableName)
	_cCities.ID = field.NewInt64(tableName, "id")
	_cCities.Code = field.NewString(tableName, "code")
	_cCities.Name = field.NewString(tableName, "name")
	_cCities.ProvinceCode = field.NewString(tableName, "province_code")
	_cCities.Leter = field.NewString(tableName, "leter")
	_cCities.Spelling = field.NewString(tableName, "spelling")
	_cCities.Acronym = field.NewString(tableName, "acronym")

	_cCities.fillFieldMap()

	return _cCities
}

type cCities struct {
	cCitiesDo

	ALL          field.Asterisk
	ID           field.Int64
	Code         field.String
	Name         field.String
	ProvinceCode field.String
	Leter        field.String // 首字母
	Spelling     field.String // 全拼
	Acronym      field.String // 首字母缩写

	fieldMap map[string]field.Expr
}

func (c cCities) Table(newTableName string) *cCities {
	c.cCitiesDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cCities) As(alias string) *cCities {
	c.cCitiesDo.DO = *(c.cCitiesDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cCities) updateTableName(table string) *cCities {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Code = field.NewString(table, "code")
	c.Name = field.NewString(table, "name")
	c.ProvinceCode = field.NewString(table, "province_code")
	c.Leter = field.NewString(table, "leter")
	c.Spelling = field.NewString(table, "spelling")
	c.Acronym = field.NewString(table, "acronym")

	c.fillFieldMap()

	return c
}

func (c *cCities) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cCities) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["code"] = c.Code
	c.fieldMap["name"] = c.Name
	c.fieldMap["province_code"] = c.ProvinceCode
	c.fieldMap["leter"] = c.Leter
	c.fieldMap["spelling"] = c.Spelling
	c.fieldMap["acronym"] = c.Acronym
}

func (c cCities) clone(db *gorm.DB) cCities {
	c.cCitiesDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cCities) replaceDB(db *gorm.DB) cCities {
	c.cCitiesDo.ReplaceDB(db)
	return c
}

type cCitiesDo struct{ gen.DO }

type ICCitiesDo interface {
	gen.SubQuery
	Debug() ICCitiesDo
	WithContext(ctx context.Context) ICCitiesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICCitiesDo
	WriteDB() ICCitiesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICCitiesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICCitiesDo
	Not(conds ...gen.Condition) ICCitiesDo
	Or(conds ...gen.Condition) ICCitiesDo
	Select(conds ...field.Expr) ICCitiesDo
	Where(conds ...gen.Condition) ICCitiesDo
	Order(conds ...field.Expr) ICCitiesDo
	Distinct(cols ...field.Expr) ICCitiesDo
	Omit(cols ...field.Expr) ICCitiesDo
	Join(table schema.Tabler, on ...field.Expr) ICCitiesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICCitiesDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICCitiesDo
	Group(cols ...field.Expr) ICCitiesDo
	Having(conds ...gen.Condition) ICCitiesDo
	Limit(limit int) ICCitiesDo
	Offset(offset int) ICCitiesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICCitiesDo
	Unscoped() ICCitiesDo
	Create(values ...*model.CCities) error
	CreateInBatches(values []*model.CCities, batchSize int) error
	Save(values ...*model.CCities) error
	First() (*model.CCities, error)
	Take() (*model.CCities, error)
	Last() (*model.CCities, error)
	Find() ([]*model.CCities, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CCities, err error)
	FindInBatches(result *[]*model.CCities, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CCities) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICCitiesDo
	Assign(attrs ...field.AssignExpr) ICCitiesDo
	Joins(fields ...field.RelationField) ICCitiesDo
	Preload(fields ...field.RelationField) ICCitiesDo
	FirstOrInit() (*model.CCities, error)
	FirstOrCreate() (*model.CCities, error)
	FindByPage(offset int, limit int) (result []*model.CCities, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICCitiesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cCitiesDo) Debug() ICCitiesDo {
	return c.withDO(c.DO.Debug())
}

func (c cCitiesDo) WithContext(ctx context.Context) ICCitiesDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cCitiesDo) ReadDB() ICCitiesDo {
	return c.Clauses(dbresolver.Read)
}

func (c cCitiesDo) WriteDB() ICCitiesDo {
	return c.Clauses(dbresolver.Write)
}

func (c cCitiesDo) Session(config *gorm.Session) ICCitiesDo {
	return c.withDO(c.DO.Session(config))
}

func (c cCitiesDo) Clauses(conds ...clause.Expression) ICCitiesDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cCitiesDo) Returning(value interface{}, columns ...string) ICCitiesDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cCitiesDo) Not(conds ...gen.Condition) ICCitiesDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cCitiesDo) Or(conds ...gen.Condition) ICCitiesDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cCitiesDo) Select(conds ...field.Expr) ICCitiesDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cCitiesDo) Where(conds ...gen.Condition) ICCitiesDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cCitiesDo) Order(conds ...field.Expr) ICCitiesDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cCitiesDo) Distinct(cols ...field.Expr) ICCitiesDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cCitiesDo) Omit(cols ...field.Expr) ICCitiesDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cCitiesDo) Join(table schema.Tabler, on ...field.Expr) ICCitiesDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cCitiesDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICCitiesDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cCitiesDo) RightJoin(table schema.Tabler, on ...field.Expr) ICCitiesDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cCitiesDo) Group(cols ...field.Expr) ICCitiesDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cCitiesDo) Having(conds ...gen.Condition) ICCitiesDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cCitiesDo) Limit(limit int) ICCitiesDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cCitiesDo) Offset(offset int) ICCitiesDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cCitiesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICCitiesDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cCitiesDo) Unscoped() ICCitiesDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cCitiesDo) Create(values ...*model.CCities) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cCitiesDo) CreateInBatches(values []*model.CCities, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cCitiesDo) Save(values ...*model.CCities) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cCitiesDo) First() (*model.CCities, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CCities), nil
	}
}

func (c cCitiesDo) Take() (*model.CCities, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CCities), nil
	}
}

func (c cCitiesDo) Last() (*model.CCities, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CCities), nil
	}
}

func (c cCitiesDo) Find() ([]*model.CCities, error) {
	result, err := c.DO.Find()
	return result.([]*model.CCities), err
}

func (c cCitiesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CCities, err error) {
	buf := make([]*model.CCities, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cCitiesDo) FindInBatches(result *[]*model.CCities, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cCitiesDo) Attrs(attrs ...field.AssignExpr) ICCitiesDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cCitiesDo) Assign(attrs ...field.AssignExpr) ICCitiesDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cCitiesDo) Joins(fields ...field.RelationField) ICCitiesDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cCitiesDo) Preload(fields ...field.RelationField) ICCitiesDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cCitiesDo) FirstOrInit() (*model.CCities, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CCities), nil
	}
}

func (c cCitiesDo) FirstOrCreate() (*model.CCities, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CCities), nil
	}
}

func (c cCitiesDo) FindByPage(offset int, limit int) (result []*model.CCities, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cCitiesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cCitiesDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cCitiesDo) Delete(models ...*model.CCities) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cCitiesDo) withDO(do gen.Dao) *cCitiesDo {
	c.DO = *do.(*gen.DO)
	return c
}
