// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newMemberPostTagRelation(db *gorm.DB, opts ...gen.DOOption) memberPostTagRelation {
	_memberPostTagRelation := memberPostTagRelation{}

	_memberPostTagRelation.memberPostTagRelationDo.UseDB(db, opts...)
	_memberPostTagRelation.memberPostTagRelationDo.UseModel(&model.MemberPostTagRelation{})

	tableName := _memberPostTagRelation.memberPostTagRelationDo.TableName()
	_memberPostTagRelation.ALL = field.NewAsterisk(tableName)
	_memberPostTagRelation.ID = field.NewInt64(tableName, "id")
	_memberPostTagRelation.PostID = field.NewInt64(tableName, "post_id")
	_memberPostTagRelation.TagID = field.NewInt64(tableName, "tag_id")
	_memberPostTagRelation.CreatedAt = field.NewInt64(tableName, "created_at")

	_memberPostTagRelation.fillFieldMap()

	return _memberPostTagRelation
}

// memberPostTagRelation 帖子标签关联表
type memberPostTagRelation struct {
	memberPostTagRelationDo

	ALL       field.Asterisk
	ID        field.Int64
	PostID    field.Int64 // 帖子ID
	TagID     field.Int64 // 标签ID
	CreatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (m memberPostTagRelation) Table(newTableName string) *memberPostTagRelation {
	m.memberPostTagRelationDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m memberPostTagRelation) As(alias string) *memberPostTagRelation {
	m.memberPostTagRelationDo.DO = *(m.memberPostTagRelationDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *memberPostTagRelation) updateTableName(table string) *memberPostTagRelation {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.PostID = field.NewInt64(table, "post_id")
	m.TagID = field.NewInt64(table, "tag_id")
	m.CreatedAt = field.NewInt64(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *memberPostTagRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *memberPostTagRelation) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 4)
	m.fieldMap["id"] = m.ID
	m.fieldMap["post_id"] = m.PostID
	m.fieldMap["tag_id"] = m.TagID
	m.fieldMap["created_at"] = m.CreatedAt
}

func (m memberPostTagRelation) clone(db *gorm.DB) memberPostTagRelation {
	m.memberPostTagRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m memberPostTagRelation) replaceDB(db *gorm.DB) memberPostTagRelation {
	m.memberPostTagRelationDo.ReplaceDB(db)
	return m
}

type memberPostTagRelationDo struct{ gen.DO }

type IMemberPostTagRelationDo interface {
	gen.SubQuery
	Debug() IMemberPostTagRelationDo
	WithContext(ctx context.Context) IMemberPostTagRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMemberPostTagRelationDo
	WriteDB() IMemberPostTagRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMemberPostTagRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMemberPostTagRelationDo
	Not(conds ...gen.Condition) IMemberPostTagRelationDo
	Or(conds ...gen.Condition) IMemberPostTagRelationDo
	Select(conds ...field.Expr) IMemberPostTagRelationDo
	Where(conds ...gen.Condition) IMemberPostTagRelationDo
	Order(conds ...field.Expr) IMemberPostTagRelationDo
	Distinct(cols ...field.Expr) IMemberPostTagRelationDo
	Omit(cols ...field.Expr) IMemberPostTagRelationDo
	Join(table schema.Tabler, on ...field.Expr) IMemberPostTagRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMemberPostTagRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMemberPostTagRelationDo
	Group(cols ...field.Expr) IMemberPostTagRelationDo
	Having(conds ...gen.Condition) IMemberPostTagRelationDo
	Limit(limit int) IMemberPostTagRelationDo
	Offset(offset int) IMemberPostTagRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberPostTagRelationDo
	Unscoped() IMemberPostTagRelationDo
	Create(values ...*model.MemberPostTagRelation) error
	CreateInBatches(values []*model.MemberPostTagRelation, batchSize int) error
	Save(values ...*model.MemberPostTagRelation) error
	First() (*model.MemberPostTagRelation, error)
	Take() (*model.MemberPostTagRelation, error)
	Last() (*model.MemberPostTagRelation, error)
	Find() ([]*model.MemberPostTagRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemberPostTagRelation, err error)
	FindInBatches(result *[]*model.MemberPostTagRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MemberPostTagRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMemberPostTagRelationDo
	Assign(attrs ...field.AssignExpr) IMemberPostTagRelationDo
	Joins(fields ...field.RelationField) IMemberPostTagRelationDo
	Preload(fields ...field.RelationField) IMemberPostTagRelationDo
	FirstOrInit() (*model.MemberPostTagRelation, error)
	FirstOrCreate() (*model.MemberPostTagRelation, error)
	FindByPage(offset int, limit int) (result []*model.MemberPostTagRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMemberPostTagRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m memberPostTagRelationDo) Debug() IMemberPostTagRelationDo {
	return m.withDO(m.DO.Debug())
}

func (m memberPostTagRelationDo) WithContext(ctx context.Context) IMemberPostTagRelationDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m memberPostTagRelationDo) ReadDB() IMemberPostTagRelationDo {
	return m.Clauses(dbresolver.Read)
}

func (m memberPostTagRelationDo) WriteDB() IMemberPostTagRelationDo {
	return m.Clauses(dbresolver.Write)
}

func (m memberPostTagRelationDo) Session(config *gorm.Session) IMemberPostTagRelationDo {
	return m.withDO(m.DO.Session(config))
}

func (m memberPostTagRelationDo) Clauses(conds ...clause.Expression) IMemberPostTagRelationDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m memberPostTagRelationDo) Returning(value interface{}, columns ...string) IMemberPostTagRelationDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m memberPostTagRelationDo) Not(conds ...gen.Condition) IMemberPostTagRelationDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m memberPostTagRelationDo) Or(conds ...gen.Condition) IMemberPostTagRelationDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m memberPostTagRelationDo) Select(conds ...field.Expr) IMemberPostTagRelationDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m memberPostTagRelationDo) Where(conds ...gen.Condition) IMemberPostTagRelationDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m memberPostTagRelationDo) Order(conds ...field.Expr) IMemberPostTagRelationDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m memberPostTagRelationDo) Distinct(cols ...field.Expr) IMemberPostTagRelationDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m memberPostTagRelationDo) Omit(cols ...field.Expr) IMemberPostTagRelationDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m memberPostTagRelationDo) Join(table schema.Tabler, on ...field.Expr) IMemberPostTagRelationDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m memberPostTagRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMemberPostTagRelationDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m memberPostTagRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IMemberPostTagRelationDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m memberPostTagRelationDo) Group(cols ...field.Expr) IMemberPostTagRelationDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m memberPostTagRelationDo) Having(conds ...gen.Condition) IMemberPostTagRelationDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m memberPostTagRelationDo) Limit(limit int) IMemberPostTagRelationDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m memberPostTagRelationDo) Offset(offset int) IMemberPostTagRelationDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m memberPostTagRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberPostTagRelationDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m memberPostTagRelationDo) Unscoped() IMemberPostTagRelationDo {
	return m.withDO(m.DO.Unscoped())
}

func (m memberPostTagRelationDo) Create(values ...*model.MemberPostTagRelation) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m memberPostTagRelationDo) CreateInBatches(values []*model.MemberPostTagRelation, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m memberPostTagRelationDo) Save(values ...*model.MemberPostTagRelation) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m memberPostTagRelationDo) First() (*model.MemberPostTagRelation, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberPostTagRelation), nil
	}
}

func (m memberPostTagRelationDo) Take() (*model.MemberPostTagRelation, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberPostTagRelation), nil
	}
}

func (m memberPostTagRelationDo) Last() (*model.MemberPostTagRelation, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberPostTagRelation), nil
	}
}

func (m memberPostTagRelationDo) Find() ([]*model.MemberPostTagRelation, error) {
	result, err := m.DO.Find()
	return result.([]*model.MemberPostTagRelation), err
}

func (m memberPostTagRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemberPostTagRelation, err error) {
	buf := make([]*model.MemberPostTagRelation, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m memberPostTagRelationDo) FindInBatches(result *[]*model.MemberPostTagRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m memberPostTagRelationDo) Attrs(attrs ...field.AssignExpr) IMemberPostTagRelationDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m memberPostTagRelationDo) Assign(attrs ...field.AssignExpr) IMemberPostTagRelationDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m memberPostTagRelationDo) Joins(fields ...field.RelationField) IMemberPostTagRelationDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m memberPostTagRelationDo) Preload(fields ...field.RelationField) IMemberPostTagRelationDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m memberPostTagRelationDo) FirstOrInit() (*model.MemberPostTagRelation, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberPostTagRelation), nil
	}
}

func (m memberPostTagRelationDo) FirstOrCreate() (*model.MemberPostTagRelation, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberPostTagRelation), nil
	}
}

func (m memberPostTagRelationDo) FindByPage(offset int, limit int) (result []*model.MemberPostTagRelation, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m memberPostTagRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m memberPostTagRelationDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m memberPostTagRelationDo) Delete(models ...*model.MemberPostTagRelation) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *memberPostTagRelationDo) withDO(do gen.Dao) *memberPostTagRelationDo {
	m.DO = *do.(*gen.DO)
	return m
}
