// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newTbOriginGoods(db *gorm.DB, opts ...gen.DOOption) tbOriginGoods {
	_tbOriginGoods := tbOriginGoods{}

	_tbOriginGoods.tbOriginGoodsDo.UseDB(db, opts...)
	_tbOriginGoods.tbOriginGoodsDo.UseModel(&model.TbOriginGoods{})

	tableName := _tbOriginGoods.tbOriginGoodsDo.TableName()
	_tbOriginGoods.ALL = field.NewAsterisk(tableName)
	_tbOriginGoods.ID = field.NewInt64(tableName, "id")
	_tbOriginGoods.GoodsTitle = field.NewString(tableName, "goods_title")
	_tbOriginGoods.FinalPrice = field.NewFloat64(tableName, "final_price")
	_tbOriginGoods.TotalStock = field.NewInt(tableName, "total_stock")
	_tbOriginGoods.ThumbURL = field.NewString(tableName, "thumb_url")
	_tbOriginGoods.PhotoUrls = field.NewString(tableName, "photo_urls")
	_tbOriginGoods.IsNew = field.NewInt8(tableName, "is_new")
	_tbOriginGoods.DetailTitle = field.NewString(tableName, "detail_title")
	_tbOriginGoods.ShippingProvinceID = field.NewInt(tableName, "shipping_province_id")
	_tbOriginGoods.ShippingProvinceName = field.NewString(tableName, "shipping_province_name")
	_tbOriginGoods.ShippingCityID = field.NewInt(tableName, "shipping_city_id")
	_tbOriginGoods.ShippingCityName = field.NewString(tableName, "shipping_city_name")
	_tbOriginGoods.GoodsContent = field.NewString(tableName, "goods_content")
	_tbOriginGoods.Status = field.NewInt8(tableName, "status")
	_tbOriginGoods.CreatedAt = field.NewInt64(tableName, "created_at")

	_tbOriginGoods.fillFieldMap()

	return _tbOriginGoods
}

// tbOriginGoods 淘宝商品源数据表
type tbOriginGoods struct {
	tbOriginGoodsDo

	ALL                  field.Asterisk
	ID                   field.Int64
	GoodsTitle           field.String  // 商品标题
	FinalPrice           field.Float64 // 商品最终价
	TotalStock           field.Int     // 总库存
	ThumbURL             field.String  // 商品缩略图图片
	PhotoUrls            field.String  // 商品相册图列表
	IsNew                field.Int8    // 是否新品 1：新品 0：正常
	DetailTitle          field.String  // 详细页标题
	ShippingProvinceID   field.Int     // 商品发货地省份ID
	ShippingProvinceName field.String  // 商品发货地省份名称
	ShippingCityID       field.Int     // 商品发货地城市ID
	ShippingCityName     field.String  // 商品发货地城市名称
	GoodsContent         field.String  // 商品详情
	Status               field.Int8    // 同步状态 1：未同步 2：已同步
	CreatedAt            field.Int64

	fieldMap map[string]field.Expr
}

func (t tbOriginGoods) Table(newTableName string) *tbOriginGoods {
	t.tbOriginGoodsDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbOriginGoods) As(alias string) *tbOriginGoods {
	t.tbOriginGoodsDo.DO = *(t.tbOriginGoodsDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbOriginGoods) updateTableName(table string) *tbOriginGoods {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.GoodsTitle = field.NewString(table, "goods_title")
	t.FinalPrice = field.NewFloat64(table, "final_price")
	t.TotalStock = field.NewInt(table, "total_stock")
	t.ThumbURL = field.NewString(table, "thumb_url")
	t.PhotoUrls = field.NewString(table, "photo_urls")
	t.IsNew = field.NewInt8(table, "is_new")
	t.DetailTitle = field.NewString(table, "detail_title")
	t.ShippingProvinceID = field.NewInt(table, "shipping_province_id")
	t.ShippingProvinceName = field.NewString(table, "shipping_province_name")
	t.ShippingCityID = field.NewInt(table, "shipping_city_id")
	t.ShippingCityName = field.NewString(table, "shipping_city_name")
	t.GoodsContent = field.NewString(table, "goods_content")
	t.Status = field.NewInt8(table, "status")
	t.CreatedAt = field.NewInt64(table, "created_at")

	t.fillFieldMap()

	return t
}

func (t *tbOriginGoods) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbOriginGoods) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 15)
	t.fieldMap["id"] = t.ID
	t.fieldMap["goods_title"] = t.GoodsTitle
	t.fieldMap["final_price"] = t.FinalPrice
	t.fieldMap["total_stock"] = t.TotalStock
	t.fieldMap["thumb_url"] = t.ThumbURL
	t.fieldMap["photo_urls"] = t.PhotoUrls
	t.fieldMap["is_new"] = t.IsNew
	t.fieldMap["detail_title"] = t.DetailTitle
	t.fieldMap["shipping_province_id"] = t.ShippingProvinceID
	t.fieldMap["shipping_province_name"] = t.ShippingProvinceName
	t.fieldMap["shipping_city_id"] = t.ShippingCityID
	t.fieldMap["shipping_city_name"] = t.ShippingCityName
	t.fieldMap["goods_content"] = t.GoodsContent
	t.fieldMap["status"] = t.Status
	t.fieldMap["created_at"] = t.CreatedAt
}

func (t tbOriginGoods) clone(db *gorm.DB) tbOriginGoods {
	t.tbOriginGoodsDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tbOriginGoods) replaceDB(db *gorm.DB) tbOriginGoods {
	t.tbOriginGoodsDo.ReplaceDB(db)
	return t
}

type tbOriginGoodsDo struct{ gen.DO }

type ITbOriginGoodsDo interface {
	gen.SubQuery
	Debug() ITbOriginGoodsDo
	WithContext(ctx context.Context) ITbOriginGoodsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITbOriginGoodsDo
	WriteDB() ITbOriginGoodsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITbOriginGoodsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITbOriginGoodsDo
	Not(conds ...gen.Condition) ITbOriginGoodsDo
	Or(conds ...gen.Condition) ITbOriginGoodsDo
	Select(conds ...field.Expr) ITbOriginGoodsDo
	Where(conds ...gen.Condition) ITbOriginGoodsDo
	Order(conds ...field.Expr) ITbOriginGoodsDo
	Distinct(cols ...field.Expr) ITbOriginGoodsDo
	Omit(cols ...field.Expr) ITbOriginGoodsDo
	Join(table schema.Tabler, on ...field.Expr) ITbOriginGoodsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITbOriginGoodsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITbOriginGoodsDo
	Group(cols ...field.Expr) ITbOriginGoodsDo
	Having(conds ...gen.Condition) ITbOriginGoodsDo
	Limit(limit int) ITbOriginGoodsDo
	Offset(offset int) ITbOriginGoodsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITbOriginGoodsDo
	Unscoped() ITbOriginGoodsDo
	Create(values ...*model.TbOriginGoods) error
	CreateInBatches(values []*model.TbOriginGoods, batchSize int) error
	Save(values ...*model.TbOriginGoods) error
	First() (*model.TbOriginGoods, error)
	Take() (*model.TbOriginGoods, error)
	Last() (*model.TbOriginGoods, error)
	Find() ([]*model.TbOriginGoods, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbOriginGoods, err error)
	FindInBatches(result *[]*model.TbOriginGoods, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TbOriginGoods) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITbOriginGoodsDo
	Assign(attrs ...field.AssignExpr) ITbOriginGoodsDo
	Joins(fields ...field.RelationField) ITbOriginGoodsDo
	Preload(fields ...field.RelationField) ITbOriginGoodsDo
	FirstOrInit() (*model.TbOriginGoods, error)
	FirstOrCreate() (*model.TbOriginGoods, error)
	FindByPage(offset int, limit int) (result []*model.TbOriginGoods, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITbOriginGoodsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tbOriginGoodsDo) Debug() ITbOriginGoodsDo {
	return t.withDO(t.DO.Debug())
}

func (t tbOriginGoodsDo) WithContext(ctx context.Context) ITbOriginGoodsDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbOriginGoodsDo) ReadDB() ITbOriginGoodsDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbOriginGoodsDo) WriteDB() ITbOriginGoodsDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbOriginGoodsDo) Session(config *gorm.Session) ITbOriginGoodsDo {
	return t.withDO(t.DO.Session(config))
}

func (t tbOriginGoodsDo) Clauses(conds ...clause.Expression) ITbOriginGoodsDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbOriginGoodsDo) Returning(value interface{}, columns ...string) ITbOriginGoodsDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbOriginGoodsDo) Not(conds ...gen.Condition) ITbOriginGoodsDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbOriginGoodsDo) Or(conds ...gen.Condition) ITbOriginGoodsDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbOriginGoodsDo) Select(conds ...field.Expr) ITbOriginGoodsDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbOriginGoodsDo) Where(conds ...gen.Condition) ITbOriginGoodsDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbOriginGoodsDo) Order(conds ...field.Expr) ITbOriginGoodsDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbOriginGoodsDo) Distinct(cols ...field.Expr) ITbOriginGoodsDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbOriginGoodsDo) Omit(cols ...field.Expr) ITbOriginGoodsDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbOriginGoodsDo) Join(table schema.Tabler, on ...field.Expr) ITbOriginGoodsDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbOriginGoodsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITbOriginGoodsDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbOriginGoodsDo) RightJoin(table schema.Tabler, on ...field.Expr) ITbOriginGoodsDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbOriginGoodsDo) Group(cols ...field.Expr) ITbOriginGoodsDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbOriginGoodsDo) Having(conds ...gen.Condition) ITbOriginGoodsDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbOriginGoodsDo) Limit(limit int) ITbOriginGoodsDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbOriginGoodsDo) Offset(offset int) ITbOriginGoodsDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbOriginGoodsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITbOriginGoodsDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbOriginGoodsDo) Unscoped() ITbOriginGoodsDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbOriginGoodsDo) Create(values ...*model.TbOriginGoods) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbOriginGoodsDo) CreateInBatches(values []*model.TbOriginGoods, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbOriginGoodsDo) Save(values ...*model.TbOriginGoods) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbOriginGoodsDo) First() (*model.TbOriginGoods, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbOriginGoods), nil
	}
}

func (t tbOriginGoodsDo) Take() (*model.TbOriginGoods, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbOriginGoods), nil
	}
}

func (t tbOriginGoodsDo) Last() (*model.TbOriginGoods, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbOriginGoods), nil
	}
}

func (t tbOriginGoodsDo) Find() ([]*model.TbOriginGoods, error) {
	result, err := t.DO.Find()
	return result.([]*model.TbOriginGoods), err
}

func (t tbOriginGoodsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbOriginGoods, err error) {
	buf := make([]*model.TbOriginGoods, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbOriginGoodsDo) FindInBatches(result *[]*model.TbOriginGoods, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbOriginGoodsDo) Attrs(attrs ...field.AssignExpr) ITbOriginGoodsDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbOriginGoodsDo) Assign(attrs ...field.AssignExpr) ITbOriginGoodsDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbOriginGoodsDo) Joins(fields ...field.RelationField) ITbOriginGoodsDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbOriginGoodsDo) Preload(fields ...field.RelationField) ITbOriginGoodsDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbOriginGoodsDo) FirstOrInit() (*model.TbOriginGoods, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbOriginGoods), nil
	}
}

func (t tbOriginGoodsDo) FirstOrCreate() (*model.TbOriginGoods, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbOriginGoods), nil
	}
}

func (t tbOriginGoodsDo) FindByPage(offset int, limit int) (result []*model.TbOriginGoods, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbOriginGoodsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbOriginGoodsDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbOriginGoodsDo) Delete(models ...*model.TbOriginGoods) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbOriginGoodsDo) withDO(do gen.Dao) *tbOriginGoodsDo {
	t.DO = *do.(*gen.DO)
	return t
}
