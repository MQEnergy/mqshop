// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newSuggestion(db *gorm.DB, opts ...gen.DOOption) suggestion {
	_suggestion := suggestion{}

	_suggestion.suggestionDo.UseDB(db, opts...)
	_suggestion.suggestionDo.UseModel(&model.Suggestion{})

	tableName := _suggestion.suggestionDo.TableName()
	_suggestion.ALL = field.NewAsterisk(tableName)
	_suggestion.ID = field.NewInt64(tableName, "id")
	_suggestion.MemberID = field.NewInt64(tableName, "member_id")
	_suggestion.Content = field.NewString(tableName, "content")
	_suggestion.Email = field.NewString(tableName, "email")
	_suggestion.Status = field.NewInt8(tableName, "status")
	_suggestion.CreatedAt = field.NewInt64(tableName, "created_at")

	_suggestion.fillFieldMap()

	return _suggestion
}

// suggestion 问题反馈表
type suggestion struct {
	suggestionDo

	ALL       field.Asterisk
	ID        field.Int64
	MemberID  field.Int64  // 用户ID
	Content   field.String // 问题描述
	Email     field.String // email
	Status    field.Int8   // 状态 1：未处理 2：已处理 3：已删除
	CreatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (s suggestion) Table(newTableName string) *suggestion {
	s.suggestionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s suggestion) As(alias string) *suggestion {
	s.suggestionDo.DO = *(s.suggestionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *suggestion) updateTableName(table string) *suggestion {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.MemberID = field.NewInt64(table, "member_id")
	s.Content = field.NewString(table, "content")
	s.Email = field.NewString(table, "email")
	s.Status = field.NewInt8(table, "status")
	s.CreatedAt = field.NewInt64(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *suggestion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *suggestion) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["member_id"] = s.MemberID
	s.fieldMap["content"] = s.Content
	s.fieldMap["email"] = s.Email
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
}

func (s suggestion) clone(db *gorm.DB) suggestion {
	s.suggestionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s suggestion) replaceDB(db *gorm.DB) suggestion {
	s.suggestionDo.ReplaceDB(db)
	return s
}

type suggestionDo struct{ gen.DO }

type ISuggestionDo interface {
	gen.SubQuery
	Debug() ISuggestionDo
	WithContext(ctx context.Context) ISuggestionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISuggestionDo
	WriteDB() ISuggestionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISuggestionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISuggestionDo
	Not(conds ...gen.Condition) ISuggestionDo
	Or(conds ...gen.Condition) ISuggestionDo
	Select(conds ...field.Expr) ISuggestionDo
	Where(conds ...gen.Condition) ISuggestionDo
	Order(conds ...field.Expr) ISuggestionDo
	Distinct(cols ...field.Expr) ISuggestionDo
	Omit(cols ...field.Expr) ISuggestionDo
	Join(table schema.Tabler, on ...field.Expr) ISuggestionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISuggestionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISuggestionDo
	Group(cols ...field.Expr) ISuggestionDo
	Having(conds ...gen.Condition) ISuggestionDo
	Limit(limit int) ISuggestionDo
	Offset(offset int) ISuggestionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISuggestionDo
	Unscoped() ISuggestionDo
	Create(values ...*model.Suggestion) error
	CreateInBatches(values []*model.Suggestion, batchSize int) error
	Save(values ...*model.Suggestion) error
	First() (*model.Suggestion, error)
	Take() (*model.Suggestion, error)
	Last() (*model.Suggestion, error)
	Find() ([]*model.Suggestion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Suggestion, err error)
	FindInBatches(result *[]*model.Suggestion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Suggestion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISuggestionDo
	Assign(attrs ...field.AssignExpr) ISuggestionDo
	Joins(fields ...field.RelationField) ISuggestionDo
	Preload(fields ...field.RelationField) ISuggestionDo
	FirstOrInit() (*model.Suggestion, error)
	FirstOrCreate() (*model.Suggestion, error)
	FindByPage(offset int, limit int) (result []*model.Suggestion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISuggestionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s suggestionDo) Debug() ISuggestionDo {
	return s.withDO(s.DO.Debug())
}

func (s suggestionDo) WithContext(ctx context.Context) ISuggestionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s suggestionDo) ReadDB() ISuggestionDo {
	return s.Clauses(dbresolver.Read)
}

func (s suggestionDo) WriteDB() ISuggestionDo {
	return s.Clauses(dbresolver.Write)
}

func (s suggestionDo) Session(config *gorm.Session) ISuggestionDo {
	return s.withDO(s.DO.Session(config))
}

func (s suggestionDo) Clauses(conds ...clause.Expression) ISuggestionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s suggestionDo) Returning(value interface{}, columns ...string) ISuggestionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s suggestionDo) Not(conds ...gen.Condition) ISuggestionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s suggestionDo) Or(conds ...gen.Condition) ISuggestionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s suggestionDo) Select(conds ...field.Expr) ISuggestionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s suggestionDo) Where(conds ...gen.Condition) ISuggestionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s suggestionDo) Order(conds ...field.Expr) ISuggestionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s suggestionDo) Distinct(cols ...field.Expr) ISuggestionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s suggestionDo) Omit(cols ...field.Expr) ISuggestionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s suggestionDo) Join(table schema.Tabler, on ...field.Expr) ISuggestionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s suggestionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISuggestionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s suggestionDo) RightJoin(table schema.Tabler, on ...field.Expr) ISuggestionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s suggestionDo) Group(cols ...field.Expr) ISuggestionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s suggestionDo) Having(conds ...gen.Condition) ISuggestionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s suggestionDo) Limit(limit int) ISuggestionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s suggestionDo) Offset(offset int) ISuggestionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s suggestionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISuggestionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s suggestionDo) Unscoped() ISuggestionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s suggestionDo) Create(values ...*model.Suggestion) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s suggestionDo) CreateInBatches(values []*model.Suggestion, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s suggestionDo) Save(values ...*model.Suggestion) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s suggestionDo) First() (*model.Suggestion, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Suggestion), nil
	}
}

func (s suggestionDo) Take() (*model.Suggestion, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Suggestion), nil
	}
}

func (s suggestionDo) Last() (*model.Suggestion, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Suggestion), nil
	}
}

func (s suggestionDo) Find() ([]*model.Suggestion, error) {
	result, err := s.DO.Find()
	return result.([]*model.Suggestion), err
}

func (s suggestionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Suggestion, err error) {
	buf := make([]*model.Suggestion, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s suggestionDo) FindInBatches(result *[]*model.Suggestion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s suggestionDo) Attrs(attrs ...field.AssignExpr) ISuggestionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s suggestionDo) Assign(attrs ...field.AssignExpr) ISuggestionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s suggestionDo) Joins(fields ...field.RelationField) ISuggestionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s suggestionDo) Preload(fields ...field.RelationField) ISuggestionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s suggestionDo) FirstOrInit() (*model.Suggestion, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Suggestion), nil
	}
}

func (s suggestionDo) FirstOrCreate() (*model.Suggestion, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Suggestion), nil
	}
}

func (s suggestionDo) FindByPage(offset int, limit int) (result []*model.Suggestion, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s suggestionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s suggestionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s suggestionDo) Delete(models ...*model.Suggestion) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *suggestionDo) withDO(do gen.Dao) *suggestionDo {
	s.DO = *do.(*gen.DO)
	return s
}
