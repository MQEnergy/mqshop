// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newOrderPayLog(db *gorm.DB, opts ...gen.DOOption) orderPayLog {
	_orderPayLog := orderPayLog{}

	_orderPayLog.orderPayLogDo.UseDB(db, opts...)
	_orderPayLog.orderPayLogDo.UseModel(&model.OrderPayLog{})

	tableName := _orderPayLog.orderPayLogDo.TableName()
	_orderPayLog.ALL = field.NewAsterisk(tableName)
	_orderPayLog.ID = field.NewInt64(tableName, "id")
	_orderPayLog.OrderNo = field.NewString(tableName, "order_no")
	_orderPayLog.Subject = field.NewString(tableName, "subject")
	_orderPayLog.TradeNo = field.NewString(tableName, "trade_no")
	_orderPayLog.TradeStatus = field.NewString(tableName, "trade_status")
	_orderPayLog.PayType = field.NewInt8(tableName, "pay_type")
	_orderPayLog.TotalAmount = field.NewFloat64(tableName, "total_amount")
	_orderPayLog.CreatedAt = field.NewInt64(tableName, "created_at")

	_orderPayLog.fillFieldMap()

	return _orderPayLog
}

// orderPayLog 订单支付交易明细表
type orderPayLog struct {
	orderPayLogDo

	ALL         field.Asterisk
	ID          field.Int64
	OrderNo     field.String  // 订单号
	Subject     field.String  // 名称
	TradeNo     field.String  // 支付交易号
	TradeStatus field.String  // 支付状态
	PayType     field.Int8    // 支付类型 1：支付宝 2：微信
	TotalAmount field.Float64 // 订单金额（元）
	CreatedAt   field.Int64

	fieldMap map[string]field.Expr
}

func (o orderPayLog) Table(newTableName string) *orderPayLog {
	o.orderPayLogDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderPayLog) As(alias string) *orderPayLog {
	o.orderPayLogDo.DO = *(o.orderPayLogDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderPayLog) updateTableName(table string) *orderPayLog {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.OrderNo = field.NewString(table, "order_no")
	o.Subject = field.NewString(table, "subject")
	o.TradeNo = field.NewString(table, "trade_no")
	o.TradeStatus = field.NewString(table, "trade_status")
	o.PayType = field.NewInt8(table, "pay_type")
	o.TotalAmount = field.NewFloat64(table, "total_amount")
	o.CreatedAt = field.NewInt64(table, "created_at")

	o.fillFieldMap()

	return o
}

func (o *orderPayLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderPayLog) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 8)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_no"] = o.OrderNo
	o.fieldMap["subject"] = o.Subject
	o.fieldMap["trade_no"] = o.TradeNo
	o.fieldMap["trade_status"] = o.TradeStatus
	o.fieldMap["pay_type"] = o.PayType
	o.fieldMap["total_amount"] = o.TotalAmount
	o.fieldMap["created_at"] = o.CreatedAt
}

func (o orderPayLog) clone(db *gorm.DB) orderPayLog {
	o.orderPayLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderPayLog) replaceDB(db *gorm.DB) orderPayLog {
	o.orderPayLogDo.ReplaceDB(db)
	return o
}

type orderPayLogDo struct{ gen.DO }

type IOrderPayLogDo interface {
	gen.SubQuery
	Debug() IOrderPayLogDo
	WithContext(ctx context.Context) IOrderPayLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderPayLogDo
	WriteDB() IOrderPayLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderPayLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderPayLogDo
	Not(conds ...gen.Condition) IOrderPayLogDo
	Or(conds ...gen.Condition) IOrderPayLogDo
	Select(conds ...field.Expr) IOrderPayLogDo
	Where(conds ...gen.Condition) IOrderPayLogDo
	Order(conds ...field.Expr) IOrderPayLogDo
	Distinct(cols ...field.Expr) IOrderPayLogDo
	Omit(cols ...field.Expr) IOrderPayLogDo
	Join(table schema.Tabler, on ...field.Expr) IOrderPayLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderPayLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderPayLogDo
	Group(cols ...field.Expr) IOrderPayLogDo
	Having(conds ...gen.Condition) IOrderPayLogDo
	Limit(limit int) IOrderPayLogDo
	Offset(offset int) IOrderPayLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderPayLogDo
	Unscoped() IOrderPayLogDo
	Create(values ...*model.OrderPayLog) error
	CreateInBatches(values []*model.OrderPayLog, batchSize int) error
	Save(values ...*model.OrderPayLog) error
	First() (*model.OrderPayLog, error)
	Take() (*model.OrderPayLog, error)
	Last() (*model.OrderPayLog, error)
	Find() ([]*model.OrderPayLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderPayLog, err error)
	FindInBatches(result *[]*model.OrderPayLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrderPayLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderPayLogDo
	Assign(attrs ...field.AssignExpr) IOrderPayLogDo
	Joins(fields ...field.RelationField) IOrderPayLogDo
	Preload(fields ...field.RelationField) IOrderPayLogDo
	FirstOrInit() (*model.OrderPayLog, error)
	FirstOrCreate() (*model.OrderPayLog, error)
	FindByPage(offset int, limit int) (result []*model.OrderPayLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderPayLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderPayLogDo) Debug() IOrderPayLogDo {
	return o.withDO(o.DO.Debug())
}

func (o orderPayLogDo) WithContext(ctx context.Context) IOrderPayLogDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderPayLogDo) ReadDB() IOrderPayLogDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderPayLogDo) WriteDB() IOrderPayLogDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderPayLogDo) Session(config *gorm.Session) IOrderPayLogDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderPayLogDo) Clauses(conds ...clause.Expression) IOrderPayLogDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderPayLogDo) Returning(value interface{}, columns ...string) IOrderPayLogDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderPayLogDo) Not(conds ...gen.Condition) IOrderPayLogDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderPayLogDo) Or(conds ...gen.Condition) IOrderPayLogDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderPayLogDo) Select(conds ...field.Expr) IOrderPayLogDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderPayLogDo) Where(conds ...gen.Condition) IOrderPayLogDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderPayLogDo) Order(conds ...field.Expr) IOrderPayLogDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderPayLogDo) Distinct(cols ...field.Expr) IOrderPayLogDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderPayLogDo) Omit(cols ...field.Expr) IOrderPayLogDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderPayLogDo) Join(table schema.Tabler, on ...field.Expr) IOrderPayLogDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderPayLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderPayLogDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderPayLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderPayLogDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderPayLogDo) Group(cols ...field.Expr) IOrderPayLogDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderPayLogDo) Having(conds ...gen.Condition) IOrderPayLogDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderPayLogDo) Limit(limit int) IOrderPayLogDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderPayLogDo) Offset(offset int) IOrderPayLogDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderPayLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderPayLogDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderPayLogDo) Unscoped() IOrderPayLogDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderPayLogDo) Create(values ...*model.OrderPayLog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderPayLogDo) CreateInBatches(values []*model.OrderPayLog, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderPayLogDo) Save(values ...*model.OrderPayLog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderPayLogDo) First() (*model.OrderPayLog, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPayLog), nil
	}
}

func (o orderPayLogDo) Take() (*model.OrderPayLog, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPayLog), nil
	}
}

func (o orderPayLogDo) Last() (*model.OrderPayLog, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPayLog), nil
	}
}

func (o orderPayLogDo) Find() ([]*model.OrderPayLog, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderPayLog), err
}

func (o orderPayLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderPayLog, err error) {
	buf := make([]*model.OrderPayLog, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderPayLogDo) FindInBatches(result *[]*model.OrderPayLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderPayLogDo) Attrs(attrs ...field.AssignExpr) IOrderPayLogDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderPayLogDo) Assign(attrs ...field.AssignExpr) IOrderPayLogDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderPayLogDo) Joins(fields ...field.RelationField) IOrderPayLogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderPayLogDo) Preload(fields ...field.RelationField) IOrderPayLogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderPayLogDo) FirstOrInit() (*model.OrderPayLog, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPayLog), nil
	}
}

func (o orderPayLogDo) FirstOrCreate() (*model.OrderPayLog, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderPayLog), nil
	}
}

func (o orderPayLogDo) FindByPage(offset int, limit int) (result []*model.OrderPayLog, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderPayLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderPayLogDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderPayLogDo) Delete(models ...*model.OrderPayLog) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderPayLogDo) withDO(do gen.Dao) *orderPayLogDo {
	o.DO = *do.(*gen.DO)
	return o
}
