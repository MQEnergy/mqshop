// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newBanner(db *gorm.DB, opts ...gen.DOOption) banner {
	_banner := banner{}

	_banner.bannerDo.UseDB(db, opts...)
	_banner.bannerDo.UseModel(&model.Banner{})

	tableName := _banner.bannerDo.TableName()
	_banner.ALL = field.NewAsterisk(tableName)
	_banner.ID = field.NewInt64(tableName, "id")
	_banner.CateID = field.NewInt64(tableName, "cate_id")
	_banner.Title = field.NewString(tableName, "title")
	_banner.Subtitle = field.NewString(tableName, "subtitle")
	_banner.PicURL = field.NewString(tableName, "pic_url")
	_banner.LinkURL = field.NewString(tableName, "link_url")
	_banner.SortOrder = field.NewInt(tableName, "sort_order")
	_banner.CreatedAt = field.NewInt64(tableName, "created_at")
	_banner.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_banner.fillFieldMap()

	return _banner
}

// banner 轮播图表
type banner struct {
	bannerDo

	ALL       field.Asterisk
	ID        field.Int64
	CateID    field.Int64  // 分类ID
	Title     field.String // 标题
	Subtitle  field.String // 副标题
	PicURL    field.String // 图片地址
	LinkURL   field.String // 图片跳转链接地址
	SortOrder field.Int    // 排序
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (b banner) Table(newTableName string) *banner {
	b.bannerDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b banner) As(alias string) *banner {
	b.bannerDo.DO = *(b.bannerDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *banner) updateTableName(table string) *banner {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.CateID = field.NewInt64(table, "cate_id")
	b.Title = field.NewString(table, "title")
	b.Subtitle = field.NewString(table, "subtitle")
	b.PicURL = field.NewString(table, "pic_url")
	b.LinkURL = field.NewString(table, "link_url")
	b.SortOrder = field.NewInt(table, "sort_order")
	b.CreatedAt = field.NewInt64(table, "created_at")
	b.UpdatedAt = field.NewInt64(table, "updated_at")

	b.fillFieldMap()

	return b
}

func (b *banner) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *banner) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 9)
	b.fieldMap["id"] = b.ID
	b.fieldMap["cate_id"] = b.CateID
	b.fieldMap["title"] = b.Title
	b.fieldMap["subtitle"] = b.Subtitle
	b.fieldMap["pic_url"] = b.PicURL
	b.fieldMap["link_url"] = b.LinkURL
	b.fieldMap["sort_order"] = b.SortOrder
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
}

func (b banner) clone(db *gorm.DB) banner {
	b.bannerDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b banner) replaceDB(db *gorm.DB) banner {
	b.bannerDo.ReplaceDB(db)
	return b
}

type bannerDo struct{ gen.DO }

type IBannerDo interface {
	gen.SubQuery
	Debug() IBannerDo
	WithContext(ctx context.Context) IBannerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBannerDo
	WriteDB() IBannerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBannerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBannerDo
	Not(conds ...gen.Condition) IBannerDo
	Or(conds ...gen.Condition) IBannerDo
	Select(conds ...field.Expr) IBannerDo
	Where(conds ...gen.Condition) IBannerDo
	Order(conds ...field.Expr) IBannerDo
	Distinct(cols ...field.Expr) IBannerDo
	Omit(cols ...field.Expr) IBannerDo
	Join(table schema.Tabler, on ...field.Expr) IBannerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBannerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBannerDo
	Group(cols ...field.Expr) IBannerDo
	Having(conds ...gen.Condition) IBannerDo
	Limit(limit int) IBannerDo
	Offset(offset int) IBannerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBannerDo
	Unscoped() IBannerDo
	Create(values ...*model.Banner) error
	CreateInBatches(values []*model.Banner, batchSize int) error
	Save(values ...*model.Banner) error
	First() (*model.Banner, error)
	Take() (*model.Banner, error)
	Last() (*model.Banner, error)
	Find() ([]*model.Banner, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Banner, err error)
	FindInBatches(result *[]*model.Banner, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Banner) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBannerDo
	Assign(attrs ...field.AssignExpr) IBannerDo
	Joins(fields ...field.RelationField) IBannerDo
	Preload(fields ...field.RelationField) IBannerDo
	FirstOrInit() (*model.Banner, error)
	FirstOrCreate() (*model.Banner, error)
	FindByPage(offset int, limit int) (result []*model.Banner, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBannerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bannerDo) Debug() IBannerDo {
	return b.withDO(b.DO.Debug())
}

func (b bannerDo) WithContext(ctx context.Context) IBannerDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bannerDo) ReadDB() IBannerDo {
	return b.Clauses(dbresolver.Read)
}

func (b bannerDo) WriteDB() IBannerDo {
	return b.Clauses(dbresolver.Write)
}

func (b bannerDo) Session(config *gorm.Session) IBannerDo {
	return b.withDO(b.DO.Session(config))
}

func (b bannerDo) Clauses(conds ...clause.Expression) IBannerDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bannerDo) Returning(value interface{}, columns ...string) IBannerDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bannerDo) Not(conds ...gen.Condition) IBannerDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bannerDo) Or(conds ...gen.Condition) IBannerDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bannerDo) Select(conds ...field.Expr) IBannerDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bannerDo) Where(conds ...gen.Condition) IBannerDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bannerDo) Order(conds ...field.Expr) IBannerDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bannerDo) Distinct(cols ...field.Expr) IBannerDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bannerDo) Omit(cols ...field.Expr) IBannerDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bannerDo) Join(table schema.Tabler, on ...field.Expr) IBannerDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bannerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBannerDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bannerDo) RightJoin(table schema.Tabler, on ...field.Expr) IBannerDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bannerDo) Group(cols ...field.Expr) IBannerDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bannerDo) Having(conds ...gen.Condition) IBannerDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bannerDo) Limit(limit int) IBannerDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bannerDo) Offset(offset int) IBannerDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bannerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBannerDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bannerDo) Unscoped() IBannerDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bannerDo) Create(values ...*model.Banner) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bannerDo) CreateInBatches(values []*model.Banner, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bannerDo) Save(values ...*model.Banner) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bannerDo) First() (*model.Banner, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Banner), nil
	}
}

func (b bannerDo) Take() (*model.Banner, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Banner), nil
	}
}

func (b bannerDo) Last() (*model.Banner, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Banner), nil
	}
}

func (b bannerDo) Find() ([]*model.Banner, error) {
	result, err := b.DO.Find()
	return result.([]*model.Banner), err
}

func (b bannerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Banner, err error) {
	buf := make([]*model.Banner, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bannerDo) FindInBatches(result *[]*model.Banner, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bannerDo) Attrs(attrs ...field.AssignExpr) IBannerDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bannerDo) Assign(attrs ...field.AssignExpr) IBannerDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bannerDo) Joins(fields ...field.RelationField) IBannerDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bannerDo) Preload(fields ...field.RelationField) IBannerDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bannerDo) FirstOrInit() (*model.Banner, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Banner), nil
	}
}

func (b bannerDo) FirstOrCreate() (*model.Banner, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Banner), nil
	}
}

func (b bannerDo) FindByPage(offset int, limit int) (result []*model.Banner, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bannerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bannerDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bannerDo) Delete(models ...*model.Banner) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bannerDo) withDO(do gen.Dao) *bannerDo {
	b.DO = *do.(*gen.DO)
	return b
}
