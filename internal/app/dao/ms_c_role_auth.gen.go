// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newCRoleAuth(db *gorm.DB, opts ...gen.DOOption) cRoleAuth {
	_cRoleAuth := cRoleAuth{}

	_cRoleAuth.cRoleAuthDo.UseDB(db, opts...)
	_cRoleAuth.cRoleAuthDo.UseModel(&model.CRoleAuth{})

	tableName := _cRoleAuth.cRoleAuthDo.TableName()
	_cRoleAuth.ALL = field.NewAsterisk(tableName)
	_cRoleAuth.ID = field.NewInt(tableName, "id")
	_cRoleAuth.RoleID = field.NewInt(tableName, "role_id")
	_cRoleAuth.MenuIds = field.NewString(tableName, "menu_ids")

	_cRoleAuth.fillFieldMap()

	return _cRoleAuth
}

type cRoleAuth struct {
	cRoleAuthDo

	ALL     field.Asterisk
	ID      field.Int
	RoleID  field.Int    // 角色ID
	MenuIds field.String // 菜单id列表 1,2,3...

	fieldMap map[string]field.Expr
}

func (c cRoleAuth) Table(newTableName string) *cRoleAuth {
	c.cRoleAuthDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cRoleAuth) As(alias string) *cRoleAuth {
	c.cRoleAuthDo.DO = *(c.cRoleAuthDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cRoleAuth) updateTableName(table string) *cRoleAuth {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt(table, "id")
	c.RoleID = field.NewInt(table, "role_id")
	c.MenuIds = field.NewString(table, "menu_ids")

	c.fillFieldMap()

	return c
}

func (c *cRoleAuth) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cRoleAuth) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["id"] = c.ID
	c.fieldMap["role_id"] = c.RoleID
	c.fieldMap["menu_ids"] = c.MenuIds
}

func (c cRoleAuth) clone(db *gorm.DB) cRoleAuth {
	c.cRoleAuthDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cRoleAuth) replaceDB(db *gorm.DB) cRoleAuth {
	c.cRoleAuthDo.ReplaceDB(db)
	return c
}

type cRoleAuthDo struct{ gen.DO }

type ICRoleAuthDo interface {
	gen.SubQuery
	Debug() ICRoleAuthDo
	WithContext(ctx context.Context) ICRoleAuthDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICRoleAuthDo
	WriteDB() ICRoleAuthDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICRoleAuthDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICRoleAuthDo
	Not(conds ...gen.Condition) ICRoleAuthDo
	Or(conds ...gen.Condition) ICRoleAuthDo
	Select(conds ...field.Expr) ICRoleAuthDo
	Where(conds ...gen.Condition) ICRoleAuthDo
	Order(conds ...field.Expr) ICRoleAuthDo
	Distinct(cols ...field.Expr) ICRoleAuthDo
	Omit(cols ...field.Expr) ICRoleAuthDo
	Join(table schema.Tabler, on ...field.Expr) ICRoleAuthDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICRoleAuthDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICRoleAuthDo
	Group(cols ...field.Expr) ICRoleAuthDo
	Having(conds ...gen.Condition) ICRoleAuthDo
	Limit(limit int) ICRoleAuthDo
	Offset(offset int) ICRoleAuthDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICRoleAuthDo
	Unscoped() ICRoleAuthDo
	Create(values ...*model.CRoleAuth) error
	CreateInBatches(values []*model.CRoleAuth, batchSize int) error
	Save(values ...*model.CRoleAuth) error
	First() (*model.CRoleAuth, error)
	Take() (*model.CRoleAuth, error)
	Last() (*model.CRoleAuth, error)
	Find() ([]*model.CRoleAuth, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CRoleAuth, err error)
	FindInBatches(result *[]*model.CRoleAuth, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CRoleAuth) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICRoleAuthDo
	Assign(attrs ...field.AssignExpr) ICRoleAuthDo
	Joins(fields ...field.RelationField) ICRoleAuthDo
	Preload(fields ...field.RelationField) ICRoleAuthDo
	FirstOrInit() (*model.CRoleAuth, error)
	FirstOrCreate() (*model.CRoleAuth, error)
	FindByPage(offset int, limit int) (result []*model.CRoleAuth, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICRoleAuthDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cRoleAuthDo) Debug() ICRoleAuthDo {
	return c.withDO(c.DO.Debug())
}

func (c cRoleAuthDo) WithContext(ctx context.Context) ICRoleAuthDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cRoleAuthDo) ReadDB() ICRoleAuthDo {
	return c.Clauses(dbresolver.Read)
}

func (c cRoleAuthDo) WriteDB() ICRoleAuthDo {
	return c.Clauses(dbresolver.Write)
}

func (c cRoleAuthDo) Session(config *gorm.Session) ICRoleAuthDo {
	return c.withDO(c.DO.Session(config))
}

func (c cRoleAuthDo) Clauses(conds ...clause.Expression) ICRoleAuthDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cRoleAuthDo) Returning(value interface{}, columns ...string) ICRoleAuthDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cRoleAuthDo) Not(conds ...gen.Condition) ICRoleAuthDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cRoleAuthDo) Or(conds ...gen.Condition) ICRoleAuthDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cRoleAuthDo) Select(conds ...field.Expr) ICRoleAuthDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cRoleAuthDo) Where(conds ...gen.Condition) ICRoleAuthDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cRoleAuthDo) Order(conds ...field.Expr) ICRoleAuthDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cRoleAuthDo) Distinct(cols ...field.Expr) ICRoleAuthDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cRoleAuthDo) Omit(cols ...field.Expr) ICRoleAuthDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cRoleAuthDo) Join(table schema.Tabler, on ...field.Expr) ICRoleAuthDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cRoleAuthDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICRoleAuthDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cRoleAuthDo) RightJoin(table schema.Tabler, on ...field.Expr) ICRoleAuthDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cRoleAuthDo) Group(cols ...field.Expr) ICRoleAuthDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cRoleAuthDo) Having(conds ...gen.Condition) ICRoleAuthDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cRoleAuthDo) Limit(limit int) ICRoleAuthDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cRoleAuthDo) Offset(offset int) ICRoleAuthDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cRoleAuthDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICRoleAuthDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cRoleAuthDo) Unscoped() ICRoleAuthDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cRoleAuthDo) Create(values ...*model.CRoleAuth) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cRoleAuthDo) CreateInBatches(values []*model.CRoleAuth, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cRoleAuthDo) Save(values ...*model.CRoleAuth) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cRoleAuthDo) First() (*model.CRoleAuth, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CRoleAuth), nil
	}
}

func (c cRoleAuthDo) Take() (*model.CRoleAuth, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CRoleAuth), nil
	}
}

func (c cRoleAuthDo) Last() (*model.CRoleAuth, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CRoleAuth), nil
	}
}

func (c cRoleAuthDo) Find() ([]*model.CRoleAuth, error) {
	result, err := c.DO.Find()
	return result.([]*model.CRoleAuth), err
}

func (c cRoleAuthDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CRoleAuth, err error) {
	buf := make([]*model.CRoleAuth, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cRoleAuthDo) FindInBatches(result *[]*model.CRoleAuth, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cRoleAuthDo) Attrs(attrs ...field.AssignExpr) ICRoleAuthDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cRoleAuthDo) Assign(attrs ...field.AssignExpr) ICRoleAuthDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cRoleAuthDo) Joins(fields ...field.RelationField) ICRoleAuthDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cRoleAuthDo) Preload(fields ...field.RelationField) ICRoleAuthDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cRoleAuthDo) FirstOrInit() (*model.CRoleAuth, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CRoleAuth), nil
	}
}

func (c cRoleAuthDo) FirstOrCreate() (*model.CRoleAuth, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CRoleAuth), nil
	}
}

func (c cRoleAuthDo) FindByPage(offset int, limit int) (result []*model.CRoleAuth, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cRoleAuthDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cRoleAuthDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cRoleAuthDo) Delete(models ...*model.CRoleAuth) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cRoleAuthDo) withDO(do gen.Dao) *cRoleAuthDo {
	c.DO = *do.(*gen.DO)
	return c
}
