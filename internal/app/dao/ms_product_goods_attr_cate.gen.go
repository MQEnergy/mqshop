// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newProductGoodsAttrCate(db *gorm.DB, opts ...gen.DOOption) productGoodsAttrCate {
	_productGoodsAttrCate := productGoodsAttrCate{}

	_productGoodsAttrCate.productGoodsAttrCateDo.UseDB(db, opts...)
	_productGoodsAttrCate.productGoodsAttrCateDo.UseModel(&model.ProductGoodsAttrCate{})

	tableName := _productGoodsAttrCate.productGoodsAttrCateDo.TableName()
	_productGoodsAttrCate.ALL = field.NewAsterisk(tableName)
	_productGoodsAttrCate.ID = field.NewInt64(tableName, "id")
	_productGoodsAttrCate.CateName = field.NewString(tableName, "cate_name")
	_productGoodsAttrCate.Status = field.NewInt8(tableName, "status")
	_productGoodsAttrCate.CreatedAt = field.NewInt64(tableName, "created_at")
	_productGoodsAttrCate.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_productGoodsAttrCate.fillFieldMap()

	return _productGoodsAttrCate
}

// productGoodsAttrCate 商品属性分类表
type productGoodsAttrCate struct {
	productGoodsAttrCateDo

	ALL       field.Asterisk
	ID        field.Int64
	CateName  field.String // 分类名称
	Status    field.Int8   // 状态 1：正常 0：下架
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (p productGoodsAttrCate) Table(newTableName string) *productGoodsAttrCate {
	p.productGoodsAttrCateDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p productGoodsAttrCate) As(alias string) *productGoodsAttrCate {
	p.productGoodsAttrCateDo.DO = *(p.productGoodsAttrCateDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *productGoodsAttrCate) updateTableName(table string) *productGoodsAttrCate {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CateName = field.NewString(table, "cate_name")
	p.Status = field.NewInt8(table, "status")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *productGoodsAttrCate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *productGoodsAttrCate) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["id"] = p.ID
	p.fieldMap["cate_name"] = p.CateName
	p.fieldMap["status"] = p.Status
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p productGoodsAttrCate) clone(db *gorm.DB) productGoodsAttrCate {
	p.productGoodsAttrCateDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p productGoodsAttrCate) replaceDB(db *gorm.DB) productGoodsAttrCate {
	p.productGoodsAttrCateDo.ReplaceDB(db)
	return p
}

type productGoodsAttrCateDo struct{ gen.DO }

type IProductGoodsAttrCateDo interface {
	gen.SubQuery
	Debug() IProductGoodsAttrCateDo
	WithContext(ctx context.Context) IProductGoodsAttrCateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProductGoodsAttrCateDo
	WriteDB() IProductGoodsAttrCateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProductGoodsAttrCateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProductGoodsAttrCateDo
	Not(conds ...gen.Condition) IProductGoodsAttrCateDo
	Or(conds ...gen.Condition) IProductGoodsAttrCateDo
	Select(conds ...field.Expr) IProductGoodsAttrCateDo
	Where(conds ...gen.Condition) IProductGoodsAttrCateDo
	Order(conds ...field.Expr) IProductGoodsAttrCateDo
	Distinct(cols ...field.Expr) IProductGoodsAttrCateDo
	Omit(cols ...field.Expr) IProductGoodsAttrCateDo
	Join(table schema.Tabler, on ...field.Expr) IProductGoodsAttrCateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProductGoodsAttrCateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProductGoodsAttrCateDo
	Group(cols ...field.Expr) IProductGoodsAttrCateDo
	Having(conds ...gen.Condition) IProductGoodsAttrCateDo
	Limit(limit int) IProductGoodsAttrCateDo
	Offset(offset int) IProductGoodsAttrCateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProductGoodsAttrCateDo
	Unscoped() IProductGoodsAttrCateDo
	Create(values ...*model.ProductGoodsAttrCate) error
	CreateInBatches(values []*model.ProductGoodsAttrCate, batchSize int) error
	Save(values ...*model.ProductGoodsAttrCate) error
	First() (*model.ProductGoodsAttrCate, error)
	Take() (*model.ProductGoodsAttrCate, error)
	Last() (*model.ProductGoodsAttrCate, error)
	Find() ([]*model.ProductGoodsAttrCate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductGoodsAttrCate, err error)
	FindInBatches(result *[]*model.ProductGoodsAttrCate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProductGoodsAttrCate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProductGoodsAttrCateDo
	Assign(attrs ...field.AssignExpr) IProductGoodsAttrCateDo
	Joins(fields ...field.RelationField) IProductGoodsAttrCateDo
	Preload(fields ...field.RelationField) IProductGoodsAttrCateDo
	FirstOrInit() (*model.ProductGoodsAttrCate, error)
	FirstOrCreate() (*model.ProductGoodsAttrCate, error)
	FindByPage(offset int, limit int) (result []*model.ProductGoodsAttrCate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProductGoodsAttrCateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p productGoodsAttrCateDo) Debug() IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Debug())
}

func (p productGoodsAttrCateDo) WithContext(ctx context.Context) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productGoodsAttrCateDo) ReadDB() IProductGoodsAttrCateDo {
	return p.Clauses(dbresolver.Read)
}

func (p productGoodsAttrCateDo) WriteDB() IProductGoodsAttrCateDo {
	return p.Clauses(dbresolver.Write)
}

func (p productGoodsAttrCateDo) Session(config *gorm.Session) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Session(config))
}

func (p productGoodsAttrCateDo) Clauses(conds ...clause.Expression) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productGoodsAttrCateDo) Returning(value interface{}, columns ...string) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productGoodsAttrCateDo) Not(conds ...gen.Condition) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productGoodsAttrCateDo) Or(conds ...gen.Condition) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productGoodsAttrCateDo) Select(conds ...field.Expr) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productGoodsAttrCateDo) Where(conds ...gen.Condition) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productGoodsAttrCateDo) Order(conds ...field.Expr) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productGoodsAttrCateDo) Distinct(cols ...field.Expr) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productGoodsAttrCateDo) Omit(cols ...field.Expr) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productGoodsAttrCateDo) Join(table schema.Tabler, on ...field.Expr) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productGoodsAttrCateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productGoodsAttrCateDo) RightJoin(table schema.Tabler, on ...field.Expr) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productGoodsAttrCateDo) Group(cols ...field.Expr) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productGoodsAttrCateDo) Having(conds ...gen.Condition) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productGoodsAttrCateDo) Limit(limit int) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productGoodsAttrCateDo) Offset(offset int) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productGoodsAttrCateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productGoodsAttrCateDo) Unscoped() IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productGoodsAttrCateDo) Create(values ...*model.ProductGoodsAttrCate) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productGoodsAttrCateDo) CreateInBatches(values []*model.ProductGoodsAttrCate, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productGoodsAttrCateDo) Save(values ...*model.ProductGoodsAttrCate) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productGoodsAttrCateDo) First() (*model.ProductGoodsAttrCate, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsAttrCate), nil
	}
}

func (p productGoodsAttrCateDo) Take() (*model.ProductGoodsAttrCate, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsAttrCate), nil
	}
}

func (p productGoodsAttrCateDo) Last() (*model.ProductGoodsAttrCate, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsAttrCate), nil
	}
}

func (p productGoodsAttrCateDo) Find() ([]*model.ProductGoodsAttrCate, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProductGoodsAttrCate), err
}

func (p productGoodsAttrCateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductGoodsAttrCate, err error) {
	buf := make([]*model.ProductGoodsAttrCate, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productGoodsAttrCateDo) FindInBatches(result *[]*model.ProductGoodsAttrCate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productGoodsAttrCateDo) Attrs(attrs ...field.AssignExpr) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productGoodsAttrCateDo) Assign(attrs ...field.AssignExpr) IProductGoodsAttrCateDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productGoodsAttrCateDo) Joins(fields ...field.RelationField) IProductGoodsAttrCateDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productGoodsAttrCateDo) Preload(fields ...field.RelationField) IProductGoodsAttrCateDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productGoodsAttrCateDo) FirstOrInit() (*model.ProductGoodsAttrCate, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsAttrCate), nil
	}
}

func (p productGoodsAttrCateDo) FirstOrCreate() (*model.ProductGoodsAttrCate, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsAttrCate), nil
	}
}

func (p productGoodsAttrCateDo) FindByPage(offset int, limit int) (result []*model.ProductGoodsAttrCate, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productGoodsAttrCateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productGoodsAttrCateDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productGoodsAttrCateDo) Delete(models ...*model.ProductGoodsAttrCate) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productGoodsAttrCateDo) withDO(do gen.Dao) *productGoodsAttrCateDo {
	p.DO = *do.(*gen.DO)
	return p
}
