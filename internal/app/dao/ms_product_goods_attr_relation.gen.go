// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newProductGoodsAttrRelation(db *gorm.DB, opts ...gen.DOOption) productGoodsAttrRelation {
	_productGoodsAttrRelation := productGoodsAttrRelation{}

	_productGoodsAttrRelation.productGoodsAttrRelationDo.UseDB(db, opts...)
	_productGoodsAttrRelation.productGoodsAttrRelationDo.UseModel(&model.ProductGoodsAttrRelation{})

	tableName := _productGoodsAttrRelation.productGoodsAttrRelationDo.TableName()
	_productGoodsAttrRelation.ALL = field.NewAsterisk(tableName)
	_productGoodsAttrRelation.ID = field.NewInt64(tableName, "id")
	_productGoodsAttrRelation.GoodsID = field.NewInt64(tableName, "goods_id")
	_productGoodsAttrRelation.AttrID = field.NewInt64(tableName, "attr_id")
	_productGoodsAttrRelation.AttrType = field.NewInt8(tableName, "attr_type")
	_productGoodsAttrRelation.AttrName = field.NewString(tableName, "attr_name")
	_productGoodsAttrRelation.AttrValue = field.NewString(tableName, "attr_value")
	_productGoodsAttrRelation.CreatedAt = field.NewInt64(tableName, "created_at")
	_productGoodsAttrRelation.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_productGoodsAttrRelation.fillFieldMap()

	return _productGoodsAttrRelation
}

// productGoodsAttrRelation 商户属性关联表
type productGoodsAttrRelation struct {
	productGoodsAttrRelationDo

	ALL       field.Asterisk
	ID        field.Int64
	GoodsID   field.Int64  // 商品ID
	AttrID    field.Int64  // 属性ID
	AttrType  field.Int8   // 属性类型 1：属性 2：参数
	AttrName  field.String // 商品属性名称 如：颜色
	AttrValue field.String // 商品属性值 如：金色,银色,黄色
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (p productGoodsAttrRelation) Table(newTableName string) *productGoodsAttrRelation {
	p.productGoodsAttrRelationDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p productGoodsAttrRelation) As(alias string) *productGoodsAttrRelation {
	p.productGoodsAttrRelationDo.DO = *(p.productGoodsAttrRelationDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *productGoodsAttrRelation) updateTableName(table string) *productGoodsAttrRelation {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.GoodsID = field.NewInt64(table, "goods_id")
	p.AttrID = field.NewInt64(table, "attr_id")
	p.AttrType = field.NewInt8(table, "attr_type")
	p.AttrName = field.NewString(table, "attr_name")
	p.AttrValue = field.NewString(table, "attr_value")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *productGoodsAttrRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *productGoodsAttrRelation) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["goods_id"] = p.GoodsID
	p.fieldMap["attr_id"] = p.AttrID
	p.fieldMap["attr_type"] = p.AttrType
	p.fieldMap["attr_name"] = p.AttrName
	p.fieldMap["attr_value"] = p.AttrValue
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p productGoodsAttrRelation) clone(db *gorm.DB) productGoodsAttrRelation {
	p.productGoodsAttrRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p productGoodsAttrRelation) replaceDB(db *gorm.DB) productGoodsAttrRelation {
	p.productGoodsAttrRelationDo.ReplaceDB(db)
	return p
}

type productGoodsAttrRelationDo struct{ gen.DO }

type IProductGoodsAttrRelationDo interface {
	gen.SubQuery
	Debug() IProductGoodsAttrRelationDo
	WithContext(ctx context.Context) IProductGoodsAttrRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProductGoodsAttrRelationDo
	WriteDB() IProductGoodsAttrRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProductGoodsAttrRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProductGoodsAttrRelationDo
	Not(conds ...gen.Condition) IProductGoodsAttrRelationDo
	Or(conds ...gen.Condition) IProductGoodsAttrRelationDo
	Select(conds ...field.Expr) IProductGoodsAttrRelationDo
	Where(conds ...gen.Condition) IProductGoodsAttrRelationDo
	Order(conds ...field.Expr) IProductGoodsAttrRelationDo
	Distinct(cols ...field.Expr) IProductGoodsAttrRelationDo
	Omit(cols ...field.Expr) IProductGoodsAttrRelationDo
	Join(table schema.Tabler, on ...field.Expr) IProductGoodsAttrRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProductGoodsAttrRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProductGoodsAttrRelationDo
	Group(cols ...field.Expr) IProductGoodsAttrRelationDo
	Having(conds ...gen.Condition) IProductGoodsAttrRelationDo
	Limit(limit int) IProductGoodsAttrRelationDo
	Offset(offset int) IProductGoodsAttrRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProductGoodsAttrRelationDo
	Unscoped() IProductGoodsAttrRelationDo
	Create(values ...*model.ProductGoodsAttrRelation) error
	CreateInBatches(values []*model.ProductGoodsAttrRelation, batchSize int) error
	Save(values ...*model.ProductGoodsAttrRelation) error
	First() (*model.ProductGoodsAttrRelation, error)
	Take() (*model.ProductGoodsAttrRelation, error)
	Last() (*model.ProductGoodsAttrRelation, error)
	Find() ([]*model.ProductGoodsAttrRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductGoodsAttrRelation, err error)
	FindInBatches(result *[]*model.ProductGoodsAttrRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProductGoodsAttrRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProductGoodsAttrRelationDo
	Assign(attrs ...field.AssignExpr) IProductGoodsAttrRelationDo
	Joins(fields ...field.RelationField) IProductGoodsAttrRelationDo
	Preload(fields ...field.RelationField) IProductGoodsAttrRelationDo
	FirstOrInit() (*model.ProductGoodsAttrRelation, error)
	FirstOrCreate() (*model.ProductGoodsAttrRelation, error)
	FindByPage(offset int, limit int) (result []*model.ProductGoodsAttrRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProductGoodsAttrRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p productGoodsAttrRelationDo) Debug() IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Debug())
}

func (p productGoodsAttrRelationDo) WithContext(ctx context.Context) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productGoodsAttrRelationDo) ReadDB() IProductGoodsAttrRelationDo {
	return p.Clauses(dbresolver.Read)
}

func (p productGoodsAttrRelationDo) WriteDB() IProductGoodsAttrRelationDo {
	return p.Clauses(dbresolver.Write)
}

func (p productGoodsAttrRelationDo) Session(config *gorm.Session) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Session(config))
}

func (p productGoodsAttrRelationDo) Clauses(conds ...clause.Expression) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productGoodsAttrRelationDo) Returning(value interface{}, columns ...string) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productGoodsAttrRelationDo) Not(conds ...gen.Condition) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productGoodsAttrRelationDo) Or(conds ...gen.Condition) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productGoodsAttrRelationDo) Select(conds ...field.Expr) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productGoodsAttrRelationDo) Where(conds ...gen.Condition) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productGoodsAttrRelationDo) Order(conds ...field.Expr) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productGoodsAttrRelationDo) Distinct(cols ...field.Expr) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productGoodsAttrRelationDo) Omit(cols ...field.Expr) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productGoodsAttrRelationDo) Join(table schema.Tabler, on ...field.Expr) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productGoodsAttrRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productGoodsAttrRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productGoodsAttrRelationDo) Group(cols ...field.Expr) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productGoodsAttrRelationDo) Having(conds ...gen.Condition) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productGoodsAttrRelationDo) Limit(limit int) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productGoodsAttrRelationDo) Offset(offset int) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productGoodsAttrRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productGoodsAttrRelationDo) Unscoped() IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productGoodsAttrRelationDo) Create(values ...*model.ProductGoodsAttrRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productGoodsAttrRelationDo) CreateInBatches(values []*model.ProductGoodsAttrRelation, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productGoodsAttrRelationDo) Save(values ...*model.ProductGoodsAttrRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productGoodsAttrRelationDo) First() (*model.ProductGoodsAttrRelation, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsAttrRelation), nil
	}
}

func (p productGoodsAttrRelationDo) Take() (*model.ProductGoodsAttrRelation, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsAttrRelation), nil
	}
}

func (p productGoodsAttrRelationDo) Last() (*model.ProductGoodsAttrRelation, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsAttrRelation), nil
	}
}

func (p productGoodsAttrRelationDo) Find() ([]*model.ProductGoodsAttrRelation, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProductGoodsAttrRelation), err
}

func (p productGoodsAttrRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductGoodsAttrRelation, err error) {
	buf := make([]*model.ProductGoodsAttrRelation, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productGoodsAttrRelationDo) FindInBatches(result *[]*model.ProductGoodsAttrRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productGoodsAttrRelationDo) Attrs(attrs ...field.AssignExpr) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productGoodsAttrRelationDo) Assign(attrs ...field.AssignExpr) IProductGoodsAttrRelationDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productGoodsAttrRelationDo) Joins(fields ...field.RelationField) IProductGoodsAttrRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productGoodsAttrRelationDo) Preload(fields ...field.RelationField) IProductGoodsAttrRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productGoodsAttrRelationDo) FirstOrInit() (*model.ProductGoodsAttrRelation, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsAttrRelation), nil
	}
}

func (p productGoodsAttrRelationDo) FirstOrCreate() (*model.ProductGoodsAttrRelation, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsAttrRelation), nil
	}
}

func (p productGoodsAttrRelationDo) FindByPage(offset int, limit int) (result []*model.ProductGoodsAttrRelation, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productGoodsAttrRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productGoodsAttrRelationDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productGoodsAttrRelationDo) Delete(models ...*model.ProductGoodsAttrRelation) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productGoodsAttrRelationDo) withDO(do gen.Dao) *productGoodsAttrRelationDo {
	p.DO = *do.(*gen.DO)
	return p
}
