// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newCVillages(db *gorm.DB, opts ...gen.DOOption) cVillages {
	_cVillages := cVillages{}

	_cVillages.cVillagesDo.UseDB(db, opts...)
	_cVillages.cVillagesDo.UseModel(&model.CVillages{})

	tableName := _cVillages.cVillagesDo.TableName()
	_cVillages.ALL = field.NewAsterisk(tableName)
	_cVillages.ID = field.NewInt64(tableName, "id")
	_cVillages.Code = field.NewString(tableName, "code")
	_cVillages.Name = field.NewString(tableName, "name")
	_cVillages.StreetCode = field.NewString(tableName, "street_code")
	_cVillages.ProvinceCode = field.NewString(tableName, "province_code")
	_cVillages.CityCode = field.NewString(tableName, "city_code")
	_cVillages.AreaCode = field.NewString(tableName, "area_code")

	_cVillages.fillFieldMap()

	return _cVillages
}

type cVillages struct {
	cVillagesDo

	ALL          field.Asterisk
	ID           field.Int64
	Code         field.String
	Name         field.String
	StreetCode   field.String
	ProvinceCode field.String
	CityCode     field.String
	AreaCode     field.String

	fieldMap map[string]field.Expr
}

func (c cVillages) Table(newTableName string) *cVillages {
	c.cVillagesDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cVillages) As(alias string) *cVillages {
	c.cVillagesDo.DO = *(c.cVillagesDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cVillages) updateTableName(table string) *cVillages {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Code = field.NewString(table, "code")
	c.Name = field.NewString(table, "name")
	c.StreetCode = field.NewString(table, "street_code")
	c.ProvinceCode = field.NewString(table, "province_code")
	c.CityCode = field.NewString(table, "city_code")
	c.AreaCode = field.NewString(table, "area_code")

	c.fillFieldMap()

	return c
}

func (c *cVillages) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cVillages) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["code"] = c.Code
	c.fieldMap["name"] = c.Name
	c.fieldMap["street_code"] = c.StreetCode
	c.fieldMap["province_code"] = c.ProvinceCode
	c.fieldMap["city_code"] = c.CityCode
	c.fieldMap["area_code"] = c.AreaCode
}

func (c cVillages) clone(db *gorm.DB) cVillages {
	c.cVillagesDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cVillages) replaceDB(db *gorm.DB) cVillages {
	c.cVillagesDo.ReplaceDB(db)
	return c
}

type cVillagesDo struct{ gen.DO }

type ICVillagesDo interface {
	gen.SubQuery
	Debug() ICVillagesDo
	WithContext(ctx context.Context) ICVillagesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICVillagesDo
	WriteDB() ICVillagesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICVillagesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICVillagesDo
	Not(conds ...gen.Condition) ICVillagesDo
	Or(conds ...gen.Condition) ICVillagesDo
	Select(conds ...field.Expr) ICVillagesDo
	Where(conds ...gen.Condition) ICVillagesDo
	Order(conds ...field.Expr) ICVillagesDo
	Distinct(cols ...field.Expr) ICVillagesDo
	Omit(cols ...field.Expr) ICVillagesDo
	Join(table schema.Tabler, on ...field.Expr) ICVillagesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICVillagesDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICVillagesDo
	Group(cols ...field.Expr) ICVillagesDo
	Having(conds ...gen.Condition) ICVillagesDo
	Limit(limit int) ICVillagesDo
	Offset(offset int) ICVillagesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICVillagesDo
	Unscoped() ICVillagesDo
	Create(values ...*model.CVillages) error
	CreateInBatches(values []*model.CVillages, batchSize int) error
	Save(values ...*model.CVillages) error
	First() (*model.CVillages, error)
	Take() (*model.CVillages, error)
	Last() (*model.CVillages, error)
	Find() ([]*model.CVillages, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CVillages, err error)
	FindInBatches(result *[]*model.CVillages, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CVillages) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICVillagesDo
	Assign(attrs ...field.AssignExpr) ICVillagesDo
	Joins(fields ...field.RelationField) ICVillagesDo
	Preload(fields ...field.RelationField) ICVillagesDo
	FirstOrInit() (*model.CVillages, error)
	FirstOrCreate() (*model.CVillages, error)
	FindByPage(offset int, limit int) (result []*model.CVillages, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICVillagesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cVillagesDo) Debug() ICVillagesDo {
	return c.withDO(c.DO.Debug())
}

func (c cVillagesDo) WithContext(ctx context.Context) ICVillagesDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cVillagesDo) ReadDB() ICVillagesDo {
	return c.Clauses(dbresolver.Read)
}

func (c cVillagesDo) WriteDB() ICVillagesDo {
	return c.Clauses(dbresolver.Write)
}

func (c cVillagesDo) Session(config *gorm.Session) ICVillagesDo {
	return c.withDO(c.DO.Session(config))
}

func (c cVillagesDo) Clauses(conds ...clause.Expression) ICVillagesDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cVillagesDo) Returning(value interface{}, columns ...string) ICVillagesDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cVillagesDo) Not(conds ...gen.Condition) ICVillagesDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cVillagesDo) Or(conds ...gen.Condition) ICVillagesDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cVillagesDo) Select(conds ...field.Expr) ICVillagesDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cVillagesDo) Where(conds ...gen.Condition) ICVillagesDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cVillagesDo) Order(conds ...field.Expr) ICVillagesDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cVillagesDo) Distinct(cols ...field.Expr) ICVillagesDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cVillagesDo) Omit(cols ...field.Expr) ICVillagesDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cVillagesDo) Join(table schema.Tabler, on ...field.Expr) ICVillagesDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cVillagesDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICVillagesDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cVillagesDo) RightJoin(table schema.Tabler, on ...field.Expr) ICVillagesDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cVillagesDo) Group(cols ...field.Expr) ICVillagesDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cVillagesDo) Having(conds ...gen.Condition) ICVillagesDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cVillagesDo) Limit(limit int) ICVillagesDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cVillagesDo) Offset(offset int) ICVillagesDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cVillagesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICVillagesDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cVillagesDo) Unscoped() ICVillagesDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cVillagesDo) Create(values ...*model.CVillages) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cVillagesDo) CreateInBatches(values []*model.CVillages, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cVillagesDo) Save(values ...*model.CVillages) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cVillagesDo) First() (*model.CVillages, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CVillages), nil
	}
}

func (c cVillagesDo) Take() (*model.CVillages, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CVillages), nil
	}
}

func (c cVillagesDo) Last() (*model.CVillages, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CVillages), nil
	}
}

func (c cVillagesDo) Find() ([]*model.CVillages, error) {
	result, err := c.DO.Find()
	return result.([]*model.CVillages), err
}

func (c cVillagesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CVillages, err error) {
	buf := make([]*model.CVillages, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cVillagesDo) FindInBatches(result *[]*model.CVillages, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cVillagesDo) Attrs(attrs ...field.AssignExpr) ICVillagesDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cVillagesDo) Assign(attrs ...field.AssignExpr) ICVillagesDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cVillagesDo) Joins(fields ...field.RelationField) ICVillagesDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cVillagesDo) Preload(fields ...field.RelationField) ICVillagesDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cVillagesDo) FirstOrInit() (*model.CVillages, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CVillages), nil
	}
}

func (c cVillagesDo) FirstOrCreate() (*model.CVillages, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CVillages), nil
	}
}

func (c cVillagesDo) FindByPage(offset int, limit int) (result []*model.CVillages, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cVillagesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cVillagesDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cVillagesDo) Delete(models ...*model.CVillages) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cVillagesDo) withDO(do gen.Dao) *cVillagesDo {
	c.DO = *do.(*gen.DO)
	return c
}
