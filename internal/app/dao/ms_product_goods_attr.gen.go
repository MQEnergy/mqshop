// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newProductGoodsAttr(db *gorm.DB, opts ...gen.DOOption) productGoodsAttr {
	_productGoodsAttr := productGoodsAttr{}

	_productGoodsAttr.productGoodsAttrDo.UseDB(db, opts...)
	_productGoodsAttr.productGoodsAttrDo.UseModel(&model.ProductGoodsAttr{})

	tableName := _productGoodsAttr.productGoodsAttrDo.TableName()
	_productGoodsAttr.ALL = field.NewAsterisk(tableName)
	_productGoodsAttr.ID = field.NewInt64(tableName, "id")
	_productGoodsAttr.CateID = field.NewInt64(tableName, "cate_id")
	_productGoodsAttr.AttrType = field.NewInt8(tableName, "attr_type")
	_productGoodsAttr.AttrName = field.NewString(tableName, "attr_name")
	_productGoodsAttr.AttrValue = field.NewString(tableName, "attr_value")
	_productGoodsAttr.InputType = field.NewInt8(tableName, "input_type")
	_productGoodsAttr.SortOrder = field.NewInt(tableName, "sort_order")
	_productGoodsAttr.CreatedAt = field.NewInt64(tableName, "created_at")
	_productGoodsAttr.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_productGoodsAttr.fillFieldMap()

	return _productGoodsAttr
}

// productGoodsAttr 商品属性配置表
type productGoodsAttr struct {
	productGoodsAttrDo

	ALL       field.Asterisk
	ID        field.Int64
	CateID    field.Int64  // 属性分类ID
	AttrType  field.Int8   // 属性类型 1：属性 2：参数
	AttrName  field.String // 属性名 如：颜色
	AttrValue field.String // 属性值 黄色,红色,白色...
	InputType field.Int8   // 录入方式 1：手工录入 2：从列表中选择
	SortOrder field.Int    // 排序
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (p productGoodsAttr) Table(newTableName string) *productGoodsAttr {
	p.productGoodsAttrDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p productGoodsAttr) As(alias string) *productGoodsAttr {
	p.productGoodsAttrDo.DO = *(p.productGoodsAttrDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *productGoodsAttr) updateTableName(table string) *productGoodsAttr {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CateID = field.NewInt64(table, "cate_id")
	p.AttrType = field.NewInt8(table, "attr_type")
	p.AttrName = field.NewString(table, "attr_name")
	p.AttrValue = field.NewString(table, "attr_value")
	p.InputType = field.NewInt8(table, "input_type")
	p.SortOrder = field.NewInt(table, "sort_order")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *productGoodsAttr) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *productGoodsAttr) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["cate_id"] = p.CateID
	p.fieldMap["attr_type"] = p.AttrType
	p.fieldMap["attr_name"] = p.AttrName
	p.fieldMap["attr_value"] = p.AttrValue
	p.fieldMap["input_type"] = p.InputType
	p.fieldMap["sort_order"] = p.SortOrder
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p productGoodsAttr) clone(db *gorm.DB) productGoodsAttr {
	p.productGoodsAttrDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p productGoodsAttr) replaceDB(db *gorm.DB) productGoodsAttr {
	p.productGoodsAttrDo.ReplaceDB(db)
	return p
}

type productGoodsAttrDo struct{ gen.DO }

type IProductGoodsAttrDo interface {
	gen.SubQuery
	Debug() IProductGoodsAttrDo
	WithContext(ctx context.Context) IProductGoodsAttrDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProductGoodsAttrDo
	WriteDB() IProductGoodsAttrDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProductGoodsAttrDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProductGoodsAttrDo
	Not(conds ...gen.Condition) IProductGoodsAttrDo
	Or(conds ...gen.Condition) IProductGoodsAttrDo
	Select(conds ...field.Expr) IProductGoodsAttrDo
	Where(conds ...gen.Condition) IProductGoodsAttrDo
	Order(conds ...field.Expr) IProductGoodsAttrDo
	Distinct(cols ...field.Expr) IProductGoodsAttrDo
	Omit(cols ...field.Expr) IProductGoodsAttrDo
	Join(table schema.Tabler, on ...field.Expr) IProductGoodsAttrDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProductGoodsAttrDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProductGoodsAttrDo
	Group(cols ...field.Expr) IProductGoodsAttrDo
	Having(conds ...gen.Condition) IProductGoodsAttrDo
	Limit(limit int) IProductGoodsAttrDo
	Offset(offset int) IProductGoodsAttrDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProductGoodsAttrDo
	Unscoped() IProductGoodsAttrDo
	Create(values ...*model.ProductGoodsAttr) error
	CreateInBatches(values []*model.ProductGoodsAttr, batchSize int) error
	Save(values ...*model.ProductGoodsAttr) error
	First() (*model.ProductGoodsAttr, error)
	Take() (*model.ProductGoodsAttr, error)
	Last() (*model.ProductGoodsAttr, error)
	Find() ([]*model.ProductGoodsAttr, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductGoodsAttr, err error)
	FindInBatches(result *[]*model.ProductGoodsAttr, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProductGoodsAttr) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProductGoodsAttrDo
	Assign(attrs ...field.AssignExpr) IProductGoodsAttrDo
	Joins(fields ...field.RelationField) IProductGoodsAttrDo
	Preload(fields ...field.RelationField) IProductGoodsAttrDo
	FirstOrInit() (*model.ProductGoodsAttr, error)
	FirstOrCreate() (*model.ProductGoodsAttr, error)
	FindByPage(offset int, limit int) (result []*model.ProductGoodsAttr, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProductGoodsAttrDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p productGoodsAttrDo) Debug() IProductGoodsAttrDo {
	return p.withDO(p.DO.Debug())
}

func (p productGoodsAttrDo) WithContext(ctx context.Context) IProductGoodsAttrDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productGoodsAttrDo) ReadDB() IProductGoodsAttrDo {
	return p.Clauses(dbresolver.Read)
}

func (p productGoodsAttrDo) WriteDB() IProductGoodsAttrDo {
	return p.Clauses(dbresolver.Write)
}

func (p productGoodsAttrDo) Session(config *gorm.Session) IProductGoodsAttrDo {
	return p.withDO(p.DO.Session(config))
}

func (p productGoodsAttrDo) Clauses(conds ...clause.Expression) IProductGoodsAttrDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productGoodsAttrDo) Returning(value interface{}, columns ...string) IProductGoodsAttrDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productGoodsAttrDo) Not(conds ...gen.Condition) IProductGoodsAttrDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productGoodsAttrDo) Or(conds ...gen.Condition) IProductGoodsAttrDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productGoodsAttrDo) Select(conds ...field.Expr) IProductGoodsAttrDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productGoodsAttrDo) Where(conds ...gen.Condition) IProductGoodsAttrDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productGoodsAttrDo) Order(conds ...field.Expr) IProductGoodsAttrDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productGoodsAttrDo) Distinct(cols ...field.Expr) IProductGoodsAttrDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productGoodsAttrDo) Omit(cols ...field.Expr) IProductGoodsAttrDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productGoodsAttrDo) Join(table schema.Tabler, on ...field.Expr) IProductGoodsAttrDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productGoodsAttrDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProductGoodsAttrDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productGoodsAttrDo) RightJoin(table schema.Tabler, on ...field.Expr) IProductGoodsAttrDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productGoodsAttrDo) Group(cols ...field.Expr) IProductGoodsAttrDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productGoodsAttrDo) Having(conds ...gen.Condition) IProductGoodsAttrDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productGoodsAttrDo) Limit(limit int) IProductGoodsAttrDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productGoodsAttrDo) Offset(offset int) IProductGoodsAttrDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productGoodsAttrDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProductGoodsAttrDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productGoodsAttrDo) Unscoped() IProductGoodsAttrDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productGoodsAttrDo) Create(values ...*model.ProductGoodsAttr) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productGoodsAttrDo) CreateInBatches(values []*model.ProductGoodsAttr, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productGoodsAttrDo) Save(values ...*model.ProductGoodsAttr) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productGoodsAttrDo) First() (*model.ProductGoodsAttr, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsAttr), nil
	}
}

func (p productGoodsAttrDo) Take() (*model.ProductGoodsAttr, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsAttr), nil
	}
}

func (p productGoodsAttrDo) Last() (*model.ProductGoodsAttr, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsAttr), nil
	}
}

func (p productGoodsAttrDo) Find() ([]*model.ProductGoodsAttr, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProductGoodsAttr), err
}

func (p productGoodsAttrDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductGoodsAttr, err error) {
	buf := make([]*model.ProductGoodsAttr, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productGoodsAttrDo) FindInBatches(result *[]*model.ProductGoodsAttr, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productGoodsAttrDo) Attrs(attrs ...field.AssignExpr) IProductGoodsAttrDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productGoodsAttrDo) Assign(attrs ...field.AssignExpr) IProductGoodsAttrDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productGoodsAttrDo) Joins(fields ...field.RelationField) IProductGoodsAttrDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productGoodsAttrDo) Preload(fields ...field.RelationField) IProductGoodsAttrDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productGoodsAttrDo) FirstOrInit() (*model.ProductGoodsAttr, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsAttr), nil
	}
}

func (p productGoodsAttrDo) FirstOrCreate() (*model.ProductGoodsAttr, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsAttr), nil
	}
}

func (p productGoodsAttrDo) FindByPage(offset int, limit int) (result []*model.ProductGoodsAttr, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productGoodsAttrDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productGoodsAttrDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productGoodsAttrDo) Delete(models ...*model.ProductGoodsAttr) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productGoodsAttrDo) withDO(do gen.Dao) *productGoodsAttrDo {
	p.DO = *do.(*gen.DO)
	return p
}
