// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newMemberInfo(db *gorm.DB, opts ...gen.DOOption) memberInfo {
	_memberInfo := memberInfo{}

	_memberInfo.memberInfoDo.UseDB(db, opts...)
	_memberInfo.memberInfoDo.UseModel(&model.MemberInfo{})

	tableName := _memberInfo.memberInfoDo.TableName()
	_memberInfo.ALL = field.NewAsterisk(tableName)
	_memberInfo.ID = field.NewInt64(tableName, "id")
	_memberInfo.MemberID = field.NewInt64(tableName, "member_id")
	_memberInfo.PostNum = field.NewInt(tableName, "post_num")
	_memberInfo.LikedNum = field.NewInt(tableName, "liked_num")
	_memberInfo.CreatedAt = field.NewInt64(tableName, "created_at")
	_memberInfo.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_memberInfo.fillFieldMap()

	return _memberInfo
}

// memberInfo 用户详情表
type memberInfo struct {
	memberInfoDo

	ALL       field.Asterisk
	ID        field.Int64
	MemberID  field.Int64 // 用户ID
	PostNum   field.Int   // 帖子数量
	LikedNum  field.Int   // 获赞数
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (m memberInfo) Table(newTableName string) *memberInfo {
	m.memberInfoDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m memberInfo) As(alias string) *memberInfo {
	m.memberInfoDo.DO = *(m.memberInfoDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *memberInfo) updateTableName(table string) *memberInfo {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.MemberID = field.NewInt64(table, "member_id")
	m.PostNum = field.NewInt(table, "post_num")
	m.LikedNum = field.NewInt(table, "liked_num")
	m.CreatedAt = field.NewInt64(table, "created_at")
	m.UpdatedAt = field.NewInt64(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *memberInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *memberInfo) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 6)
	m.fieldMap["id"] = m.ID
	m.fieldMap["member_id"] = m.MemberID
	m.fieldMap["post_num"] = m.PostNum
	m.fieldMap["liked_num"] = m.LikedNum
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m memberInfo) clone(db *gorm.DB) memberInfo {
	m.memberInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m memberInfo) replaceDB(db *gorm.DB) memberInfo {
	m.memberInfoDo.ReplaceDB(db)
	return m
}

type memberInfoDo struct{ gen.DO }

type IMemberInfoDo interface {
	gen.SubQuery
	Debug() IMemberInfoDo
	WithContext(ctx context.Context) IMemberInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMemberInfoDo
	WriteDB() IMemberInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMemberInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMemberInfoDo
	Not(conds ...gen.Condition) IMemberInfoDo
	Or(conds ...gen.Condition) IMemberInfoDo
	Select(conds ...field.Expr) IMemberInfoDo
	Where(conds ...gen.Condition) IMemberInfoDo
	Order(conds ...field.Expr) IMemberInfoDo
	Distinct(cols ...field.Expr) IMemberInfoDo
	Omit(cols ...field.Expr) IMemberInfoDo
	Join(table schema.Tabler, on ...field.Expr) IMemberInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMemberInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMemberInfoDo
	Group(cols ...field.Expr) IMemberInfoDo
	Having(conds ...gen.Condition) IMemberInfoDo
	Limit(limit int) IMemberInfoDo
	Offset(offset int) IMemberInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberInfoDo
	Unscoped() IMemberInfoDo
	Create(values ...*model.MemberInfo) error
	CreateInBatches(values []*model.MemberInfo, batchSize int) error
	Save(values ...*model.MemberInfo) error
	First() (*model.MemberInfo, error)
	Take() (*model.MemberInfo, error)
	Last() (*model.MemberInfo, error)
	Find() ([]*model.MemberInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemberInfo, err error)
	FindInBatches(result *[]*model.MemberInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MemberInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMemberInfoDo
	Assign(attrs ...field.AssignExpr) IMemberInfoDo
	Joins(fields ...field.RelationField) IMemberInfoDo
	Preload(fields ...field.RelationField) IMemberInfoDo
	FirstOrInit() (*model.MemberInfo, error)
	FirstOrCreate() (*model.MemberInfo, error)
	FindByPage(offset int, limit int) (result []*model.MemberInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMemberInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m memberInfoDo) Debug() IMemberInfoDo {
	return m.withDO(m.DO.Debug())
}

func (m memberInfoDo) WithContext(ctx context.Context) IMemberInfoDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m memberInfoDo) ReadDB() IMemberInfoDo {
	return m.Clauses(dbresolver.Read)
}

func (m memberInfoDo) WriteDB() IMemberInfoDo {
	return m.Clauses(dbresolver.Write)
}

func (m memberInfoDo) Session(config *gorm.Session) IMemberInfoDo {
	return m.withDO(m.DO.Session(config))
}

func (m memberInfoDo) Clauses(conds ...clause.Expression) IMemberInfoDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m memberInfoDo) Returning(value interface{}, columns ...string) IMemberInfoDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m memberInfoDo) Not(conds ...gen.Condition) IMemberInfoDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m memberInfoDo) Or(conds ...gen.Condition) IMemberInfoDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m memberInfoDo) Select(conds ...field.Expr) IMemberInfoDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m memberInfoDo) Where(conds ...gen.Condition) IMemberInfoDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m memberInfoDo) Order(conds ...field.Expr) IMemberInfoDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m memberInfoDo) Distinct(cols ...field.Expr) IMemberInfoDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m memberInfoDo) Omit(cols ...field.Expr) IMemberInfoDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m memberInfoDo) Join(table schema.Tabler, on ...field.Expr) IMemberInfoDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m memberInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMemberInfoDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m memberInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IMemberInfoDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m memberInfoDo) Group(cols ...field.Expr) IMemberInfoDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m memberInfoDo) Having(conds ...gen.Condition) IMemberInfoDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m memberInfoDo) Limit(limit int) IMemberInfoDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m memberInfoDo) Offset(offset int) IMemberInfoDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m memberInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberInfoDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m memberInfoDo) Unscoped() IMemberInfoDo {
	return m.withDO(m.DO.Unscoped())
}

func (m memberInfoDo) Create(values ...*model.MemberInfo) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m memberInfoDo) CreateInBatches(values []*model.MemberInfo, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m memberInfoDo) Save(values ...*model.MemberInfo) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m memberInfoDo) First() (*model.MemberInfo, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberInfo), nil
	}
}

func (m memberInfoDo) Take() (*model.MemberInfo, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberInfo), nil
	}
}

func (m memberInfoDo) Last() (*model.MemberInfo, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberInfo), nil
	}
}

func (m memberInfoDo) Find() ([]*model.MemberInfo, error) {
	result, err := m.DO.Find()
	return result.([]*model.MemberInfo), err
}

func (m memberInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemberInfo, err error) {
	buf := make([]*model.MemberInfo, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m memberInfoDo) FindInBatches(result *[]*model.MemberInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m memberInfoDo) Attrs(attrs ...field.AssignExpr) IMemberInfoDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m memberInfoDo) Assign(attrs ...field.AssignExpr) IMemberInfoDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m memberInfoDo) Joins(fields ...field.RelationField) IMemberInfoDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m memberInfoDo) Preload(fields ...field.RelationField) IMemberInfoDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m memberInfoDo) FirstOrInit() (*model.MemberInfo, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberInfo), nil
	}
}

func (m memberInfoDo) FirstOrCreate() (*model.MemberInfo, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberInfo), nil
	}
}

func (m memberInfoDo) FindByPage(offset int, limit int) (result []*model.MemberInfo, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m memberInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m memberInfoDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m memberInfoDo) Delete(models ...*model.MemberInfo) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *memberInfoDo) withDO(do gen.Dao) *memberInfoDo {
	m.DO = *do.(*gen.DO)
	return m
}
