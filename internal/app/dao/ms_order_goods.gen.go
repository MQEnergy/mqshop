// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newOrderGoods(db *gorm.DB, opts ...gen.DOOption) orderGoods {
	_orderGoods := orderGoods{}

	_orderGoods.orderGoodsDo.UseDB(db, opts...)
	_orderGoods.orderGoodsDo.UseModel(&model.OrderGoods{})

	tableName := _orderGoods.orderGoodsDo.TableName()
	_orderGoods.ALL = field.NewAsterisk(tableName)
	_orderGoods.ID = field.NewInt64(tableName, "id")
	_orderGoods.OrderID = field.NewInt64(tableName, "order_id")
	_orderGoods.GoodsID = field.NewInt64(tableName, "goods_id")
	_orderGoods.GoodsTitle = field.NewString(tableName, "goods_title")
	_orderGoods.ThumbURL = field.NewString(tableName, "thumb_url")
	_orderGoods.OriginPrice = field.NewFloat64(tableName, "origin_price")
	_orderGoods.FinalPrice = field.NewFloat64(tableName, "final_price")
	_orderGoods.PromotePrice = field.NewFloat64(tableName, "promote_price")
	_orderGoods.CouponPrice = field.NewFloat64(tableName, "coupon_price")
	_orderGoods.Integral = field.NewInt(tableName, "integral")
	_orderGoods.SkuNo = field.NewString(tableName, "sku_no")
	_orderGoods.SkuValue = field.NewString(tableName, "sku_value")
	_orderGoods.GoodsNum = field.NewInt(tableName, "goods_num")
	_orderGoods.CreatedAt = field.NewInt64(tableName, "created_at")
	_orderGoods.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_orderGoods.fillFieldMap()

	return _orderGoods
}

// orderGoods 订单商品表
type orderGoods struct {
	orderGoodsDo

	ALL          field.Asterisk
	ID           field.Int64
	OrderID      field.Int64   // 订单id
	GoodsID      field.Int64   // 商品ID
	GoodsTitle   field.String  // 商品标题
	ThumbURL     field.String  // 商品缩略图图片
	OriginPrice  field.Float64 // 商品原价
	FinalPrice   field.Float64 // 商品最终价
	PromotePrice field.Float64 // 商品促销价
	CouponPrice  field.Float64 // 优惠券总价格
	Integral     field.Int     // 赠送积分
	SkuNo        field.String  // 商品sku编码
	SkuValue     field.String  // sku值
	GoodsNum     field.Int     // 数量
	CreatedAt    field.Int64
	UpdatedAt    field.Int64

	fieldMap map[string]field.Expr
}

func (o orderGoods) Table(newTableName string) *orderGoods {
	o.orderGoodsDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderGoods) As(alias string) *orderGoods {
	o.orderGoodsDo.DO = *(o.orderGoodsDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderGoods) updateTableName(table string) *orderGoods {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.OrderID = field.NewInt64(table, "order_id")
	o.GoodsID = field.NewInt64(table, "goods_id")
	o.GoodsTitle = field.NewString(table, "goods_title")
	o.ThumbURL = field.NewString(table, "thumb_url")
	o.OriginPrice = field.NewFloat64(table, "origin_price")
	o.FinalPrice = field.NewFloat64(table, "final_price")
	o.PromotePrice = field.NewFloat64(table, "promote_price")
	o.CouponPrice = field.NewFloat64(table, "coupon_price")
	o.Integral = field.NewInt(table, "integral")
	o.SkuNo = field.NewString(table, "sku_no")
	o.SkuValue = field.NewString(table, "sku_value")
	o.GoodsNum = field.NewInt(table, "goods_num")
	o.CreatedAt = field.NewInt64(table, "created_at")
	o.UpdatedAt = field.NewInt64(table, "updated_at")

	o.fillFieldMap()

	return o
}

func (o *orderGoods) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderGoods) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 15)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["goods_id"] = o.GoodsID
	o.fieldMap["goods_title"] = o.GoodsTitle
	o.fieldMap["thumb_url"] = o.ThumbURL
	o.fieldMap["origin_price"] = o.OriginPrice
	o.fieldMap["final_price"] = o.FinalPrice
	o.fieldMap["promote_price"] = o.PromotePrice
	o.fieldMap["coupon_price"] = o.CouponPrice
	o.fieldMap["integral"] = o.Integral
	o.fieldMap["sku_no"] = o.SkuNo
	o.fieldMap["sku_value"] = o.SkuValue
	o.fieldMap["goods_num"] = o.GoodsNum
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
}

func (o orderGoods) clone(db *gorm.DB) orderGoods {
	o.orderGoodsDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderGoods) replaceDB(db *gorm.DB) orderGoods {
	o.orderGoodsDo.ReplaceDB(db)
	return o
}

type orderGoodsDo struct{ gen.DO }

type IOrderGoodsDo interface {
	gen.SubQuery
	Debug() IOrderGoodsDo
	WithContext(ctx context.Context) IOrderGoodsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderGoodsDo
	WriteDB() IOrderGoodsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderGoodsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderGoodsDo
	Not(conds ...gen.Condition) IOrderGoodsDo
	Or(conds ...gen.Condition) IOrderGoodsDo
	Select(conds ...field.Expr) IOrderGoodsDo
	Where(conds ...gen.Condition) IOrderGoodsDo
	Order(conds ...field.Expr) IOrderGoodsDo
	Distinct(cols ...field.Expr) IOrderGoodsDo
	Omit(cols ...field.Expr) IOrderGoodsDo
	Join(table schema.Tabler, on ...field.Expr) IOrderGoodsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderGoodsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderGoodsDo
	Group(cols ...field.Expr) IOrderGoodsDo
	Having(conds ...gen.Condition) IOrderGoodsDo
	Limit(limit int) IOrderGoodsDo
	Offset(offset int) IOrderGoodsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderGoodsDo
	Unscoped() IOrderGoodsDo
	Create(values ...*model.OrderGoods) error
	CreateInBatches(values []*model.OrderGoods, batchSize int) error
	Save(values ...*model.OrderGoods) error
	First() (*model.OrderGoods, error)
	Take() (*model.OrderGoods, error)
	Last() (*model.OrderGoods, error)
	Find() ([]*model.OrderGoods, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderGoods, err error)
	FindInBatches(result *[]*model.OrderGoods, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrderGoods) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderGoodsDo
	Assign(attrs ...field.AssignExpr) IOrderGoodsDo
	Joins(fields ...field.RelationField) IOrderGoodsDo
	Preload(fields ...field.RelationField) IOrderGoodsDo
	FirstOrInit() (*model.OrderGoods, error)
	FirstOrCreate() (*model.OrderGoods, error)
	FindByPage(offset int, limit int) (result []*model.OrderGoods, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderGoodsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderGoodsDo) Debug() IOrderGoodsDo {
	return o.withDO(o.DO.Debug())
}

func (o orderGoodsDo) WithContext(ctx context.Context) IOrderGoodsDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderGoodsDo) ReadDB() IOrderGoodsDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderGoodsDo) WriteDB() IOrderGoodsDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderGoodsDo) Session(config *gorm.Session) IOrderGoodsDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderGoodsDo) Clauses(conds ...clause.Expression) IOrderGoodsDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderGoodsDo) Returning(value interface{}, columns ...string) IOrderGoodsDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderGoodsDo) Not(conds ...gen.Condition) IOrderGoodsDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderGoodsDo) Or(conds ...gen.Condition) IOrderGoodsDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderGoodsDo) Select(conds ...field.Expr) IOrderGoodsDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderGoodsDo) Where(conds ...gen.Condition) IOrderGoodsDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderGoodsDo) Order(conds ...field.Expr) IOrderGoodsDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderGoodsDo) Distinct(cols ...field.Expr) IOrderGoodsDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderGoodsDo) Omit(cols ...field.Expr) IOrderGoodsDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderGoodsDo) Join(table schema.Tabler, on ...field.Expr) IOrderGoodsDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderGoodsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderGoodsDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderGoodsDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderGoodsDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderGoodsDo) Group(cols ...field.Expr) IOrderGoodsDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderGoodsDo) Having(conds ...gen.Condition) IOrderGoodsDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderGoodsDo) Limit(limit int) IOrderGoodsDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderGoodsDo) Offset(offset int) IOrderGoodsDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderGoodsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderGoodsDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderGoodsDo) Unscoped() IOrderGoodsDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderGoodsDo) Create(values ...*model.OrderGoods) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderGoodsDo) CreateInBatches(values []*model.OrderGoods, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderGoodsDo) Save(values ...*model.OrderGoods) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderGoodsDo) First() (*model.OrderGoods, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderGoods), nil
	}
}

func (o orderGoodsDo) Take() (*model.OrderGoods, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderGoods), nil
	}
}

func (o orderGoodsDo) Last() (*model.OrderGoods, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderGoods), nil
	}
}

func (o orderGoodsDo) Find() ([]*model.OrderGoods, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderGoods), err
}

func (o orderGoodsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderGoods, err error) {
	buf := make([]*model.OrderGoods, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderGoodsDo) FindInBatches(result *[]*model.OrderGoods, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderGoodsDo) Attrs(attrs ...field.AssignExpr) IOrderGoodsDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderGoodsDo) Assign(attrs ...field.AssignExpr) IOrderGoodsDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderGoodsDo) Joins(fields ...field.RelationField) IOrderGoodsDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderGoodsDo) Preload(fields ...field.RelationField) IOrderGoodsDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderGoodsDo) FirstOrInit() (*model.OrderGoods, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderGoods), nil
	}
}

func (o orderGoodsDo) FirstOrCreate() (*model.OrderGoods, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderGoods), nil
	}
}

func (o orderGoodsDo) FindByPage(offset int, limit int) (result []*model.OrderGoods, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderGoodsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderGoodsDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderGoodsDo) Delete(models ...*model.OrderGoods) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderGoodsDo) withDO(do gen.Dao) *orderGoodsDo {
	o.DO = *do.(*gen.DO)
	return o
}
