// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newMemberPost(db *gorm.DB, opts ...gen.DOOption) memberPost {
	_memberPost := memberPost{}

	_memberPost.memberPostDo.UseDB(db, opts...)
	_memberPost.memberPostDo.UseModel(&model.MemberPost{})

	tableName := _memberPost.memberPostDo.TableName()
	_memberPost.ALL = field.NewAsterisk(tableName)
	_memberPost.ID = field.NewInt64(tableName, "id")
	_memberPost.MemberID = field.NewInt64(tableName, "member_id")
	_memberPost.Desc = field.NewString(tableName, "desc")
	_memberPost.LinkURL = field.NewString(tableName, "link_url")
	_memberPost.PicURL = field.NewString(tableName, "pic_url")
	_memberPost.CreatedAt = field.NewInt64(tableName, "created_at")
	_memberPost.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_memberPost.fillFieldMap()

	return _memberPost
}

// memberPost 用户帖子列表
type memberPost struct {
	memberPostDo

	ALL       field.Asterisk
	ID        field.Int64
	MemberID  field.Int64  // 用户ID
	Desc      field.String // 内容
	LinkURL   field.String // 链接地址
	PicURL    field.String // 图片地址[1,2]
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (m memberPost) Table(newTableName string) *memberPost {
	m.memberPostDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m memberPost) As(alias string) *memberPost {
	m.memberPostDo.DO = *(m.memberPostDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *memberPost) updateTableName(table string) *memberPost {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.MemberID = field.NewInt64(table, "member_id")
	m.Desc = field.NewString(table, "desc")
	m.LinkURL = field.NewString(table, "link_url")
	m.PicURL = field.NewString(table, "pic_url")
	m.CreatedAt = field.NewInt64(table, "created_at")
	m.UpdatedAt = field.NewInt64(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *memberPost) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *memberPost) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["member_id"] = m.MemberID
	m.fieldMap["desc"] = m.Desc
	m.fieldMap["link_url"] = m.LinkURL
	m.fieldMap["pic_url"] = m.PicURL
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m memberPost) clone(db *gorm.DB) memberPost {
	m.memberPostDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m memberPost) replaceDB(db *gorm.DB) memberPost {
	m.memberPostDo.ReplaceDB(db)
	return m
}

type memberPostDo struct{ gen.DO }

type IMemberPostDo interface {
	gen.SubQuery
	Debug() IMemberPostDo
	WithContext(ctx context.Context) IMemberPostDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMemberPostDo
	WriteDB() IMemberPostDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMemberPostDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMemberPostDo
	Not(conds ...gen.Condition) IMemberPostDo
	Or(conds ...gen.Condition) IMemberPostDo
	Select(conds ...field.Expr) IMemberPostDo
	Where(conds ...gen.Condition) IMemberPostDo
	Order(conds ...field.Expr) IMemberPostDo
	Distinct(cols ...field.Expr) IMemberPostDo
	Omit(cols ...field.Expr) IMemberPostDo
	Join(table schema.Tabler, on ...field.Expr) IMemberPostDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMemberPostDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMemberPostDo
	Group(cols ...field.Expr) IMemberPostDo
	Having(conds ...gen.Condition) IMemberPostDo
	Limit(limit int) IMemberPostDo
	Offset(offset int) IMemberPostDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberPostDo
	Unscoped() IMemberPostDo
	Create(values ...*model.MemberPost) error
	CreateInBatches(values []*model.MemberPost, batchSize int) error
	Save(values ...*model.MemberPost) error
	First() (*model.MemberPost, error)
	Take() (*model.MemberPost, error)
	Last() (*model.MemberPost, error)
	Find() ([]*model.MemberPost, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemberPost, err error)
	FindInBatches(result *[]*model.MemberPost, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MemberPost) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMemberPostDo
	Assign(attrs ...field.AssignExpr) IMemberPostDo
	Joins(fields ...field.RelationField) IMemberPostDo
	Preload(fields ...field.RelationField) IMemberPostDo
	FirstOrInit() (*model.MemberPost, error)
	FirstOrCreate() (*model.MemberPost, error)
	FindByPage(offset int, limit int) (result []*model.MemberPost, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMemberPostDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m memberPostDo) Debug() IMemberPostDo {
	return m.withDO(m.DO.Debug())
}

func (m memberPostDo) WithContext(ctx context.Context) IMemberPostDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m memberPostDo) ReadDB() IMemberPostDo {
	return m.Clauses(dbresolver.Read)
}

func (m memberPostDo) WriteDB() IMemberPostDo {
	return m.Clauses(dbresolver.Write)
}

func (m memberPostDo) Session(config *gorm.Session) IMemberPostDo {
	return m.withDO(m.DO.Session(config))
}

func (m memberPostDo) Clauses(conds ...clause.Expression) IMemberPostDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m memberPostDo) Returning(value interface{}, columns ...string) IMemberPostDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m memberPostDo) Not(conds ...gen.Condition) IMemberPostDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m memberPostDo) Or(conds ...gen.Condition) IMemberPostDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m memberPostDo) Select(conds ...field.Expr) IMemberPostDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m memberPostDo) Where(conds ...gen.Condition) IMemberPostDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m memberPostDo) Order(conds ...field.Expr) IMemberPostDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m memberPostDo) Distinct(cols ...field.Expr) IMemberPostDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m memberPostDo) Omit(cols ...field.Expr) IMemberPostDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m memberPostDo) Join(table schema.Tabler, on ...field.Expr) IMemberPostDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m memberPostDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMemberPostDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m memberPostDo) RightJoin(table schema.Tabler, on ...field.Expr) IMemberPostDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m memberPostDo) Group(cols ...field.Expr) IMemberPostDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m memberPostDo) Having(conds ...gen.Condition) IMemberPostDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m memberPostDo) Limit(limit int) IMemberPostDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m memberPostDo) Offset(offset int) IMemberPostDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m memberPostDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMemberPostDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m memberPostDo) Unscoped() IMemberPostDo {
	return m.withDO(m.DO.Unscoped())
}

func (m memberPostDo) Create(values ...*model.MemberPost) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m memberPostDo) CreateInBatches(values []*model.MemberPost, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m memberPostDo) Save(values ...*model.MemberPost) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m memberPostDo) First() (*model.MemberPost, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberPost), nil
	}
}

func (m memberPostDo) Take() (*model.MemberPost, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberPost), nil
	}
}

func (m memberPostDo) Last() (*model.MemberPost, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberPost), nil
	}
}

func (m memberPostDo) Find() ([]*model.MemberPost, error) {
	result, err := m.DO.Find()
	return result.([]*model.MemberPost), err
}

func (m memberPostDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemberPost, err error) {
	buf := make([]*model.MemberPost, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m memberPostDo) FindInBatches(result *[]*model.MemberPost, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m memberPostDo) Attrs(attrs ...field.AssignExpr) IMemberPostDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m memberPostDo) Assign(attrs ...field.AssignExpr) IMemberPostDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m memberPostDo) Joins(fields ...field.RelationField) IMemberPostDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m memberPostDo) Preload(fields ...field.RelationField) IMemberPostDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m memberPostDo) FirstOrInit() (*model.MemberPost, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberPost), nil
	}
}

func (m memberPostDo) FirstOrCreate() (*model.MemberPost, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemberPost), nil
	}
}

func (m memberPostDo) FindByPage(offset int, limit int) (result []*model.MemberPost, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m memberPostDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m memberPostDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m memberPostDo) Delete(models ...*model.MemberPost) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *memberPostDo) withDO(do gen.Dao) *memberPostDo {
	m.DO = *do.(*gen.DO)
	return m
}
