// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newProductGoodsTagRelation(db *gorm.DB, opts ...gen.DOOption) productGoodsTagRelation {
	_productGoodsTagRelation := productGoodsTagRelation{}

	_productGoodsTagRelation.productGoodsTagRelationDo.UseDB(db, opts...)
	_productGoodsTagRelation.productGoodsTagRelationDo.UseModel(&model.ProductGoodsTagRelation{})

	tableName := _productGoodsTagRelation.productGoodsTagRelationDo.TableName()
	_productGoodsTagRelation.ALL = field.NewAsterisk(tableName)
	_productGoodsTagRelation.ID = field.NewInt64(tableName, "id")
	_productGoodsTagRelation.GoodsID = field.NewInt64(tableName, "goods_id")
	_productGoodsTagRelation.TagID = field.NewInt64(tableName, "tag_id")
	_productGoodsTagRelation.CreatedAt = field.NewInt64(tableName, "created_at")

	_productGoodsTagRelation.fillFieldMap()

	return _productGoodsTagRelation
}

// productGoodsTagRelation 商品标签关联表
type productGoodsTagRelation struct {
	productGoodsTagRelationDo

	ALL       field.Asterisk
	ID        field.Int64
	GoodsID   field.Int64 // 商品ID
	TagID     field.Int64 // 标签ID
	CreatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (p productGoodsTagRelation) Table(newTableName string) *productGoodsTagRelation {
	p.productGoodsTagRelationDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p productGoodsTagRelation) As(alias string) *productGoodsTagRelation {
	p.productGoodsTagRelationDo.DO = *(p.productGoodsTagRelationDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *productGoodsTagRelation) updateTableName(table string) *productGoodsTagRelation {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.GoodsID = field.NewInt64(table, "goods_id")
	p.TagID = field.NewInt64(table, "tag_id")
	p.CreatedAt = field.NewInt64(table, "created_at")

	p.fillFieldMap()

	return p
}

func (p *productGoodsTagRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *productGoodsTagRelation) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["id"] = p.ID
	p.fieldMap["goods_id"] = p.GoodsID
	p.fieldMap["tag_id"] = p.TagID
	p.fieldMap["created_at"] = p.CreatedAt
}

func (p productGoodsTagRelation) clone(db *gorm.DB) productGoodsTagRelation {
	p.productGoodsTagRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p productGoodsTagRelation) replaceDB(db *gorm.DB) productGoodsTagRelation {
	p.productGoodsTagRelationDo.ReplaceDB(db)
	return p
}

type productGoodsTagRelationDo struct{ gen.DO }

type IProductGoodsTagRelationDo interface {
	gen.SubQuery
	Debug() IProductGoodsTagRelationDo
	WithContext(ctx context.Context) IProductGoodsTagRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProductGoodsTagRelationDo
	WriteDB() IProductGoodsTagRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProductGoodsTagRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProductGoodsTagRelationDo
	Not(conds ...gen.Condition) IProductGoodsTagRelationDo
	Or(conds ...gen.Condition) IProductGoodsTagRelationDo
	Select(conds ...field.Expr) IProductGoodsTagRelationDo
	Where(conds ...gen.Condition) IProductGoodsTagRelationDo
	Order(conds ...field.Expr) IProductGoodsTagRelationDo
	Distinct(cols ...field.Expr) IProductGoodsTagRelationDo
	Omit(cols ...field.Expr) IProductGoodsTagRelationDo
	Join(table schema.Tabler, on ...field.Expr) IProductGoodsTagRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProductGoodsTagRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProductGoodsTagRelationDo
	Group(cols ...field.Expr) IProductGoodsTagRelationDo
	Having(conds ...gen.Condition) IProductGoodsTagRelationDo
	Limit(limit int) IProductGoodsTagRelationDo
	Offset(offset int) IProductGoodsTagRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProductGoodsTagRelationDo
	Unscoped() IProductGoodsTagRelationDo
	Create(values ...*model.ProductGoodsTagRelation) error
	CreateInBatches(values []*model.ProductGoodsTagRelation, batchSize int) error
	Save(values ...*model.ProductGoodsTagRelation) error
	First() (*model.ProductGoodsTagRelation, error)
	Take() (*model.ProductGoodsTagRelation, error)
	Last() (*model.ProductGoodsTagRelation, error)
	Find() ([]*model.ProductGoodsTagRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductGoodsTagRelation, err error)
	FindInBatches(result *[]*model.ProductGoodsTagRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProductGoodsTagRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProductGoodsTagRelationDo
	Assign(attrs ...field.AssignExpr) IProductGoodsTagRelationDo
	Joins(fields ...field.RelationField) IProductGoodsTagRelationDo
	Preload(fields ...field.RelationField) IProductGoodsTagRelationDo
	FirstOrInit() (*model.ProductGoodsTagRelation, error)
	FirstOrCreate() (*model.ProductGoodsTagRelation, error)
	FindByPage(offset int, limit int) (result []*model.ProductGoodsTagRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProductGoodsTagRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p productGoodsTagRelationDo) Debug() IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Debug())
}

func (p productGoodsTagRelationDo) WithContext(ctx context.Context) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productGoodsTagRelationDo) ReadDB() IProductGoodsTagRelationDo {
	return p.Clauses(dbresolver.Read)
}

func (p productGoodsTagRelationDo) WriteDB() IProductGoodsTagRelationDo {
	return p.Clauses(dbresolver.Write)
}

func (p productGoodsTagRelationDo) Session(config *gorm.Session) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Session(config))
}

func (p productGoodsTagRelationDo) Clauses(conds ...clause.Expression) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productGoodsTagRelationDo) Returning(value interface{}, columns ...string) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productGoodsTagRelationDo) Not(conds ...gen.Condition) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productGoodsTagRelationDo) Or(conds ...gen.Condition) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productGoodsTagRelationDo) Select(conds ...field.Expr) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productGoodsTagRelationDo) Where(conds ...gen.Condition) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productGoodsTagRelationDo) Order(conds ...field.Expr) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productGoodsTagRelationDo) Distinct(cols ...field.Expr) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productGoodsTagRelationDo) Omit(cols ...field.Expr) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productGoodsTagRelationDo) Join(table schema.Tabler, on ...field.Expr) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productGoodsTagRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productGoodsTagRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productGoodsTagRelationDo) Group(cols ...field.Expr) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productGoodsTagRelationDo) Having(conds ...gen.Condition) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productGoodsTagRelationDo) Limit(limit int) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productGoodsTagRelationDo) Offset(offset int) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productGoodsTagRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productGoodsTagRelationDo) Unscoped() IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productGoodsTagRelationDo) Create(values ...*model.ProductGoodsTagRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productGoodsTagRelationDo) CreateInBatches(values []*model.ProductGoodsTagRelation, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productGoodsTagRelationDo) Save(values ...*model.ProductGoodsTagRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productGoodsTagRelationDo) First() (*model.ProductGoodsTagRelation, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsTagRelation), nil
	}
}

func (p productGoodsTagRelationDo) Take() (*model.ProductGoodsTagRelation, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsTagRelation), nil
	}
}

func (p productGoodsTagRelationDo) Last() (*model.ProductGoodsTagRelation, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsTagRelation), nil
	}
}

func (p productGoodsTagRelationDo) Find() ([]*model.ProductGoodsTagRelation, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProductGoodsTagRelation), err
}

func (p productGoodsTagRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductGoodsTagRelation, err error) {
	buf := make([]*model.ProductGoodsTagRelation, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productGoodsTagRelationDo) FindInBatches(result *[]*model.ProductGoodsTagRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productGoodsTagRelationDo) Attrs(attrs ...field.AssignExpr) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productGoodsTagRelationDo) Assign(attrs ...field.AssignExpr) IProductGoodsTagRelationDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productGoodsTagRelationDo) Joins(fields ...field.RelationField) IProductGoodsTagRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productGoodsTagRelationDo) Preload(fields ...field.RelationField) IProductGoodsTagRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productGoodsTagRelationDo) FirstOrInit() (*model.ProductGoodsTagRelation, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsTagRelation), nil
	}
}

func (p productGoodsTagRelationDo) FirstOrCreate() (*model.ProductGoodsTagRelation, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductGoodsTagRelation), nil
	}
}

func (p productGoodsTagRelationDo) FindByPage(offset int, limit int) (result []*model.ProductGoodsTagRelation, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productGoodsTagRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productGoodsTagRelationDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productGoodsTagRelationDo) Delete(models ...*model.ProductGoodsTagRelation) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productGoodsTagRelationDo) withDO(do gen.Dao) *productGoodsTagRelationDo {
	p.DO = *do.(*gen.DO)
	return p
}
