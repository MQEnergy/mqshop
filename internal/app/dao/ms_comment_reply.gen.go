// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MQEnergy/mqshop/internal/app/model"
)

func newCommentReply(db *gorm.DB, opts ...gen.DOOption) commentReply {
	_commentReply := commentReply{}

	_commentReply.commentReplyDo.UseDB(db, opts...)
	_commentReply.commentReplyDo.UseModel(&model.CommentReply{})

	tableName := _commentReply.commentReplyDo.TableName()
	_commentReply.ALL = field.NewAsterisk(tableName)
	_commentReply.ID = field.NewInt64(tableName, "id")
	_commentReply.MemberID = field.NewInt64(tableName, "member_id")
	_commentReply.MemberName = field.NewString(tableName, "member_name")
	_commentReply.CommentID = field.NewInt64(tableName, "comment_id")
	_commentReply.Content = field.NewString(tableName, "content")
	_commentReply.LikeNum = field.NewInt(tableName, "like_num")
	_commentReply.CmtType = field.NewInt8(tableName, "cmt_type")
	_commentReply.CreatedAt = field.NewInt64(tableName, "created_at")
	_commentReply.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_commentReply.fillFieldMap()

	return _commentReply
}

// commentReply 评论的回复表
type commentReply struct {
	commentReplyDo

	ALL        field.Asterisk
	ID         field.Int64
	MemberID   field.Int64  // 用户ID
	MemberName field.String // 用户名称
	CommentID  field.Int64  // 评论ID
	Content    field.String // 评论内容
	LikeNum    field.Int    // 评论点赞数
	CmtType    field.Int8   // 评论类型 1：商品评论 2：帖子评论
	CreatedAt  field.Int64
	UpdatedAt  field.Int64

	fieldMap map[string]field.Expr
}

func (c commentReply) Table(newTableName string) *commentReply {
	c.commentReplyDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c commentReply) As(alias string) *commentReply {
	c.commentReplyDo.DO = *(c.commentReplyDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *commentReply) updateTableName(table string) *commentReply {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.MemberID = field.NewInt64(table, "member_id")
	c.MemberName = field.NewString(table, "member_name")
	c.CommentID = field.NewInt64(table, "comment_id")
	c.Content = field.NewString(table, "content")
	c.LikeNum = field.NewInt(table, "like_num")
	c.CmtType = field.NewInt8(table, "cmt_type")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.UpdatedAt = field.NewInt64(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *commentReply) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *commentReply) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["member_id"] = c.MemberID
	c.fieldMap["member_name"] = c.MemberName
	c.fieldMap["comment_id"] = c.CommentID
	c.fieldMap["content"] = c.Content
	c.fieldMap["like_num"] = c.LikeNum
	c.fieldMap["cmt_type"] = c.CmtType
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c commentReply) clone(db *gorm.DB) commentReply {
	c.commentReplyDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c commentReply) replaceDB(db *gorm.DB) commentReply {
	c.commentReplyDo.ReplaceDB(db)
	return c
}

type commentReplyDo struct{ gen.DO }

type ICommentReplyDo interface {
	gen.SubQuery
	Debug() ICommentReplyDo
	WithContext(ctx context.Context) ICommentReplyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICommentReplyDo
	WriteDB() ICommentReplyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICommentReplyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICommentReplyDo
	Not(conds ...gen.Condition) ICommentReplyDo
	Or(conds ...gen.Condition) ICommentReplyDo
	Select(conds ...field.Expr) ICommentReplyDo
	Where(conds ...gen.Condition) ICommentReplyDo
	Order(conds ...field.Expr) ICommentReplyDo
	Distinct(cols ...field.Expr) ICommentReplyDo
	Omit(cols ...field.Expr) ICommentReplyDo
	Join(table schema.Tabler, on ...field.Expr) ICommentReplyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICommentReplyDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICommentReplyDo
	Group(cols ...field.Expr) ICommentReplyDo
	Having(conds ...gen.Condition) ICommentReplyDo
	Limit(limit int) ICommentReplyDo
	Offset(offset int) ICommentReplyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICommentReplyDo
	Unscoped() ICommentReplyDo
	Create(values ...*model.CommentReply) error
	CreateInBatches(values []*model.CommentReply, batchSize int) error
	Save(values ...*model.CommentReply) error
	First() (*model.CommentReply, error)
	Take() (*model.CommentReply, error)
	Last() (*model.CommentReply, error)
	Find() ([]*model.CommentReply, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommentReply, err error)
	FindInBatches(result *[]*model.CommentReply, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CommentReply) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICommentReplyDo
	Assign(attrs ...field.AssignExpr) ICommentReplyDo
	Joins(fields ...field.RelationField) ICommentReplyDo
	Preload(fields ...field.RelationField) ICommentReplyDo
	FirstOrInit() (*model.CommentReply, error)
	FirstOrCreate() (*model.CommentReply, error)
	FindByPage(offset int, limit int) (result []*model.CommentReply, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICommentReplyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c commentReplyDo) Debug() ICommentReplyDo {
	return c.withDO(c.DO.Debug())
}

func (c commentReplyDo) WithContext(ctx context.Context) ICommentReplyDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c commentReplyDo) ReadDB() ICommentReplyDo {
	return c.Clauses(dbresolver.Read)
}

func (c commentReplyDo) WriteDB() ICommentReplyDo {
	return c.Clauses(dbresolver.Write)
}

func (c commentReplyDo) Session(config *gorm.Session) ICommentReplyDo {
	return c.withDO(c.DO.Session(config))
}

func (c commentReplyDo) Clauses(conds ...clause.Expression) ICommentReplyDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c commentReplyDo) Returning(value interface{}, columns ...string) ICommentReplyDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c commentReplyDo) Not(conds ...gen.Condition) ICommentReplyDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c commentReplyDo) Or(conds ...gen.Condition) ICommentReplyDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c commentReplyDo) Select(conds ...field.Expr) ICommentReplyDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c commentReplyDo) Where(conds ...gen.Condition) ICommentReplyDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c commentReplyDo) Order(conds ...field.Expr) ICommentReplyDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c commentReplyDo) Distinct(cols ...field.Expr) ICommentReplyDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c commentReplyDo) Omit(cols ...field.Expr) ICommentReplyDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c commentReplyDo) Join(table schema.Tabler, on ...field.Expr) ICommentReplyDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c commentReplyDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICommentReplyDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c commentReplyDo) RightJoin(table schema.Tabler, on ...field.Expr) ICommentReplyDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c commentReplyDo) Group(cols ...field.Expr) ICommentReplyDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c commentReplyDo) Having(conds ...gen.Condition) ICommentReplyDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c commentReplyDo) Limit(limit int) ICommentReplyDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c commentReplyDo) Offset(offset int) ICommentReplyDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c commentReplyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICommentReplyDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c commentReplyDo) Unscoped() ICommentReplyDo {
	return c.withDO(c.DO.Unscoped())
}

func (c commentReplyDo) Create(values ...*model.CommentReply) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c commentReplyDo) CreateInBatches(values []*model.CommentReply, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c commentReplyDo) Save(values ...*model.CommentReply) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c commentReplyDo) First() (*model.CommentReply, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentReply), nil
	}
}

func (c commentReplyDo) Take() (*model.CommentReply, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentReply), nil
	}
}

func (c commentReplyDo) Last() (*model.CommentReply, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentReply), nil
	}
}

func (c commentReplyDo) Find() ([]*model.CommentReply, error) {
	result, err := c.DO.Find()
	return result.([]*model.CommentReply), err
}

func (c commentReplyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommentReply, err error) {
	buf := make([]*model.CommentReply, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c commentReplyDo) FindInBatches(result *[]*model.CommentReply, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c commentReplyDo) Attrs(attrs ...field.AssignExpr) ICommentReplyDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c commentReplyDo) Assign(attrs ...field.AssignExpr) ICommentReplyDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c commentReplyDo) Joins(fields ...field.RelationField) ICommentReplyDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c commentReplyDo) Preload(fields ...field.RelationField) ICommentReplyDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c commentReplyDo) FirstOrInit() (*model.CommentReply, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentReply), nil
	}
}

func (c commentReplyDo) FirstOrCreate() (*model.CommentReply, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentReply), nil
	}
}

func (c commentReplyDo) FindByPage(offset int, limit int) (result []*model.CommentReply, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c commentReplyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c commentReplyDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c commentReplyDo) Delete(models ...*model.CommentReply) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *commentReplyDo) withDO(do gen.Dao) *commentReplyDo {
	c.DO = *do.(*gen.DO)
	return c
}
